
AMR_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08007468  08007468  00008468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800787c  0800787c  000091e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800787c  0800787c  0000887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007884  08007884  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007884  08007884  00008884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007888  08007888  00008888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800788c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001e0  08007a6c  000091e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08007a6c  00009514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de11  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002291  00000000  00000000  00017021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000192b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  0001a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fe  00000000  00000000  0001aa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc37  00000000  00000000  00032484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffae  00000000  00000000  000420bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  000d20ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d68f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007450 	.word	0x08007450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007450 	.word	0x08007450

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Encoder_Init>:
#include "encoder.h"

void Encoder_Init(Encoder_t *e, TIM_HandleTypeDef *htim, uint32_t counts_per_rev, uint32_t sample_interval_ms)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
    e->htim = htim;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	601a      	str	r2, [r3, #0]
    e->counts_per_rev = counts_per_rev;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	611a      	str	r2, [r3, #16]
    e->sample_interval_ms = sample_interval_ms;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	615a      	str	r2, [r3, #20]
    e->last_cnt = __HAL_TIM_GET_COUNTER(htim);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	605a      	str	r2, [r3, #4]
    e->position = 0;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
    e->rpm = 0.0f;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <Encoder_Update>:

void Encoder_Update(Encoder_t *e)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    uint32_t cur = __HAL_TIM_GET_COUNTER(e->htim);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	61fb      	str	r3, [r7, #28]
    if (e->htim->Init.Period <= 0xFFFFu) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f44:	d238      	bcs.n	8000fb8 <Encoder_Update+0x90>
        uint16_t cur16 = (uint16_t)cur;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	827b      	strh	r3, [r7, #18]
        int16_t d16 = (int16_t)(cur16 - (uint16_t)e->last_cnt);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	8a7a      	ldrh	r2, [r7, #18]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	823b      	strh	r3, [r7, #16]
        e->position += (int32_t)d16;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f60:	441a      	add	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
        e->last_cnt = cur16;
 8000f66:	8a7a      	ldrh	r2, [r7, #18]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	605a      	str	r2, [r3, #4]
        float dt = (float)e->sample_interval_ms / 1000.0f;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f78:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001028 <Encoder_Update+0x100>
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f80:	edc7 7a03 	vstr	s15, [r7, #12]
        e->rpm = ((float)d16 / (float)e->counts_per_rev) * (60.0f / dt);
 8000f84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fa0:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800102c <Encoder_Update+0x104>
 8000fa4:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fa8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	edc3 7a03 	vstr	s15, [r3, #12]
        e->position += d32;
        e->last_cnt = cur;
        float dt = (float)e->sample_interval_ms / 1000.0f;
        e->rpm = ((float)d32 / (float)e->counts_per_rev) * (60.0f / dt);
    }
}
 8000fb6:	e031      	b.n	800101c <Encoder_Update+0xf4>
        int32_t d32 = (int32_t)((int32_t)cur - (int32_t)e->last_cnt);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6852      	ldr	r2, [r2, #4]
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        e->position += d32;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	441a      	add	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
        e->last_cnt = cur;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	605a      	str	r2, [r3, #4]
        float dt = (float)e->sample_interval_ms / 1000.0f;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fe0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001028 <Encoder_Update+0x100>
 8000fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe8:	edc7 7a05 	vstr	s15, [r7, #20]
        e->rpm = ((float)d32 / (float)e->counts_per_rev) * (60.0f / dt);
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001006:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 800102c <Encoder_Update+0x104>
 800100a:	edd7 6a05 	vldr	s13, [r7, #20]
 800100e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800101c:	bf00      	nop
 800101e:	3724      	adds	r7, #36	@ 0x24
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	447a0000 	.word	0x447a0000
 800102c:	42700000 	.word	0x42700000

08001030 <Encoder_GetPosition>:

int32_t Encoder_GetPosition(Encoder_t *e) { return e->position; }
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <Encoder_GetRPM>:
float Encoder_GetRPM(Encoder_t *e) { return e->rpm; }
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800106c:	b0a6      	sub	sp, #152	@ 0x98
 800106e:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f001 f84e 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f97c 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 fb06 	bl	8001688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800107c:	f000 fada 	bl	8001634 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001080:	f000 f9e2 	bl	8001448 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001084:	f000 fa82 	bl	800158c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // === Initialize motor ===
  motor1.htim = &htim1;
 8001088:	4ba3      	ldr	r3, [pc, #652]	@ (8001318 <main+0x2b0>)
 800108a:	4aa4      	ldr	r2, [pc, #656]	@ (800131c <main+0x2b4>)
 800108c:	601a      	str	r2, [r3, #0]
  motor1.channel = TIM_CHANNEL_1;
 800108e:	4ba2      	ldr	r3, [pc, #648]	@ (8001318 <main+0x2b0>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  motor1.dir_port_a = GPIOB;
 8001094:	4ba0      	ldr	r3, [pc, #640]	@ (8001318 <main+0x2b0>)
 8001096:	4aa2      	ldr	r2, [pc, #648]	@ (8001320 <main+0x2b8>)
 8001098:	609a      	str	r2, [r3, #8]
  motor1.dir_pin_a = GPIO_PIN_4;
 800109a:	4b9f      	ldr	r3, [pc, #636]	@ (8001318 <main+0x2b0>)
 800109c:	2210      	movs	r2, #16
 800109e:	819a      	strh	r2, [r3, #12]
  motor1.dir_port_b = GPIOB;
 80010a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001318 <main+0x2b0>)
 80010a2:	4a9f      	ldr	r2, [pc, #636]	@ (8001320 <main+0x2b8>)
 80010a4:	611a      	str	r2, [r3, #16]
  motor1.dir_pin_b = GPIO_PIN_5;
 80010a6:	4b9c      	ldr	r3, [pc, #624]	@ (8001318 <main+0x2b0>)
 80010a8:	2220      	movs	r2, #32
 80010aa:	829a      	strh	r2, [r3, #20]
  Motor_Init(&motor1);
 80010ac:	489a      	ldr	r0, [pc, #616]	@ (8001318 <main+0x2b0>)
 80010ae:	f000 fb75 	bl	800179c <Motor_Init>

  // === Initialize encoder ===
  Encoder_Init(&enc1, &htim3, COUNTS_PER_REV, SAMPLE_INTERVAL_MS);
 80010b2:	2364      	movs	r3, #100	@ 0x64
 80010b4:	2230      	movs	r2, #48	@ 0x30
 80010b6:	499b      	ldr	r1, [pc, #620]	@ (8001324 <main+0x2bc>)
 80010b8:	489b      	ldr	r0, [pc, #620]	@ (8001328 <main+0x2c0>)
 80010ba:	f7ff ff13 	bl	8000ee4 <Encoder_Init>

  // === Initialize PID ===
  PID_Init(&pid_speed, 0.4f, 0.2f, 0.03f, -((float)htim1.Init.Period), (float)htim1.Init.Period);
 80010be:	4b97      	ldr	r3, [pc, #604]	@ (800131c <main+0x2b4>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	eef1 7a67 	vneg.f32	s15, s15
 80010ce:	4b93      	ldr	r3, [pc, #588]	@ (800131c <main+0x2b4>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	ee07 3a10 	vmov	s14, r3
 80010d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80010da:	eeb0 2a47 	vmov.f32	s4, s14
 80010de:	eef0 1a67 	vmov.f32	s3, s15
 80010e2:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 800132c <main+0x2c4>
 80010e6:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8001330 <main+0x2c8>
 80010ea:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8001334 <main+0x2cc>
 80010ee:	4892      	ldr	r0, [pc, #584]	@ (8001338 <main+0x2d0>)
 80010f0:	f000 fc02 	bl	80018f8 <PID_Init>

  /* Reset PID state to ensure clean start */
  pid_speed.integral = 0.0f;
 80010f4:	4b90      	ldr	r3, [pc, #576]	@ (8001338 <main+0x2d0>)
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  pid_speed.prev_error = 0.0f;
 80010fc:	4b8e      	ldr	r3, [pc, #568]	@ (8001338 <main+0x2d0>)
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  pid_speed.last_error = 0.0f;
 8001104:	4b8c      	ldr	r3, [pc, #560]	@ (8001338 <main+0x2d0>)
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	621a      	str	r2, [r3, #32]

  /* Optionally, if your PID struct stores derivative */
  pid_speed.derivative = 0.0f;
 800110c:	4b8a      	ldr	r3, [pc, #552]	@ (8001338 <main+0x2d0>)
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	615a      	str	r2, [r3, #20]

  // === Initialize Ramp ===
  Ramp_Init(&speed_ramp, 0.0f, 50.0f); // allow 200 RPM per second slew
 8001114:	eddf 0a89 	vldr	s1, [pc, #548]	@ 800133c <main+0x2d4>
 8001118:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8001340 <main+0x2d8>
 800111c:	4889      	ldr	r0, [pc, #548]	@ (8001344 <main+0x2dc>)
 800111e:	f000 fcd9 	bl	8001ad4 <Ramp_Init>

  /* --- Initialize test framework --- */
  Test_InitSystem();
 8001122:	f000 ff87 	bl	8002034 <Test_InitSystem>

  /* Choose one test to run. Uncomment the one you want. */
  Test_SetActive(&Test_Step);    // step input test (default)
 8001126:	4888      	ldr	r0, [pc, #544]	@ (8001348 <main+0x2e0>)
 8001128:	f000 ff5e 	bl	8001fe8 <Test_SetActive>
  // Test_SetActive(&Test_F_Sweep); // chirp / frequency sweep test



  /* Start encoder timer */
  if (HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK) {
 800112c:	213c      	movs	r1, #60	@ 0x3c
 800112e:	487d      	ldr	r0, [pc, #500]	@ (8001324 <main+0x2bc>)
 8001130:	f002 f97a 	bl	8003428 <HAL_TIM_Encoder_Start>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <main+0xd6>
    Error_Handler();
 800113a:	f000 fb29 	bl	8001790 <Error_Handler>
  }

  /* Timestamp for next sample */
  uint32_t last_sample_tick = HAL_GetTick();
 800113e:	f001 f84d 	bl	80021dc <HAL_GetTick>
 8001142:	64f8      	str	r0, [r7, #76]	@ 0x4c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Run control loop every SAMPLE_INTERVAL_MS */
	  uint32_t now = HAL_GetTick();
 8001144:	f001 f84a 	bl	80021dc <HAL_GetTick>
 8001148:	64b8      	str	r0, [r7, #72]	@ 0x48
	  if ((now - last_sample_tick) >= SAMPLE_INTERVAL_MS)
 800114a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800114c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b63      	cmp	r3, #99	@ 0x63
 8001152:	d9f7      	bls.n	8001144 <main+0xdc>
	  {
		last_sample_tick += SAMPLE_INTERVAL_MS;
 8001154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001156:	3364      	adds	r3, #100	@ 0x64
 8001158:	64fb      	str	r3, [r7, #76]	@ 0x4c

		/* update encoder (reads TIM3 counter and computes rpm/position) */
		Encoder_Update(&enc1);
 800115a:	4873      	ldr	r0, [pc, #460]	@ (8001328 <main+0x2c0>)
 800115c:	f7ff fee4 	bl	8000f28 <Encoder_Update>

		/* read current measurement */
		float measured_rpm = Encoder_GetRPM(&enc1);
 8001160:	4871      	ldr	r0, [pc, #452]	@ (8001328 <main+0x2c0>)
 8001162:	f7ff ff71 	bl	8001048 <Encoder_GetRPM>
 8001166:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		int32_t pos_counts = Encoder_GetPosition(&enc1);
 800116a:	486f      	ldr	r0, [pc, #444]	@ (8001328 <main+0x2c0>)
 800116c:	f7ff ff60 	bl	8001030 <Encoder_GetPosition>
 8001170:	6438      	str	r0, [r7, #64]	@ 0x40

		/* dt for this cycle (seconds) */
		float dt = (float)SAMPLE_INTERVAL_MS / 1000.0f;
 8001172:	4b76      	ldr	r3, [pc, #472]	@ (800134c <main+0x2e4>)
 8001174:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* let the active test update the target setpoint (target_rpm) */
		{
			const Test_t *active = Test_GetActive();
 8001176:	f000 ff51 	bl	800201c <Test_GetActive>
 800117a:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (active && active->update) {
 800117c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800117e:	2b00      	cmp	r3, #0
 8001180:	d008      	beq.n	8001194 <main+0x12c>
 8001182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d004      	beq.n	8001194 <main+0x12c>
				active->update(dt); /* tests can use dt or HAL_GetTick internally */
 800118a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001192:	4798      	blx	r3
			}
		}

		/* PID update (dt in seconds) -- use ramped command_rpm */
		float cmd_rpm = Ramp_Update(&speed_ramp, target_rpm, dt);
 8001194:	4b6e      	ldr	r3, [pc, #440]	@ (8001350 <main+0x2e8>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	4868      	ldr	r0, [pc, #416]	@ (8001344 <main+0x2dc>)
 80011a4:	f000 fcae 	bl	8001b04 <Ramp_Update>
 80011a8:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		float pwm_out = PID_Update(&pid_speed, cmd_rpm, measured_rpm, dt);
 80011ac:	ed97 1a0f 	vldr	s2, [r7, #60]	@ 0x3c
 80011b0:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 80011b4:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80011b8:	485f      	ldr	r0, [pc, #380]	@ (8001338 <main+0x2d0>)
 80011ba:	f000 fbd4 	bl	8001966 <PID_Update>
 80011be:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

		/* convert pwm_out to integer PWM value and apply to motor */
		/* pid configured to output between 0..htim1 period or -period..+period depending on usage */
		int32_t pwm_int = (int32_t) (pwm_out);
 80011c2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ca:	ee17 3a90 	vmov	r3, s15
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

		Motor_SetPWM(&motor1, pwm_int);
 80011d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011d2:	4851      	ldr	r0, [pc, #324]	@ (8001318 <main+0x2b0>)
 80011d4:	f000 fafc 	bl	80017d0 <Motor_SetPWM>

		/* Send telemetry over UART */
		if (HAL_GetTick() - last_header_time > 10000) {
 80011d8:	f001 f800 	bl	80021dc <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	4b5d      	ldr	r3, [pc, #372]	@ (8001354 <main+0x2ec>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d921      	bls.n	8001230 <main+0x1c8>
		    const Test_t *active = Test_GetActive();
 80011ec:	f000 ff16 	bl	800201c <Test_GetActive>
 80011f0:	62b8      	str	r0, [r7, #40]	@ 0x28
		    const char *tname = active ? active->name : "none";
 80011f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <main+0x196>
 80011f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	e000      	b.n	8001200 <main+0x198>
 80011fe:	4b56      	ldr	r3, [pc, #344]	@ (8001358 <main+0x2f0>)
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
		    int hlen = snprintf(uart_buf, sizeof(uart_buf), "#HEADER: test=%s,t,pos,cmd,meas,err,p,i,d,pwm\r\n", tname);
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	4a55      	ldr	r2, [pc, #340]	@ (800135c <main+0x2f4>)
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	4855      	ldr	r0, [pc, #340]	@ (8001360 <main+0x2f8>)
 800120a:	f003 ffdb 	bl	80051c4 <sniprintf>
 800120e:	6238      	str	r0, [r7, #32]
		    if (hlen > 0) HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, (uint16_t)hlen, HAL_MAX_DELAY);
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	2b00      	cmp	r3, #0
 8001214:	dd07      	ble.n	8001226 <main+0x1be>
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	b29a      	uxth	r2, r3
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	4950      	ldr	r1, [pc, #320]	@ (8001360 <main+0x2f8>)
 8001220:	4850      	ldr	r0, [pc, #320]	@ (8001364 <main+0x2fc>)
 8001222:	f002 fefb 	bl	800401c <HAL_UART_Transmit>
		    last_header_time = HAL_GetTick();
 8001226:	f000 ffd9 	bl	80021dc <HAL_GetTick>
 800122a:	4603      	mov	r3, r0
 800122c:	4a49      	ldr	r2, [pc, #292]	@ (8001354 <main+0x2ec>)
 800122e:	6013      	str	r3, [r2, #0]
		}

		int len = snprintf(uart_buf, sizeof(uart_buf),
		                   "%.2f,%ld,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%ld\r\n",
		                   (float)HAL_GetTick() / 1000.0f,
 8001230:	f000 ffd4 	bl	80021dc <HAL_GetTick>
 8001234:	ee07 0a90 	vmov	s15, r0
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001368 <main+0x300>
 8001240:	eec7 6a87 	vdiv.f32	s13, s15, s14
		int len = snprintf(uart_buf, sizeof(uart_buf),
 8001244:	ee16 0a90 	vmov	r0, s13
 8001248:	f7ff f986 	bl	8000558 <__aeabi_f2d>
 800124c:	4680      	mov	r8, r0
 800124e:	4689      	mov	r9, r1
 8001250:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001252:	f7ff f981 	bl	8000558 <__aeabi_f2d>
 8001256:	4682      	mov	sl, r0
 8001258:	468b      	mov	fp, r1
 800125a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800125c:	f7ff f97c 	bl	8000558 <__aeabi_f2d>
 8001260:	e9c7 0104 	strd	r0, r1, [r7, #16]
		                   (long)pos_counts,
		                   cmd_rpm,
		                   measured_rpm,
		                   pid_speed.last_error,
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <main+0x2d0>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
		int len = snprintf(uart_buf, sizeof(uart_buf),
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f975 	bl	8000558 <__aeabi_f2d>
 800126e:	e9c7 0102 	strd	r0, r1, [r7, #8]
		                   pid_speed.Kp * pid_speed.last_error,
 8001272:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <main+0x2d0>)
 8001274:	ed93 7a00 	vldr	s14, [r3]
 8001278:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <main+0x2d0>)
 800127a:	edd3 7a08 	vldr	s15, [r3, #32]
 800127e:	ee67 7a27 	vmul.f32	s15, s14, s15
		int len = snprintf(uart_buf, sizeof(uart_buf),
 8001282:	ee17 0a90 	vmov	r0, s15
 8001286:	f7ff f967 	bl	8000558 <__aeabi_f2d>
 800128a:	e9c7 0100 	strd	r0, r1, [r7]
		                   pid_speed.Ki * pid_speed.integral,
 800128e:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <main+0x2d0>)
 8001290:	ed93 7a01 	vldr	s14, [r3, #4]
 8001294:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <main+0x2d0>)
 8001296:	edd3 7a03 	vldr	s15, [r3, #12]
 800129a:	ee67 7a27 	vmul.f32	s15, s14, s15
		int len = snprintf(uart_buf, sizeof(uart_buf),
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f959 	bl	8000558 <__aeabi_f2d>
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
		                   pid_speed.Kd * pid_speed.derivative,
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <main+0x2d0>)
 80012ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80012b0:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <main+0x2d0>)
 80012b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012b6:	ee67 7a27 	vmul.f32	s15, s14, s15
		int len = snprintf(uart_buf, sizeof(uart_buf),
 80012ba:	ee17 0a90 	vmov	r0, s15
 80012be:	f7ff f94b 	bl	8000558 <__aeabi_f2d>
 80012c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80012c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80012ca:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 80012ce:	ed97 7b00 	vldr	d7, [r7]
 80012d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80012d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80012da:	ed8d 7b08 	vstr	d7, [sp, #32]
 80012de:	ed97 7b04 	vldr	d7, [r7, #16]
 80012e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80012e6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80012ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	e9cd 8900 	strd	r8, r9, [sp]
 80012f2:	4a1e      	ldr	r2, [pc, #120]	@ (800136c <main+0x304>)
 80012f4:	2180      	movs	r1, #128	@ 0x80
 80012f6:	481a      	ldr	r0, [pc, #104]	@ (8001360 <main+0x2f8>)
 80012f8:	f003 ff64 	bl	80051c4 <sniprintf>
 80012fc:	61f8      	str	r0, [r7, #28]
		                   (long)pwm_int);

		if (len > 0) {
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f77f af1f 	ble.w	8001144 <main+0xdc>
		    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, (uint16_t)len, HAL_MAX_DELAY);
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	b29a      	uxth	r2, r3
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	4914      	ldr	r1, [pc, #80]	@ (8001360 <main+0x2f8>)
 8001310:	4814      	ldr	r0, [pc, #80]	@ (8001364 <main+0x2fc>)
 8001312:	f002 fe83 	bl	800401c <HAL_UART_Transmit>
  {
 8001316:	e715      	b.n	8001144 <main+0xdc>
 8001318:	200002ec 	.word	0x200002ec
 800131c:	200001fc 	.word	0x200001fc
 8001320:	40020400 	.word	0x40020400
 8001324:	20000244 	.word	0x20000244
 8001328:	200002d4 	.word	0x200002d4
 800132c:	3cf5c28f 	.word	0x3cf5c28f
 8001330:	3e4ccccd 	.word	0x3e4ccccd
 8001334:	3ecccccd 	.word	0x3ecccccd
 8001338:	20000304 	.word	0x20000304
 800133c:	42480000 	.word	0x42480000
 8001340:	00000000 	.word	0x00000000
 8001344:	2000032c 	.word	0x2000032c
 8001348:	080074f8 	.word	0x080074f8
 800134c:	3dcccccd 	.word	0x3dcccccd
 8001350:	20000000 	.word	0x20000000
 8001354:	200003b4 	.word	0x200003b4
 8001358:	08007468 	.word	0x08007468
 800135c:	08007470 	.word	0x08007470
 8001360:	20000334 	.word	0x20000334
 8001364:	2000028c 	.word	0x2000028c
 8001368:	447a0000 	.word	0x447a0000
 800136c:	080074a0 	.word	0x080074a0

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	@ 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2230      	movs	r2, #48	@ 0x30
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f003 ff99 	bl	80052b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <SystemClock_Config+0xd0>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <SystemClock_Config+0xd0>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <SystemClock_Config+0xd0>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <SystemClock_Config+0xd4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013bc:	4a21      	ldr	r2, [pc, #132]	@ (8001444 <SystemClock_Config+0xd4>)
 80013be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <SystemClock_Config+0xd4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d8:	2310      	movs	r3, #16
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013e4:	2310      	movs	r3, #16
 80013e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ee:	2304      	movs	r3, #4
 80013f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013f2:	2307      	movs	r3, #7
 80013f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f97e 	bl	80026fc <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001406:	f000 f9c3 	bl	8001790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140a:	230f      	movs	r3, #15
 800140c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140e:	2302      	movs	r3, #2
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2102      	movs	r1, #2
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fbe0 	bl	8002bec <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001432:	f000 f9ad 	bl	8001790 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3750      	adds	r7, #80	@ 0x50
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b096      	sub	sp, #88	@ 0x58
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2220      	movs	r2, #32
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 ff18 	bl	80052b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001486:	4b3f      	ldr	r3, [pc, #252]	@ (8001584 <MX_TIM1_Init+0x13c>)
 8001488:	4a3f      	ldr	r2, [pc, #252]	@ (8001588 <MX_TIM1_Init+0x140>)
 800148a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <MX_TIM1_Init+0x13c>)
 800148e:	2253      	movs	r2, #83	@ 0x53
 8001490:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <MX_TIM1_Init+0x13c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001498:	4b3a      	ldr	r3, [pc, #232]	@ (8001584 <MX_TIM1_Init+0x13c>)
 800149a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800149e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <MX_TIM1_Init+0x13c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a6:	4b37      	ldr	r3, [pc, #220]	@ (8001584 <MX_TIM1_Init+0x13c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b35      	ldr	r3, [pc, #212]	@ (8001584 <MX_TIM1_Init+0x13c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b2:	4834      	ldr	r0, [pc, #208]	@ (8001584 <MX_TIM1_Init+0x13c>)
 80014b4:	f001 fdba 	bl	800302c <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014be:	f000 f967 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014cc:	4619      	mov	r1, r3
 80014ce:	482d      	ldr	r0, [pc, #180]	@ (8001584 <MX_TIM1_Init+0x13c>)
 80014d0:	f002 f8fa 	bl	80036c8 <HAL_TIM_ConfigClockSource>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014da:	f000 f959 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014de:	4829      	ldr	r0, [pc, #164]	@ (8001584 <MX_TIM1_Init+0x13c>)
 80014e0:	f001 fdf3 	bl	80030ca <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014ea:	f000 f951 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014fa:	4619      	mov	r1, r3
 80014fc:	4821      	ldr	r0, [pc, #132]	@ (8001584 <MX_TIM1_Init+0x13c>)
 80014fe:	f002 fc7d 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001508:	f000 f942 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150c:	2360      	movs	r3, #96	@ 0x60
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	2200      	movs	r2, #0
 800152e:	4619      	mov	r1, r3
 8001530:	4814      	ldr	r0, [pc, #80]	@ (8001584 <MX_TIM1_Init+0x13c>)
 8001532:	f002 f807 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800153c:	f000 f928 	bl	8001790 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001558:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800155a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800155e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <MX_TIM1_Init+0x13c>)
 8001566:	f002 fcb7 	bl	8003ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001570:	f000 f90e 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <MX_TIM1_Init+0x13c>)
 8001576:	f000 fbad 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 800157a:	bf00      	nop
 800157c:	3758      	adds	r7, #88	@ 0x58
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001fc 	.word	0x200001fc
 8001588:	40010000 	.word	0x40010000

0800158c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2224      	movs	r2, #36	@ 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fe8b 	bl	80052b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <MX_TIM3_Init+0xa0>)
 80015aa:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <MX_TIM3_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <MX_TIM3_Init+0xa0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_TIM3_Init+0xa0>)
 80015bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <MX_TIM3_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_TIM3_Init+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ce:	2303      	movs	r3, #3
 80015d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015d6:	2301      	movs	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015e6:	2301      	movs	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_TIM3_Init+0xa0>)
 80015fa:	f001 fe6f 	bl	80032dc <HAL_TIM_Encoder_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001604:	f000 f8c4 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_TIM3_Init+0xa0>)
 8001616:	f002 fbf1 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001620:	f000 f8b6 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3730      	adds	r7, #48	@ 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000244 	.word	0x20000244
 8001630:	40000400 	.word	0x40000400

08001634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <MX_USART2_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 8001640:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_USART2_UART_Init+0x4c>)
 800166c:	f002 fc86 	bl	8003f7c <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f88b 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000028c 	.word	0x2000028c
 8001684:	40004400 	.word	0x40004400

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b37      	ldr	r3, [pc, #220]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a36      	ldr	r2, [pc, #216]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a28      	ldr	r2, [pc, #160]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a21      	ldr	r2, [pc, #132]	@ (8001780 <MX_GPIO_Init+0xf8>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <MX_GPIO_Init+0xf8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KARTIK_LED_GPIO_Port, KARTIK_LED_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	481c      	ldr	r0, [pc, #112]	@ (8001784 <MX_GPIO_Init+0xfc>)
 8001714:	f000 ffd8 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2130      	movs	r1, #48	@ 0x30
 800171c:	481a      	ldr	r0, [pc, #104]	@ (8001788 <MX_GPIO_Init+0x100>)
 800171e:	f000 ffd3 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001728:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4814      	ldr	r0, [pc, #80]	@ (800178c <MX_GPIO_Init+0x104>)
 800173a:	f000 fe41 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KARTIK_LED_Pin */
  GPIO_InitStruct.Pin = KARTIK_LED_Pin;
 800173e:	2320      	movs	r3, #32
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KARTIK_LED_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480b      	ldr	r0, [pc, #44]	@ (8001784 <MX_GPIO_Init+0xfc>)
 8001756:	f000 fe33 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800175a:	2330      	movs	r3, #48	@ 0x30
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_GPIO_Init+0x100>)
 8001772:	f000 fe25 	bl	80023c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	@ 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <Error_Handler+0x8>

0800179c <Motor_Init>:
#include "motor.h"

void Motor_Init(Motor_t *m)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    // start PWM output for the timer/channel
    if (m && m->htim) {
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00e      	beq.n	80017c8 <Motor_Init+0x2c>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00a      	beq.n	80017c8 <Motor_Init+0x2c>
        HAL_TIM_PWM_Start(m->htim, m->channel);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f001 fcdd 	bl	800317c <HAL_TIM_PWM_Start>
        Motor_Stop(m);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f863 	bl	800188e <Motor_Stop>
    }
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <Motor_SetPWM>:

void Motor_SetPWM(Motor_t *m, int32_t pwm)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    if (!m || !m->htim) return;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d052      	beq.n	8001886 <Motor_SetPWM+0xb6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d04e      	beq.n	8001886 <Motor_SetPWM+0xb6>

    uint32_t duty = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
    if (pwm >= 0) {
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db12      	blt.n	8001818 <Motor_SetPWM+0x48>
        HAL_GPIO_WritePin(m->dir_port_a, m->dir_pin_a, GPIO_PIN_SET);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6898      	ldr	r0, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	899b      	ldrh	r3, [r3, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4619      	mov	r1, r3
 80017fe:	f000 ff63 	bl	80026c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(m->dir_port_b, m->dir_pin_b, GPIO_PIN_RESET);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6918      	ldr	r0, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8a9b      	ldrh	r3, [r3, #20]
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	f000 ff5b 	bl	80026c8 <HAL_GPIO_WritePin>
        duty = (uint32_t)pwm;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e012      	b.n	800183e <Motor_SetPWM+0x6e>
    } else {
        HAL_GPIO_WritePin(m->dir_port_a, m->dir_pin_a, GPIO_PIN_RESET);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6898      	ldr	r0, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	899b      	ldrh	r3, [r3, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	4619      	mov	r1, r3
 8001824:	f000 ff50 	bl	80026c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(m->dir_port_b, m->dir_pin_b, GPIO_PIN_SET);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6918      	ldr	r0, [r3, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8a9b      	ldrh	r3, [r3, #20]
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	f000 ff48 	bl	80026c8 <HAL_GPIO_WritePin>
        duty = (uint32_t)(-pwm);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	425b      	negs	r3, r3
 800183c:	60fb      	str	r3, [r7, #12]
    }
    __HAL_TIM_SET_COMPARE(m->htim, m->channel, duty);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <Motor_SetPWM+0x82>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001850:	e01a      	b.n	8001888 <Motor_SetPWM+0xb8>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b04      	cmp	r3, #4
 8001858:	d105      	bne.n	8001866 <Motor_SetPWM+0x96>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6393      	str	r3, [r2, #56]	@ 0x38
 8001864:	e010      	b.n	8001888 <Motor_SetPWM+0xb8>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d105      	bne.n	800187a <Motor_SetPWM+0xaa>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001878:	e006      	b.n	8001888 <Motor_SetPWM+0xb8>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6413      	str	r3, [r2, #64]	@ 0x40
 8001884:	e000      	b.n	8001888 <Motor_SetPWM+0xb8>
    if (!m || !m->htim) return;
 8001886:	bf00      	nop
}
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <Motor_Stop>:

void Motor_Stop(Motor_t *m)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
    if (!m || !m->htim) return;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d027      	beq.n	80018ec <Motor_Stop+0x5e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d023      	beq.n	80018ec <Motor_Stop+0x5e>
    __HAL_TIM_SET_COMPARE(m->htim, m->channel, 0);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <Motor_Stop+0x2a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b6:	e01a      	b.n	80018ee <Motor_Stop+0x60>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d105      	bne.n	80018cc <Motor_Stop+0x3e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80018ca:	e010      	b.n	80018ee <Motor_Stop+0x60>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d105      	bne.n	80018e0 <Motor_Stop+0x52>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018de:	e006      	b.n	80018ee <Motor_Stop+0x60>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	e000      	b.n	80018ee <Motor_Stop+0x60>
    if (!m || !m->htim) return;
 80018ec:	bf00      	nop
}
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <PID_Init>:
#include "pid.h"

void PID_Init(PID_t *pid, float Kp, float Ki, float Kd, float out_min, float out_max)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6178      	str	r0, [r7, #20]
 8001900:	ed87 0a04 	vstr	s0, [r7, #16]
 8001904:	edc7 0a03 	vstr	s1, [r7, #12]
 8001908:	ed87 1a02 	vstr	s2, [r7, #8]
 800190c:	edc7 1a01 	vstr	s3, [r7, #4]
 8001910:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	609a      	str	r2, [r3, #8]

    pid->integral = 0.0f;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
    pid->derivative = 0.0f;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
    pid->out_min = out_min;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	619a      	str	r2, [r3, #24]
    pid->out_max = out_max;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	61da      	str	r2, [r3, #28]

    pid->last_error = 0.0f;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
    pid->last_output = 0.0f;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PID_Update>:

float PID_Update(PID_t *pid, float setpoint, float measurement, float dt)
{
 8001966:	b480      	push	{r7}
 8001968:	b087      	sub	sp, #28
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001972:	edc7 0a01 	vstr	s1, [r7, #4]
 8001976:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - measurement;
 800197a:	ed97 7a02 	vldr	s14, [r7, #8]
 800197e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001986:	edc7 7a04 	vstr	s15, [r7, #16]
    pid->last_error = error;  // store for telemetry
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	621a      	str	r2, [r3, #32]

    // --- Integral term ---
    pid->integral += error * dt;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	ed93 7a03 	vldr	s14, [r3, #12]
 8001996:	edd7 6a04 	vldr	s13, [r7, #16]
 800199a:	edd7 7a00 	vldr	s15, [r7]
 800199e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	edc3 7a03 	vstr	s15, [r3, #12]

    // Anti-windup
    if (pid->integral * pid->Ki > pid->out_max)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	edd3 7a07 	vldr	s15, [r3, #28]
 80019c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	dd0b      	ble.n	80019e4 <PID_Update+0x7e>
        pid->integral = pid->out_max / pid->Ki;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edc3 7a03 	vstr	s15, [r3, #12]
 80019e2:	e01a      	b.n	8001a1a <PID_Update+0xb4>
    else if (pid->integral * pid->Ki < pid->out_min)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80019fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d50a      	bpl.n	8001a1a <PID_Update+0xb4>
        pid->integral = pid->out_min / pid->Ki;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edc3 7a03 	vstr	s15, [r3, #12]

    // --- Derivative term ---
    if (dt > 0.0f)
 8001a1a:	edd7 7a00 	vldr	s15, [r7]
 8001a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	dd0d      	ble.n	8001a44 <PID_Update+0xde>
        pid->derivative = (error - pid->prev_error) / dt;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a32:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a36:	ed97 7a00 	vldr	s14, [r7]
 8001a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edc3 7a05 	vstr	s15, [r3, #20]

    // --- PID output ---
    float out = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * pid->derivative;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Clamp output
    if (out > pid->out_max) out = pid->out_max;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	dd03      	ble.n	8001a9a <PID_Update+0x134>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00c      	b.n	8001ab4 <PID_Update+0x14e>
    else if (out < pid->out_min) out = pid->out_min;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001aa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	d502      	bpl.n	8001ab4 <PID_Update+0x14e>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	617b      	str	r3, [r7, #20]

    pid->prev_error = error;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	611a      	str	r2, [r3, #16]
    pid->last_output = out;  // store for UART telemetry
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24

    return out;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	ee07 3a90 	vmov	s15, r3
}
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <Ramp_Init>:


#include "ramp.h"
#include <math.h>

void Ramp_Init(Ramp_t* r, float initial, float max_delta_per_s) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ae0:	edc7 0a01 	vstr	s1, [r7, #4]
    r->value = initial;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	601a      	str	r2, [r3, #0]
    r->max_delta_per_s = fabsf(max_delta_per_s);
 8001aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aee:	eef0 7ae7 	vabs.f32	s15, s15
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <Ramp_Update>:

float Ramp_Update(Ramp_t* r, float target, float dt_s) {
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b10:	edc7 0a01 	vstr	s1, [r7, #4]
    if (dt_s <= 0.0f) return r->value;
 8001b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d802      	bhi.n	8001b28 <Ramp_Update+0x24>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e03a      	b.n	8001b9e <Ramp_Update+0x9a>
    float max_delta = r->max_delta_per_s * dt_s;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b36:	edc7 7a04 	vstr	s15, [r7, #16]
    float delta = target - r->value;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	edc7 7a05 	vstr	s15, [r7, #20]
    if (delta > max_delta) delta = max_delta;
 8001b4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5c:	dd02      	ble.n	8001b64 <Ramp_Update+0x60>
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e010      	b.n	8001b86 <Ramp_Update+0x82>
    else if (delta < -max_delta) delta = -max_delta;
 8001b64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b68:	eef1 7a67 	vneg.f32	s15, s15
 8001b6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	d505      	bpl.n	8001b86 <Ramp_Update+0x82>
 8001b7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b7e:	eef1 7a67 	vneg.f32	s15, s15
 8001b82:	edc7 7a05 	vstr	s15, [r7, #20]
    r->value += delta;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	edc3 7a00 	vstr	s15, [r3]
    return r->value;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
}
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <HAL_MspInit+0x4c>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a08      	ldr	r2, [pc, #32]	@ (8001bfc <HAL_MspInit+0x4c>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c3c <HAL_TIM_Base_MspInit+0x3c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10d      	bne.n	8001c2e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_TIM_Base_MspInit+0x40>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <HAL_TIM_Base_MspInit+0x40>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_TIM_Base_MspInit+0x40>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d12b      	bne.n	8001cbe <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x88>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x88>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x88>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x88>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x88>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c9e:	23c0      	movs	r3, #192	@ 0xc0
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001cba:	f000 fb81 	bl	80023c0 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <HAL_TIM_MspPostInit+0x68>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d11e      	bne.n	8001d34 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_TIM_MspPostInit+0x6c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_TIM_MspPostInit+0x6c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <HAL_TIM_MspPostInit+0x70>)
 8001d30:	f000 fb46 	bl	80023c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000

08001d48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_UART_MspInit+0x84>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12b      	bne.n	8001dc2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	4a17      	ldr	r2, [pc, #92]	@ (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a10      	ldr	r2, [pc, #64]	@ (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001da2:	230c      	movs	r3, #12
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db2:	2307      	movs	r3, #7
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_UART_MspInit+0x8c>)
 8001dbe:	f000 faff 	bl	80023c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	@ 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <NMI_Handler+0x4>

08001de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <MemManage_Handler+0x4>

08001df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <UsageFault_Handler+0x4>

08001e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2e:	f000 f9c1 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_kill>:

int _kill(int pid, int sig)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e50:	f003 fa84 	bl	800535c <__errno>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2216      	movs	r2, #22
 8001e58:	601a      	str	r2, [r3, #0]
  return -1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_exit>:

void _exit (int status)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffe7 	bl	8001e46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <_exit+0x12>

08001e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e00a      	b.n	8001ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e8e:	f3af 8000 	nop.w
 8001e92:	4601      	mov	r1, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbf0      	blt.n	8001e8e <_read+0x12>
  }

  return len;
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e009      	b.n	8001edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf1      	blt.n	8001ec8 <_write+0x12>
  }
  return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_close>:

int _close(int file)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f16:	605a      	str	r2, [r3, #4]
  return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f003 f9e8 	bl	800535c <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20018000 	.word	0x20018000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	200003b8 	.word	0x200003b8
 8001fc0:	20000518 	.word	0x20000518

08001fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Test_SetActive>:

/* Active test pointer */
static const Test_t *active_test = 0;

void Test_SetActive(const Test_t *test)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    active_test = test;
 8001ff0:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <Test_SetActive+0x30>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
    if (active_test && active_test->init)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <Test_SetActive+0x30>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <Test_SetActive+0x28>
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <Test_SetActive+0x30>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <Test_SetActive+0x28>
        active_test->init();
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <Test_SetActive+0x30>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4798      	blx	r3
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200003bc 	.word	0x200003bc

0800201c <Test_GetActive>:

const Test_t *Test_GetActive(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
    return active_test;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <Test_GetActive+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200003bc 	.word	0x200003bc

08002034 <Test_InitSystem>:

void Test_InitSystem(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    active_test = 0;
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <Test_InitSystem+0x14>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	200003bc 	.word	0x200003bc

0800204c <step_init>:
static float step_target = 1000.0f;    // Step target RPM
static uint32_t step_delay_ms = 20000; // Wait 2 seconds before applying step
static uint32_t start_time = 0;

static void step_init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    start_time = HAL_GetTick();
 8002050:	f000 f8c4 	bl	80021dc <HAL_GetTick>
 8002054:	4603      	mov	r3, r0
 8002056:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <step_init+0x1c>)
 8002058:	6013      	str	r3, [r2, #0]
    target_rpm = 0.0f;
 800205a:	4b04      	ldr	r3, [pc, #16]	@ (800206c <step_init+0x20>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200003c0 	.word	0x200003c0
 800206c:	20000000 	.word	0x20000000

08002070 <step_update>:

static void step_update(float dt_s)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	ed87 0a01 	vstr	s0, [r7, #4]
    (void)dt_s;
    uint32_t elapsed = HAL_GetTick() - start_time;
 800207a:	f000 f8af 	bl	80021dc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <step_update+0x3c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]

    if (elapsed >= step_delay_ms)
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <step_update+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	429a      	cmp	r2, r3
 8002090:	d304      	bcc.n	800209c <step_update+0x2c>
        target_rpm = step_target;
 8002092:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <step_update+0x44>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a08      	ldr	r2, [pc, #32]	@ (80020b8 <step_update+0x48>)
 8002098:	6013      	str	r3, [r2, #0]
    else
        target_rpm = 0.0f;
}
 800209a:	e003      	b.n	80020a4 <step_update+0x34>
        target_rpm = 0.0f;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <step_update+0x48>)
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200003c0 	.word	0x200003c0
 80020b0:	2000000c 	.word	0x2000000c
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000000 	.word	0x20000000

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020c0:	f7ff ff80 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	@ (80020fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f003 f93d 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7fe ffbb 	bl	8001068 <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002100:	0800788c 	.word	0x0800788c
  ldr r2, =_sbss
 8002104:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002108:	20000514 	.word	0x20000514

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f90d 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	2000      	movs	r0, #0
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fd34 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f917 	bl	80023a6 <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f8ed 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000014 	.word	0x20000014
 80021b0:	20000010 	.word	0x20000010

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000014 	.word	0x20000014
 80021d8:	200003c4 	.word	0x200003c4

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	200003c4 	.word	0x200003c4

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff47 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff5c 	bl	800223c <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffb0 	bl	8002314 <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e159      	b.n	8002690 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8148 	bne.w	800268a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a2 	beq.w	800268a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b57      	ldr	r3, [pc, #348]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a56      	ldr	r2, [pc, #344]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b54      	ldr	r3, [pc, #336]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a52      	ldr	r2, [pc, #328]	@ (80026ac <HAL_GPIO_Init+0x2ec>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a49      	ldr	r2, [pc, #292]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_GPIO_Init+0x202>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a48      	ldr	r2, [pc, #288]	@ (80026b4 <HAL_GPIO_Init+0x2f4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_GPIO_Init+0x1fe>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a47      	ldr	r2, [pc, #284]	@ (80026b8 <HAL_GPIO_Init+0x2f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_GPIO_Init+0x1fa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a46      	ldr	r2, [pc, #280]	@ (80026bc <HAL_GPIO_Init+0x2fc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x1f6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a45      	ldr	r2, [pc, #276]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_GPIO_Init+0x1f2>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e008      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e004      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025c2:	2300      	movs	r3, #0
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f002 0203 	and.w	r2, r2, #3
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	4093      	lsls	r3, r2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d4:	4935      	ldr	r1, [pc, #212]	@ (80026ac <HAL_GPIO_Init+0x2ec>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e2:	4b38      	ldr	r3, [pc, #224]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002606:	4a2f      	ldr	r2, [pc, #188]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800260c:	4b2d      	ldr	r3, [pc, #180]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002630:	4a24      	ldr	r2, [pc, #144]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002636:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265a:	4a1a      	ldr	r2, [pc, #104]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002684:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	f67f aea2 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3724      	adds	r7, #36	@ 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40013800 	.word	0x40013800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40020800 	.word	0x40020800
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40013c00 	.word	0x40013c00

080026c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e4:	e003      	b.n	80026ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e267      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d075      	beq.n	8002806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800271a:	4b88      	ldr	r3, [pc, #544]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b04      	cmp	r3, #4
 8002724:	d00c      	beq.n	8002740 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b85      	ldr	r3, [pc, #532]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800272e:	2b08      	cmp	r3, #8
 8002730:	d112      	bne.n	8002758 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b82      	ldr	r3, [pc, #520]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4b7e      	ldr	r3, [pc, #504]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05b      	beq.n	8002804 <HAL_RCC_OscConfig+0x108>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d157      	bne.n	8002804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e242      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x74>
 8002762:	4b76      	ldr	r3, [pc, #472]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a75      	ldr	r2, [pc, #468]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e01d      	b.n	80027ac <HAL_RCC_OscConfig+0xb0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x98>
 800277a:	4b70      	ldr	r3, [pc, #448]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6f      	ldr	r2, [pc, #444]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6c      	ldr	r2, [pc, #432]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0xb0>
 8002794:	4b69      	ldr	r3, [pc, #420]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a68      	ldr	r2, [pc, #416]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b66      	ldr	r3, [pc, #408]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a65      	ldr	r2, [pc, #404]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fd12 	bl	80021dc <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff fd0e 	bl	80021dc <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e207      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b5b      	ldr	r3, [pc, #364]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0xc0>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff fcfe 	bl	80021dc <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff fcfa 	bl	80021dc <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	@ 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e1f3      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	4b51      	ldr	r3, [pc, #324]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0xe8>
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d063      	beq.n	80028da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002812:	4b4a      	ldr	r3, [pc, #296]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281e:	4b47      	ldr	r3, [pc, #284]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002826:	2b08      	cmp	r3, #8
 8002828:	d11c      	bne.n	8002864 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282a:	4b44      	ldr	r3, [pc, #272]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d116      	bne.n	8002864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	4b41      	ldr	r3, [pc, #260]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x152>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e1c7      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284e:	4b3b      	ldr	r3, [pc, #236]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4937      	ldr	r1, [pc, #220]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	e03a      	b.n	80028da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286c:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCC_OscConfig+0x244>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7ff fcb3 	bl	80021dc <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287a:	f7ff fcaf 	bl	80021dc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1a8      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	4b2b      	ldr	r3, [pc, #172]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	4b28      	ldr	r3, [pc, #160]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4925      	ldr	r1, [pc, #148]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
 80028ac:	e015      	b.n	80028da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ae:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <HAL_RCC_OscConfig+0x244>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff fc92 	bl	80021dc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028bc:	f7ff fc8e 	bl	80021dc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e187      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d036      	beq.n	8002954 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_RCC_OscConfig+0x248>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7ff fc72 	bl	80021dc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fc:	f7ff fc6e 	bl	80021dc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e167      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290e:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_OscConfig+0x240>)
 8002910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x200>
 800291a:	e01b      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <HAL_RCC_OscConfig+0x248>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff fc5b 	bl	80021dc <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	e00e      	b.n	8002948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292a:	f7ff fc57 	bl	80021dc <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d907      	bls.n	8002948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e150      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
 800293c:	40023800 	.word	0x40023800
 8002940:	42470000 	.word	0x42470000
 8002944:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002948:	4b88      	ldr	r3, [pc, #544]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 800294a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ea      	bne.n	800292a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8097 	beq.w	8002a90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002966:	4b81      	ldr	r3, [pc, #516]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10f      	bne.n	8002992 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b7d      	ldr	r3, [pc, #500]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b7a      	ldr	r3, [pc, #488]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	4b77      	ldr	r3, [pc, #476]	@ (8002b70 <HAL_RCC_OscConfig+0x474>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299e:	4b74      	ldr	r3, [pc, #464]	@ (8002b70 <HAL_RCC_OscConfig+0x474>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a73      	ldr	r2, [pc, #460]	@ (8002b70 <HAL_RCC_OscConfig+0x474>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fc17 	bl	80021dc <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b2:	f7ff fc13 	bl	80021dc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e10c      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b70 <HAL_RCC_OscConfig+0x474>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x2ea>
 80029d8:	4b64      	ldr	r3, [pc, #400]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a63      	ldr	r2, [pc, #396]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e4:	e01c      	b.n	8002a20 <HAL_RCC_OscConfig+0x324>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x30c>
 80029ee:	4b5f      	ldr	r3, [pc, #380]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fe:	4a5b      	ldr	r2, [pc, #364]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0x324>
 8002a08:	4b58      	ldr	r3, [pc, #352]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	4a57      	ldr	r2, [pc, #348]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a14:	4b55      	ldr	r3, [pc, #340]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	4a54      	ldr	r2, [pc, #336]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a1a:	f023 0304 	bic.w	r3, r3, #4
 8002a1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7ff fbd8 	bl	80021dc <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7ff fbd4 	bl	80021dc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0cb      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	4b49      	ldr	r3, [pc, #292]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0ee      	beq.n	8002a30 <HAL_RCC_OscConfig+0x334>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7ff fbc2 	bl	80021dc <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7ff fbbe 	bl	80021dc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0b5      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	4b3e      	ldr	r3, [pc, #248]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1ee      	bne.n	8002a5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a84:	4b39      	ldr	r3, [pc, #228]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	4a38      	ldr	r2, [pc, #224]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a1 	beq.w	8002bdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9a:	4b34      	ldr	r3, [pc, #208]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d05c      	beq.n	8002b60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d141      	bne.n	8002b32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <HAL_RCC_OscConfig+0x478>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fb92 	bl	80021dc <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7ff fb8e 	bl	80021dc <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e087      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	3b01      	subs	r3, #1
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	491b      	ldr	r1, [pc, #108]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCC_OscConfig+0x478>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7ff fb67 	bl	80021dc <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b12:	f7ff fb63 	bl	80021dc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e05c      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x416>
 8002b30:	e054      	b.n	8002bdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_RCC_OscConfig+0x478>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7ff fb50 	bl	80021dc <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7ff fb4c 	bl	80021dc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e045      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_OscConfig+0x470>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x444>
 8002b5e:	e03d      	b.n	8002bdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e038      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000
 8002b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x4ec>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d028      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d121      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d11a      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d111      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800

08002bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0cc      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b68      	ldr	r3, [pc, #416]	@ (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d90c      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	@ (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a58      	ldr	r2, [pc, #352]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d044      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d119      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d003      	beq.n	8002caa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	4b3f      	ldr	r3, [pc, #252]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	4b3b      	ldr	r3, [pc, #236]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e067      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b37      	ldr	r3, [pc, #220]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4934      	ldr	r1, [pc, #208]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7ff fa7e 	bl	80021dc <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7ff fa7a 	bl	80021dc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e04f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d20c      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f9de 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023c00 	.word	0x40023c00
 8002da8:	40023800 	.word	0x40023800
 8002dac:	080074e0 	.word	0x080074e0
 8002db0:	20000004 	.word	0x20000004
 8002db4:	20000010 	.word	0x20000010

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dbc:	b094      	sub	sp, #80	@ 0x50
 8002dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd0:	4b79      	ldr	r3, [pc, #484]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d00d      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	f200 80e1 	bhi.w	8002fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x34>
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dea:	e0db      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b73      	ldr	r3, [pc, #460]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002dee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df0:	e0db      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df2:	4b73      	ldr	r3, [pc, #460]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002df4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df6:	e0d8      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df8:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e02:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d063      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	2200      	movs	r2, #0
 8002e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e22:	2300      	movs	r3, #0
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e2a:	4622      	mov	r2, r4
 8002e2c:	462b      	mov	r3, r5
 8002e2e:	f04f 0000 	mov.w	r0, #0
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	0159      	lsls	r1, r3, #5
 8002e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e3c:	0150      	lsls	r0, r2, #5
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4621      	mov	r1, r4
 8002e44:	1a51      	subs	r1, r2, r1
 8002e46:	6139      	str	r1, [r7, #16]
 8002e48:	4629      	mov	r1, r5
 8002e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	018b      	lsls	r3, r1, #6
 8002e60:	4651      	mov	r1, sl
 8002e62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e66:	4651      	mov	r1, sl
 8002e68:	018a      	lsls	r2, r1, #6
 8002e6a:	4651      	mov	r1, sl
 8002e6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e70:	4659      	mov	r1, fp
 8002e72:	eb63 0901 	sbc.w	r9, r3, r1
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8a:	4690      	mov	r8, r2
 8002e8c:	4699      	mov	r9, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	eb18 0303 	adds.w	r3, r8, r3
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	462b      	mov	r3, r5
 8002e98:	eb49 0303 	adc.w	r3, r9, r3
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	024b      	lsls	r3, r1, #9
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	024a      	lsls	r2, r1, #9
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ec8:	f7fd fe76 	bl	8000bb8 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed4:	e058      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed6:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	2200      	movs	r2, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ee6:	623b      	str	r3, [r7, #32]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	f04f 0000 	mov.w	r0, #0
 8002ef8:	f04f 0100 	mov.w	r1, #0
 8002efc:	0159      	lsls	r1, r3, #5
 8002efe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f02:	0150      	lsls	r0, r2, #5
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4641      	mov	r1, r8
 8002f0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f0e:	4649      	mov	r1, r9
 8002f10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f28:	ebb2 040a 	subs.w	r4, r2, sl
 8002f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	00eb      	lsls	r3, r5, #3
 8002f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3e:	00e2      	lsls	r2, r4, #3
 8002f40:	4614      	mov	r4, r2
 8002f42:	461d      	mov	r5, r3
 8002f44:	4643      	mov	r3, r8
 8002f46:	18e3      	adds	r3, r4, r3
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	eb45 0303 	adc.w	r3, r5, r3
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5e:	4629      	mov	r1, r5
 8002f60:	028b      	lsls	r3, r1, #10
 8002f62:	4621      	mov	r1, r4
 8002f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f68:	4621      	mov	r1, r4
 8002f6a:	028a      	lsls	r2, r1, #10
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f72:	2200      	movs	r2, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	61fa      	str	r2, [r7, #28]
 8002f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f7c:	f7fd fe1c 	bl	8000bb8 <__aeabi_uldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4613      	mov	r3, r2
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	3301      	adds	r3, #1
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3750      	adds	r7, #80	@ 0x50
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	007a1200 	.word	0x007a1200

08002fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000004 	.word	0x20000004

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe0:	f7ff fff0 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0a9b      	lsrs	r3, r3, #10
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4903      	ldr	r1, [pc, #12]	@ (8003000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	080074f0 	.word	0x080074f0

08003004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003008:	f7ff ffdc 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0b5b      	lsrs	r3, r3, #13
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4903      	ldr	r1, [pc, #12]	@ (8003028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40023800 	.word	0x40023800
 8003028:	080074f0 	.word	0x080074f0

0800302c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e041      	b.n	80030c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe fdd4 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 fbf4 	bl	8003858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e041      	b.n	8003160 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f839 	bl	8003168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f000 fba5 	bl	8003858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_TIM_PWM_Start+0x24>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e022      	b.n	80031e6 <HAL_TIM_PWM_Start+0x6a>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d109      	bne.n	80031ba <HAL_TIM_PWM_Start+0x3e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e015      	b.n	80031e6 <HAL_TIM_PWM_Start+0x6a>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d109      	bne.n	80031d4 <HAL_TIM_PWM_Start+0x58>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e008      	b.n	80031e6 <HAL_TIM_PWM_Start+0x6a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e068      	b.n	80032c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0x82>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031fc:	e013      	b.n	8003226 <HAL_TIM_PWM_Start+0xaa>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Start+0x92>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800320c:	e00b      	b.n	8003226 <HAL_TIM_PWM_Start+0xaa>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start+0xa2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800321c:	e003      	b.n	8003226 <HAL_TIM_PWM_Start+0xaa>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2201      	movs	r2, #1
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fdbe 	bl	8003db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a23      	ldr	r2, [pc, #140]	@ (80032c8 <HAL_TIM_PWM_Start+0x14c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d107      	bne.n	800324e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <HAL_TIM_PWM_Start+0x14c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d018      	beq.n	800328a <HAL_TIM_PWM_Start+0x10e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003260:	d013      	beq.n	800328a <HAL_TIM_PWM_Start+0x10e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_TIM_PWM_Start+0x150>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_TIM_PWM_Start+0x10e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a17      	ldr	r2, [pc, #92]	@ (80032d0 <HAL_TIM_PWM_Start+0x154>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_TIM_PWM_Start+0x10e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a16      	ldr	r2, [pc, #88]	@ (80032d4 <HAL_TIM_PWM_Start+0x158>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_TIM_PWM_Start+0x10e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a14      	ldr	r2, [pc, #80]	@ (80032d8 <HAL_TIM_PWM_Start+0x15c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d111      	bne.n	80032ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b06      	cmp	r3, #6
 800329a:	d010      	beq.n	80032be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	e007      	b.n	80032be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40014000 	.word	0x40014000

080032dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e097      	b.n	8003420 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fe fc9d 	bl	8001c44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003320:	f023 0307 	bic.w	r3, r3, #7
 8003324:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f000 fa91 	bl	8003858 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	4313      	orrs	r3, r2
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800337c:	f023 030c 	bic.w	r3, r3, #12
 8003380:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003388:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800338c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	4313      	orrs	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	011a      	lsls	r2, r3, #4
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	031b      	lsls	r3, r3, #12
 80033ac:	4313      	orrs	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4313      	orrs	r3, r2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003438:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003440:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003448:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003450:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d110      	bne.n	800347a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800345e:	7b7b      	ldrb	r3, [r7, #13]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d001      	beq.n	8003468 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e069      	b.n	800353c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003478:	e031      	b.n	80034de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d110      	bne.n	80034a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003486:	7b3b      	ldrb	r3, [r7, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e055      	b.n	800353c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034a0:	e01d      	b.n	80034de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ae:	7b7b      	ldrb	r3, [r7, #13]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034b4:	7b3b      	ldrb	r3, [r7, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e03e      	b.n	800353c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_TIM_Encoder_Start+0xc4>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d008      	beq.n	80034fc <HAL_TIM_Encoder_Start+0xd4>
 80034ea:	e00f      	b.n	800350c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fc5b 	bl	8003db0 <TIM_CCxChannelCmd>
      break;
 80034fa:	e016      	b.n	800352a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2201      	movs	r2, #1
 8003502:	2104      	movs	r1, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fc53 	bl	8003db0 <TIM_CCxChannelCmd>
      break;
 800350a:	e00e      	b.n	800352a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fc4b 	bl	8003db0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2201      	movs	r2, #1
 8003520:	2104      	movs	r1, #4
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fc44 	bl	8003db0 <TIM_CCxChannelCmd>
      break;
 8003528:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800355e:	2302      	movs	r3, #2
 8003560:	e0ae      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f200 809f 	bhi.w	80036b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003572:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080036b1 	.word	0x080036b1
 8003580:	080036b1 	.word	0x080036b1
 8003584:	080036b1 	.word	0x080036b1
 8003588:	080035ed 	.word	0x080035ed
 800358c:	080036b1 	.word	0x080036b1
 8003590:	080036b1 	.word	0x080036b1
 8003594:	080036b1 	.word	0x080036b1
 8003598:	0800362f 	.word	0x0800362f
 800359c:	080036b1 	.word	0x080036b1
 80035a0:	080036b1 	.word	0x080036b1
 80035a4:	080036b1 	.word	0x080036b1
 80035a8:	0800366f 	.word	0x0800366f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f9d6 	bl	8003964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0204 	bic.w	r2, r2, #4
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	619a      	str	r2, [r3, #24]
      break;
 80035ea:	e064      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fa1c 	bl	8003a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
      break;
 800362c:	e043      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fa67 	bl	8003b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0208 	orr.w	r2, r2, #8
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
      break;
 800366c:	e023      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fab1 	bl	8003bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69d9      	ldr	r1, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	61da      	str	r2, [r3, #28]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      break;
 80036b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_ConfigClockSource+0x1c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e0b4      	b.n	800384e <HAL_TIM_ConfigClockSource+0x186>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800370a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371c:	d03e      	beq.n	800379c <HAL_TIM_ConfigClockSource+0xd4>
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003722:	f200 8087 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	f000 8086 	beq.w	800383a <HAL_TIM_ConfigClockSource+0x172>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	d87f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b70      	cmp	r3, #112	@ 0x70
 8003736:	d01a      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xa6>
 8003738:	2b70      	cmp	r3, #112	@ 0x70
 800373a:	d87b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b60      	cmp	r3, #96	@ 0x60
 800373e:	d050      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d877      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b50      	cmp	r3, #80	@ 0x50
 8003746:	d03c      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d873      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d058      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x13a>
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d86f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d064      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d86b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d060      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d867      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05c      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	2b10      	cmp	r3, #16
 800376a:	d05a      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	e062      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800377e:	f000 faf7 	bl	8003d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	609a      	str	r2, [r3, #8]
      break;
 800379a:	e04f      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ac:	f000 fae0 	bl	8003d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037be:	609a      	str	r2, [r3, #8]
      break;
 80037c0:	e03c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 fa54 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2150      	movs	r1, #80	@ 0x50
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 faad 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 80037e0:	e02c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 fa73 	bl	8003cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2160      	movs	r1, #96	@ 0x60
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fa9d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003800:	e01c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	461a      	mov	r2, r3
 8003810:	f000 fa34 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2140      	movs	r1, #64	@ 0x40
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fa8d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003820:	e00c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f000 fa84 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003832:	e003      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e000      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a37      	ldr	r2, [pc, #220]	@ (8003948 <TIM_Base_SetConfig+0xf0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00f      	beq.n	8003890 <TIM_Base_SetConfig+0x38>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003876:	d00b      	beq.n	8003890 <TIM_Base_SetConfig+0x38>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a34      	ldr	r2, [pc, #208]	@ (800394c <TIM_Base_SetConfig+0xf4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_Base_SetConfig+0x38>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a33      	ldr	r2, [pc, #204]	@ (8003950 <TIM_Base_SetConfig+0xf8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0x38>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a32      	ldr	r2, [pc, #200]	@ (8003954 <TIM_Base_SetConfig+0xfc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a28      	ldr	r2, [pc, #160]	@ (8003948 <TIM_Base_SetConfig+0xf0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01b      	beq.n	80038e2 <TIM_Base_SetConfig+0x8a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b0:	d017      	beq.n	80038e2 <TIM_Base_SetConfig+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a25      	ldr	r2, [pc, #148]	@ (800394c <TIM_Base_SetConfig+0xf4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <TIM_Base_SetConfig+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a24      	ldr	r2, [pc, #144]	@ (8003950 <TIM_Base_SetConfig+0xf8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00f      	beq.n	80038e2 <TIM_Base_SetConfig+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a23      	ldr	r2, [pc, #140]	@ (8003954 <TIM_Base_SetConfig+0xfc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a22      	ldr	r2, [pc, #136]	@ (8003958 <TIM_Base_SetConfig+0x100>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a21      	ldr	r2, [pc, #132]	@ (800395c <TIM_Base_SetConfig+0x104>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a20      	ldr	r2, [pc, #128]	@ (8003960 <TIM_Base_SetConfig+0x108>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a0c      	ldr	r2, [pc, #48]	@ (8003948 <TIM_Base_SetConfig+0xf0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d103      	bne.n	8003922 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f043 0204 	orr.w	r2, r3, #4
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f023 0201 	bic.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 0302 	bic.w	r3, r3, #2
 80039ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	@ (8003a2c <TIM_OC1_SetConfig+0xc8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d10c      	bne.n	80039da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0308 	bic.w	r3, r3, #8
 80039c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <TIM_OC1_SetConfig+0xc8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40010000 	.word	0x40010000

08003a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f023 0210 	bic.w	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0320 	bic.w	r3, r3, #32
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b04 <TIM_OC2_SetConfig+0xd4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10d      	bne.n	8003aac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <TIM_OC2_SetConfig+0xd4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d113      	bne.n	8003adc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000

08003b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <TIM_OC3_SetConfig+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10d      	bne.n	8003b82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a14      	ldr	r2, [pc, #80]	@ (8003bd8 <TIM_OC3_SetConfig+0xd0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d113      	bne.n	8003bb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	621a      	str	r2, [r3, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40010000 	.word	0x40010000

08003bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	031b      	lsls	r3, r3, #12
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a10      	ldr	r2, [pc, #64]	@ (8003c78 <TIM_OC4_SetConfig+0x9c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000

08003c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 030a 	bic.w	r3, r3, #10
 8003cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b087      	sub	sp, #28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 0210 	bic.w	r2, r3, #16
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e050      	b.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e60:	d013      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a16      	ldr	r2, [pc, #88]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10c      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40014000 	.word	0x40014000

08003ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e03d      	b.n	8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e042      	b.n	8004014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fed0 	bl	8001d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	@ 0x24
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f973 	bl	80042ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	@ 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d175      	bne.n	8004128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Transmit+0x2c>
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e06e      	b.n	800412a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2221      	movs	r2, #33	@ 0x21
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405a:	f7fe f8bf 	bl	80021dc <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004074:	d108      	bne.n	8004088 <HAL_UART_Transmit+0x6c>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e003      	b.n	8004090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004090:	e02e      	b.n	80040f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	@ 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f848 	bl	8004132 <UART_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e03a      	b.n	800412a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	3302      	adds	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e007      	b.n	80040e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1cb      	bne.n	8004092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	@ 0x40
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f814 	bl	8004132 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004142:	e03b      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d037      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414c:	f7fe f846 	bl	80021dc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <UART_WaitOnFlagUntilTimeout+0x30>
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e03a      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d023      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b80      	cmp	r3, #128	@ 0x80
 8004178:	d020      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d01d      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b08      	cmp	r3, #8
 800418c:	d116      	bne.n	80041bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f81d 	bl	80041e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2208      	movs	r2, #8
 80041ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e00f      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d0b4      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b095      	sub	sp, #84	@ 0x54
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800420c:	643a      	str	r2, [r7, #64]	@ 0x40
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	2b01      	cmp	r3, #1
 800425a:	d119      	bne.n	8004290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60bb      	str	r3, [r7, #8]
   return(result);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	647b      	str	r3, [r7, #68]	@ 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800427c:	61ba      	str	r2, [r7, #24]
 800427e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	613b      	str	r3, [r7, #16]
   return(result);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800429e:	bf00      	nop
 80042a0:	3754      	adds	r7, #84	@ 0x54
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b0:	b0c0      	sub	sp, #256	@ 0x100
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	ea40 0301 	orr.w	r3, r0, r1
 80042d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004304:	f021 010c 	bic.w	r1, r1, #12
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004312:	430b      	orrs	r3, r1
 8004314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004326:	6999      	ldr	r1, [r3, #24]
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	ea40 0301 	orr.w	r3, r0, r1
 8004332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b8f      	ldr	r3, [pc, #572]	@ (8004578 <UART_SetConfig+0x2cc>)
 800433c:	429a      	cmp	r2, r3
 800433e:	d005      	beq.n	800434c <UART_SetConfig+0xa0>
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b8d      	ldr	r3, [pc, #564]	@ (800457c <UART_SetConfig+0x2d0>)
 8004348:	429a      	cmp	r2, r3
 800434a:	d104      	bne.n	8004356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7fe fe5a 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 8004350:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004354:	e003      	b.n	800435e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004356:	f7fe fe41 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 800435a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004368:	f040 810c 	bne.w	8004584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800436c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004370:	2200      	movs	r2, #0
 8004372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004376:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800437a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800437e:	4622      	mov	r2, r4
 8004380:	462b      	mov	r3, r5
 8004382:	1891      	adds	r1, r2, r2
 8004384:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004386:	415b      	adcs	r3, r3
 8004388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800438a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800438e:	4621      	mov	r1, r4
 8004390:	eb12 0801 	adds.w	r8, r2, r1
 8004394:	4629      	mov	r1, r5
 8004396:	eb43 0901 	adc.w	r9, r3, r1
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ae:	4690      	mov	r8, r2
 80043b0:	4699      	mov	r9, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	eb18 0303 	adds.w	r3, r8, r3
 80043b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043bc:	462b      	mov	r3, r5
 80043be:	eb49 0303 	adc.w	r3, r9, r3
 80043c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043da:	460b      	mov	r3, r1
 80043dc:	18db      	adds	r3, r3, r3
 80043de:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e0:	4613      	mov	r3, r2
 80043e2:	eb42 0303 	adc.w	r3, r2, r3
 80043e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043f0:	f7fc fbe2 	bl	8000bb8 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4b61      	ldr	r3, [pc, #388]	@ (8004580 <UART_SetConfig+0x2d4>)
 80043fa:	fba3 2302 	umull	r2, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	011c      	lsls	r4, r3, #4
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800440c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800441c:	415b      	adcs	r3, r3
 800441e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004424:	4641      	mov	r1, r8
 8004426:	eb12 0a01 	adds.w	sl, r2, r1
 800442a:	4649      	mov	r1, r9
 800442c:	eb43 0b01 	adc.w	fp, r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800443c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004444:	4692      	mov	sl, r2
 8004446:	469b      	mov	fp, r3
 8004448:	4643      	mov	r3, r8
 800444a:	eb1a 0303 	adds.w	r3, sl, r3
 800444e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004452:	464b      	mov	r3, r9
 8004454:	eb4b 0303 	adc.w	r3, fp, r3
 8004458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004468:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800446c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004470:	460b      	mov	r3, r1
 8004472:	18db      	adds	r3, r3, r3
 8004474:	643b      	str	r3, [r7, #64]	@ 0x40
 8004476:	4613      	mov	r3, r2
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	647b      	str	r3, [r7, #68]	@ 0x44
 800447e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004486:	f7fc fb97 	bl	8000bb8 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4611      	mov	r1, r2
 8004490:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <UART_SetConfig+0x2d4>)
 8004492:	fba3 2301 	umull	r2, r3, r3, r1
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2264      	movs	r2, #100	@ 0x64
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	1acb      	subs	r3, r1, r3
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044a6:	4b36      	ldr	r3, [pc, #216]	@ (8004580 <UART_SetConfig+0x2d4>)
 80044a8:	fba3 2302 	umull	r2, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044b4:	441c      	add	r4, r3
 80044b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044d0:	415b      	adcs	r3, r3
 80044d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044d8:	4641      	mov	r1, r8
 80044da:	1851      	adds	r1, r2, r1
 80044dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80044de:	4649      	mov	r1, r9
 80044e0:	414b      	adcs	r3, r1
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044f0:	4659      	mov	r1, fp
 80044f2:	00cb      	lsls	r3, r1, #3
 80044f4:	4651      	mov	r1, sl
 80044f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fa:	4651      	mov	r1, sl
 80044fc:	00ca      	lsls	r2, r1, #3
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	4603      	mov	r3, r0
 8004504:	4642      	mov	r2, r8
 8004506:	189b      	adds	r3, r3, r2
 8004508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004524:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800452c:	460b      	mov	r3, r1
 800452e:	18db      	adds	r3, r3, r3
 8004530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004532:	4613      	mov	r3, r2
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800453e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004542:	f7fc fb39 	bl	8000bb8 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <UART_SetConfig+0x2d4>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	@ 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	3332      	adds	r3, #50	@ 0x32
 800455e:	4a08      	ldr	r2, [pc, #32]	@ (8004580 <UART_SetConfig+0x2d4>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 0207 	and.w	r2, r3, #7
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4422      	add	r2, r4
 8004572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004574:	e106      	b.n	8004784 <UART_SetConfig+0x4d8>
 8004576:	bf00      	nop
 8004578:	40011000 	.word	0x40011000
 800457c:	40011400 	.word	0x40011400
 8004580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800458e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004596:	4642      	mov	r2, r8
 8004598:	464b      	mov	r3, r9
 800459a:	1891      	adds	r1, r2, r2
 800459c:	6239      	str	r1, [r7, #32]
 800459e:	415b      	adcs	r3, r3
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045a6:	4641      	mov	r1, r8
 80045a8:	1854      	adds	r4, r2, r1
 80045aa:	4649      	mov	r1, r9
 80045ac:	eb43 0501 	adc.w	r5, r3, r1
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	00eb      	lsls	r3, r5, #3
 80045ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045be:	00e2      	lsls	r2, r4, #3
 80045c0:	4614      	mov	r4, r2
 80045c2:	461d      	mov	r5, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045cc:	464b      	mov	r3, r9
 80045ce:	eb45 0303 	adc.w	r3, r5, r3
 80045d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045f2:	4629      	mov	r1, r5
 80045f4:	008b      	lsls	r3, r1, #2
 80045f6:	4621      	mov	r1, r4
 80045f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fc:	4621      	mov	r1, r4
 80045fe:	008a      	lsls	r2, r1, #2
 8004600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004604:	f7fc fad8 	bl	8000bb8 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4b60      	ldr	r3, [pc, #384]	@ (8004790 <UART_SetConfig+0x4e4>)
 800460e:	fba3 2302 	umull	r2, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	011c      	lsls	r4, r3, #4
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004620:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004628:	4642      	mov	r2, r8
 800462a:	464b      	mov	r3, r9
 800462c:	1891      	adds	r1, r2, r2
 800462e:	61b9      	str	r1, [r7, #24]
 8004630:	415b      	adcs	r3, r3
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004638:	4641      	mov	r1, r8
 800463a:	1851      	adds	r1, r2, r1
 800463c:	6139      	str	r1, [r7, #16]
 800463e:	4649      	mov	r1, r9
 8004640:	414b      	adcs	r3, r1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004650:	4659      	mov	r1, fp
 8004652:	00cb      	lsls	r3, r1, #3
 8004654:	4651      	mov	r1, sl
 8004656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465a:	4651      	mov	r1, sl
 800465c:	00ca      	lsls	r2, r1, #3
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	4603      	mov	r3, r0
 8004664:	4642      	mov	r2, r8
 8004666:	189b      	adds	r3, r3, r2
 8004668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800466c:	464b      	mov	r3, r9
 800466e:	460a      	mov	r2, r1
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004682:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004690:	4649      	mov	r1, r9
 8004692:	008b      	lsls	r3, r1, #2
 8004694:	4641      	mov	r1, r8
 8004696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469a:	4641      	mov	r1, r8
 800469c:	008a      	lsls	r2, r1, #2
 800469e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046a2:	f7fc fa89 	bl	8000bb8 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4611      	mov	r1, r2
 80046ac:	4b38      	ldr	r3, [pc, #224]	@ (8004790 <UART_SetConfig+0x4e4>)
 80046ae:	fba3 2301 	umull	r2, r3, r3, r1
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2264      	movs	r2, #100	@ 0x64
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	1acb      	subs	r3, r1, r3
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	3332      	adds	r3, #50	@ 0x32
 80046c0:	4a33      	ldr	r2, [pc, #204]	@ (8004790 <UART_SetConfig+0x4e4>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	415b      	adcs	r3, r3
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ec:	4641      	mov	r1, r8
 80046ee:	1851      	adds	r1, r2, r1
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	4649      	mov	r1, r9
 80046f4:	414b      	adcs	r3, r1
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004704:	4659      	mov	r1, fp
 8004706:	00cb      	lsls	r3, r1, #3
 8004708:	4651      	mov	r1, sl
 800470a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470e:	4651      	mov	r1, sl
 8004710:	00ca      	lsls	r2, r1, #3
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	4603      	mov	r3, r0
 8004718:	4642      	mov	r2, r8
 800471a:	189b      	adds	r3, r3, r2
 800471c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800471e:	464b      	mov	r3, r9
 8004720:	460a      	mov	r2, r1
 8004722:	eb42 0303 	adc.w	r3, r2, r3
 8004726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	663b      	str	r3, [r7, #96]	@ 0x60
 8004732:	667a      	str	r2, [r7, #100]	@ 0x64
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004740:	4649      	mov	r1, r9
 8004742:	008b      	lsls	r3, r1, #2
 8004744:	4641      	mov	r1, r8
 8004746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474a:	4641      	mov	r1, r8
 800474c:	008a      	lsls	r2, r1, #2
 800474e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004752:	f7fc fa31 	bl	8000bb8 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <UART_SetConfig+0x4e4>)
 800475c:	fba3 1302 	umull	r1, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	2164      	movs	r1, #100	@ 0x64
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	3332      	adds	r3, #50	@ 0x32
 800476e:	4a08      	ldr	r2, [pc, #32]	@ (8004790 <UART_SetConfig+0x4e4>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	f003 020f 	and.w	r2, r3, #15
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4422      	add	r2, r4
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	bf00      	nop
 8004786:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800478a:	46bd      	mov	sp, r7
 800478c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004790:	51eb851f 	.word	0x51eb851f

08004794 <__cvt>:
 8004794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	ec57 6b10 	vmov	r6, r7, d0
 800479c:	2f00      	cmp	r7, #0
 800479e:	460c      	mov	r4, r1
 80047a0:	4619      	mov	r1, r3
 80047a2:	463b      	mov	r3, r7
 80047a4:	bfbb      	ittet	lt
 80047a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80047aa:	461f      	movlt	r7, r3
 80047ac:	2300      	movge	r3, #0
 80047ae:	232d      	movlt	r3, #45	@ 0x2d
 80047b0:	700b      	strb	r3, [r1, #0]
 80047b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80047b8:	4691      	mov	r9, r2
 80047ba:	f023 0820 	bic.w	r8, r3, #32
 80047be:	bfbc      	itt	lt
 80047c0:	4632      	movlt	r2, r6
 80047c2:	4616      	movlt	r6, r2
 80047c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047c8:	d005      	beq.n	80047d6 <__cvt+0x42>
 80047ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047ce:	d100      	bne.n	80047d2 <__cvt+0x3e>
 80047d0:	3401      	adds	r4, #1
 80047d2:	2102      	movs	r1, #2
 80047d4:	e000      	b.n	80047d8 <__cvt+0x44>
 80047d6:	2103      	movs	r1, #3
 80047d8:	ab03      	add	r3, sp, #12
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	ab02      	add	r3, sp, #8
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	ec47 6b10 	vmov	d0, r6, r7
 80047e4:	4653      	mov	r3, sl
 80047e6:	4622      	mov	r2, r4
 80047e8:	f000 fe6e 	bl	80054c8 <_dtoa_r>
 80047ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047f0:	4605      	mov	r5, r0
 80047f2:	d119      	bne.n	8004828 <__cvt+0x94>
 80047f4:	f019 0f01 	tst.w	r9, #1
 80047f8:	d00e      	beq.n	8004818 <__cvt+0x84>
 80047fa:	eb00 0904 	add.w	r9, r0, r4
 80047fe:	2200      	movs	r2, #0
 8004800:	2300      	movs	r3, #0
 8004802:	4630      	mov	r0, r6
 8004804:	4639      	mov	r1, r7
 8004806:	f7fc f967 	bl	8000ad8 <__aeabi_dcmpeq>
 800480a:	b108      	cbz	r0, 8004810 <__cvt+0x7c>
 800480c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004810:	2230      	movs	r2, #48	@ 0x30
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	454b      	cmp	r3, r9
 8004816:	d31e      	bcc.n	8004856 <__cvt+0xc2>
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800481c:	1b5b      	subs	r3, r3, r5
 800481e:	4628      	mov	r0, r5
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	b004      	add	sp, #16
 8004824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004828:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800482c:	eb00 0904 	add.w	r9, r0, r4
 8004830:	d1e5      	bne.n	80047fe <__cvt+0x6a>
 8004832:	7803      	ldrb	r3, [r0, #0]
 8004834:	2b30      	cmp	r3, #48	@ 0x30
 8004836:	d10a      	bne.n	800484e <__cvt+0xba>
 8004838:	2200      	movs	r2, #0
 800483a:	2300      	movs	r3, #0
 800483c:	4630      	mov	r0, r6
 800483e:	4639      	mov	r1, r7
 8004840:	f7fc f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004844:	b918      	cbnz	r0, 800484e <__cvt+0xba>
 8004846:	f1c4 0401 	rsb	r4, r4, #1
 800484a:	f8ca 4000 	str.w	r4, [sl]
 800484e:	f8da 3000 	ldr.w	r3, [sl]
 8004852:	4499      	add	r9, r3
 8004854:	e7d3      	b.n	80047fe <__cvt+0x6a>
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	9103      	str	r1, [sp, #12]
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e7d9      	b.n	8004812 <__cvt+0x7e>

0800485e <__exponent>:
 800485e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004860:	2900      	cmp	r1, #0
 8004862:	bfba      	itte	lt
 8004864:	4249      	neglt	r1, r1
 8004866:	232d      	movlt	r3, #45	@ 0x2d
 8004868:	232b      	movge	r3, #43	@ 0x2b
 800486a:	2909      	cmp	r1, #9
 800486c:	7002      	strb	r2, [r0, #0]
 800486e:	7043      	strb	r3, [r0, #1]
 8004870:	dd29      	ble.n	80048c6 <__exponent+0x68>
 8004872:	f10d 0307 	add.w	r3, sp, #7
 8004876:	461d      	mov	r5, r3
 8004878:	270a      	movs	r7, #10
 800487a:	461a      	mov	r2, r3
 800487c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004880:	fb07 1416 	mls	r4, r7, r6, r1
 8004884:	3430      	adds	r4, #48	@ 0x30
 8004886:	f802 4c01 	strb.w	r4, [r2, #-1]
 800488a:	460c      	mov	r4, r1
 800488c:	2c63      	cmp	r4, #99	@ 0x63
 800488e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004892:	4631      	mov	r1, r6
 8004894:	dcf1      	bgt.n	800487a <__exponent+0x1c>
 8004896:	3130      	adds	r1, #48	@ 0x30
 8004898:	1e94      	subs	r4, r2, #2
 800489a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800489e:	1c41      	adds	r1, r0, #1
 80048a0:	4623      	mov	r3, r4
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	d30a      	bcc.n	80048bc <__exponent+0x5e>
 80048a6:	f10d 0309 	add.w	r3, sp, #9
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	42ac      	cmp	r4, r5
 80048ae:	bf88      	it	hi
 80048b0:	2300      	movhi	r3, #0
 80048b2:	3302      	adds	r3, #2
 80048b4:	4403      	add	r3, r0
 80048b6:	1a18      	subs	r0, r3, r0
 80048b8:	b003      	add	sp, #12
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048c4:	e7ed      	b.n	80048a2 <__exponent+0x44>
 80048c6:	2330      	movs	r3, #48	@ 0x30
 80048c8:	3130      	adds	r1, #48	@ 0x30
 80048ca:	7083      	strb	r3, [r0, #2]
 80048cc:	70c1      	strb	r1, [r0, #3]
 80048ce:	1d03      	adds	r3, r0, #4
 80048d0:	e7f1      	b.n	80048b6 <__exponent+0x58>
	...

080048d4 <_printf_float>:
 80048d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d8:	b08d      	sub	sp, #52	@ 0x34
 80048da:	460c      	mov	r4, r1
 80048dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80048e0:	4616      	mov	r6, r2
 80048e2:	461f      	mov	r7, r3
 80048e4:	4605      	mov	r5, r0
 80048e6:	f000 fcef 	bl	80052c8 <_localeconv_r>
 80048ea:	6803      	ldr	r3, [r0, #0]
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fb fcc6 	bl	8000280 <strlen>
 80048f4:	2300      	movs	r3, #0
 80048f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80048f8:	f8d8 3000 	ldr.w	r3, [r8]
 80048fc:	9005      	str	r0, [sp, #20]
 80048fe:	3307      	adds	r3, #7
 8004900:	f023 0307 	bic.w	r3, r3, #7
 8004904:	f103 0208 	add.w	r2, r3, #8
 8004908:	f894 a018 	ldrb.w	sl, [r4, #24]
 800490c:	f8d4 b000 	ldr.w	fp, [r4]
 8004910:	f8c8 2000 	str.w	r2, [r8]
 8004914:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004918:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800491c:	9307      	str	r3, [sp, #28]
 800491e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004922:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800492a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b9c <_printf_float+0x2c8>)
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	f7fc f904 	bl	8000b3c <__aeabi_dcmpun>
 8004934:	bb70      	cbnz	r0, 8004994 <_printf_float+0xc0>
 8004936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800493a:	4b98      	ldr	r3, [pc, #608]	@ (8004b9c <_printf_float+0x2c8>)
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	f7fc f8de 	bl	8000b00 <__aeabi_dcmple>
 8004944:	bb30      	cbnz	r0, 8004994 <_printf_float+0xc0>
 8004946:	2200      	movs	r2, #0
 8004948:	2300      	movs	r3, #0
 800494a:	4640      	mov	r0, r8
 800494c:	4649      	mov	r1, r9
 800494e:	f7fc f8cd 	bl	8000aec <__aeabi_dcmplt>
 8004952:	b110      	cbz	r0, 800495a <_printf_float+0x86>
 8004954:	232d      	movs	r3, #45	@ 0x2d
 8004956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800495a:	4a91      	ldr	r2, [pc, #580]	@ (8004ba0 <_printf_float+0x2cc>)
 800495c:	4b91      	ldr	r3, [pc, #580]	@ (8004ba4 <_printf_float+0x2d0>)
 800495e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004962:	bf8c      	ite	hi
 8004964:	4690      	movhi	r8, r2
 8004966:	4698      	movls	r8, r3
 8004968:	2303      	movs	r3, #3
 800496a:	6123      	str	r3, [r4, #16]
 800496c:	f02b 0304 	bic.w	r3, fp, #4
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	f04f 0900 	mov.w	r9, #0
 8004976:	9700      	str	r7, [sp, #0]
 8004978:	4633      	mov	r3, r6
 800497a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800497c:	4621      	mov	r1, r4
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f9d2 	bl	8004d28 <_printf_common>
 8004984:	3001      	adds	r0, #1
 8004986:	f040 808d 	bne.w	8004aa4 <_printf_float+0x1d0>
 800498a:	f04f 30ff 	mov.w	r0, #4294967295
 800498e:	b00d      	add	sp, #52	@ 0x34
 8004990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	4640      	mov	r0, r8
 800499a:	4649      	mov	r1, r9
 800499c:	f7fc f8ce 	bl	8000b3c <__aeabi_dcmpun>
 80049a0:	b140      	cbz	r0, 80049b4 <_printf_float+0xe0>
 80049a2:	464b      	mov	r3, r9
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bfbc      	itt	lt
 80049a8:	232d      	movlt	r3, #45	@ 0x2d
 80049aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80049ae:	4a7e      	ldr	r2, [pc, #504]	@ (8004ba8 <_printf_float+0x2d4>)
 80049b0:	4b7e      	ldr	r3, [pc, #504]	@ (8004bac <_printf_float+0x2d8>)
 80049b2:	e7d4      	b.n	800495e <_printf_float+0x8a>
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80049ba:	9206      	str	r2, [sp, #24]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	d13b      	bne.n	8004a38 <_printf_float+0x164>
 80049c0:	2306      	movs	r3, #6
 80049c2:	6063      	str	r3, [r4, #4]
 80049c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80049c8:	2300      	movs	r3, #0
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	9303      	str	r3, [sp, #12]
 80049ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80049d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80049d4:	ab09      	add	r3, sp, #36	@ 0x24
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	6861      	ldr	r1, [r4, #4]
 80049da:	ec49 8b10 	vmov	d0, r8, r9
 80049de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80049e2:	4628      	mov	r0, r5
 80049e4:	f7ff fed6 	bl	8004794 <__cvt>
 80049e8:	9b06      	ldr	r3, [sp, #24]
 80049ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049ec:	2b47      	cmp	r3, #71	@ 0x47
 80049ee:	4680      	mov	r8, r0
 80049f0:	d129      	bne.n	8004a46 <_printf_float+0x172>
 80049f2:	1cc8      	adds	r0, r1, #3
 80049f4:	db02      	blt.n	80049fc <_printf_float+0x128>
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	4299      	cmp	r1, r3
 80049fa:	dd41      	ble.n	8004a80 <_printf_float+0x1ac>
 80049fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a00:	fa5f fa8a 	uxtb.w	sl, sl
 8004a04:	3901      	subs	r1, #1
 8004a06:	4652      	mov	r2, sl
 8004a08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a0e:	f7ff ff26 	bl	800485e <__exponent>
 8004a12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a14:	1813      	adds	r3, r2, r0
 8004a16:	2a01      	cmp	r2, #1
 8004a18:	4681      	mov	r9, r0
 8004a1a:	6123      	str	r3, [r4, #16]
 8004a1c:	dc02      	bgt.n	8004a24 <_printf_float+0x150>
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	07d2      	lsls	r2, r2, #31
 8004a22:	d501      	bpl.n	8004a28 <_printf_float+0x154>
 8004a24:	3301      	adds	r3, #1
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0a2      	beq.n	8004976 <_printf_float+0xa2>
 8004a30:	232d      	movs	r3, #45	@ 0x2d
 8004a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a36:	e79e      	b.n	8004976 <_printf_float+0xa2>
 8004a38:	9a06      	ldr	r2, [sp, #24]
 8004a3a:	2a47      	cmp	r2, #71	@ 0x47
 8004a3c:	d1c2      	bne.n	80049c4 <_printf_float+0xf0>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1c0      	bne.n	80049c4 <_printf_float+0xf0>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e7bd      	b.n	80049c2 <_printf_float+0xee>
 8004a46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a4a:	d9db      	bls.n	8004a04 <_printf_float+0x130>
 8004a4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a50:	d118      	bne.n	8004a84 <_printf_float+0x1b0>
 8004a52:	2900      	cmp	r1, #0
 8004a54:	6863      	ldr	r3, [r4, #4]
 8004a56:	dd0b      	ble.n	8004a70 <_printf_float+0x19c>
 8004a58:	6121      	str	r1, [r4, #16]
 8004a5a:	b913      	cbnz	r3, 8004a62 <_printf_float+0x18e>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	07d0      	lsls	r0, r2, #31
 8004a60:	d502      	bpl.n	8004a68 <_printf_float+0x194>
 8004a62:	3301      	adds	r3, #1
 8004a64:	440b      	add	r3, r1
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a6a:	f04f 0900 	mov.w	r9, #0
 8004a6e:	e7db      	b.n	8004a28 <_printf_float+0x154>
 8004a70:	b913      	cbnz	r3, 8004a78 <_printf_float+0x1a4>
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	07d2      	lsls	r2, r2, #31
 8004a76:	d501      	bpl.n	8004a7c <_printf_float+0x1a8>
 8004a78:	3302      	adds	r3, #2
 8004a7a:	e7f4      	b.n	8004a66 <_printf_float+0x192>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e7f2      	b.n	8004a66 <_printf_float+0x192>
 8004a80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a86:	4299      	cmp	r1, r3
 8004a88:	db05      	blt.n	8004a96 <_printf_float+0x1c2>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	6121      	str	r1, [r4, #16]
 8004a8e:	07d8      	lsls	r0, r3, #31
 8004a90:	d5ea      	bpl.n	8004a68 <_printf_float+0x194>
 8004a92:	1c4b      	adds	r3, r1, #1
 8004a94:	e7e7      	b.n	8004a66 <_printf_float+0x192>
 8004a96:	2900      	cmp	r1, #0
 8004a98:	bfd4      	ite	le
 8004a9a:	f1c1 0202 	rsble	r2, r1, #2
 8004a9e:	2201      	movgt	r2, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	e7e0      	b.n	8004a66 <_printf_float+0x192>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	055a      	lsls	r2, r3, #21
 8004aa8:	d407      	bmi.n	8004aba <_printf_float+0x1e6>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	4642      	mov	r2, r8
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d12b      	bne.n	8004b10 <_printf_float+0x23c>
 8004ab8:	e767      	b.n	800498a <_printf_float+0xb6>
 8004aba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004abe:	f240 80dd 	bls.w	8004c7c <_printf_float+0x3a8>
 8004ac2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f7fc f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d033      	beq.n	8004b3a <_printf_float+0x266>
 8004ad2:	4a37      	ldr	r2, [pc, #220]	@ (8004bb0 <_printf_float+0x2dc>)
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	f43f af54 	beq.w	800498a <_printf_float+0xb6>
 8004ae2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004ae6:	4543      	cmp	r3, r8
 8004ae8:	db02      	blt.n	8004af0 <_printf_float+0x21c>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	07d8      	lsls	r0, r3, #31
 8004aee:	d50f      	bpl.n	8004b10 <_printf_float+0x23c>
 8004af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f43f af45 	beq.w	800498a <_printf_float+0xb6>
 8004b00:	f04f 0900 	mov.w	r9, #0
 8004b04:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b08:	f104 0a1a 	add.w	sl, r4, #26
 8004b0c:	45c8      	cmp	r8, r9
 8004b0e:	dc09      	bgt.n	8004b24 <_printf_float+0x250>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	079b      	lsls	r3, r3, #30
 8004b14:	f100 8103 	bmi.w	8004d1e <_printf_float+0x44a>
 8004b18:	68e0      	ldr	r0, [r4, #12]
 8004b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b1c:	4298      	cmp	r0, r3
 8004b1e:	bfb8      	it	lt
 8004b20:	4618      	movlt	r0, r3
 8004b22:	e734      	b.n	800498e <_printf_float+0xba>
 8004b24:	2301      	movs	r3, #1
 8004b26:	4652      	mov	r2, sl
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b8      	blx	r7
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f43f af2b 	beq.w	800498a <_printf_float+0xb6>
 8004b34:	f109 0901 	add.w	r9, r9, #1
 8004b38:	e7e8      	b.n	8004b0c <_printf_float+0x238>
 8004b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dc39      	bgt.n	8004bb4 <_printf_float+0x2e0>
 8004b40:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <_printf_float+0x2dc>)
 8004b42:	2301      	movs	r3, #1
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f af1d 	beq.w	800498a <_printf_float+0xb6>
 8004b50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b54:	ea59 0303 	orrs.w	r3, r9, r3
 8004b58:	d102      	bne.n	8004b60 <_printf_float+0x28c>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	07d9      	lsls	r1, r3, #31
 8004b5e:	d5d7      	bpl.n	8004b10 <_printf_float+0x23c>
 8004b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b64:	4631      	mov	r1, r6
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b8      	blx	r7
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f43f af0d 	beq.w	800498a <_printf_float+0xb6>
 8004b70:	f04f 0a00 	mov.w	sl, #0
 8004b74:	f104 0b1a 	add.w	fp, r4, #26
 8004b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b7a:	425b      	negs	r3, r3
 8004b7c:	4553      	cmp	r3, sl
 8004b7e:	dc01      	bgt.n	8004b84 <_printf_float+0x2b0>
 8004b80:	464b      	mov	r3, r9
 8004b82:	e793      	b.n	8004aac <_printf_float+0x1d8>
 8004b84:	2301      	movs	r3, #1
 8004b86:	465a      	mov	r2, fp
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f43f aefb 	beq.w	800498a <_printf_float+0xb6>
 8004b94:	f10a 0a01 	add.w	sl, sl, #1
 8004b98:	e7ee      	b.n	8004b78 <_printf_float+0x2a4>
 8004b9a:	bf00      	nop
 8004b9c:	7fefffff 	.word	0x7fefffff
 8004ba0:	08007508 	.word	0x08007508
 8004ba4:	08007504 	.word	0x08007504
 8004ba8:	08007510 	.word	0x08007510
 8004bac:	0800750c 	.word	0x0800750c
 8004bb0:	08007514 	.word	0x08007514
 8004bb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004bba:	4553      	cmp	r3, sl
 8004bbc:	bfa8      	it	ge
 8004bbe:	4653      	movge	r3, sl
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	4699      	mov	r9, r3
 8004bc4:	dc36      	bgt.n	8004c34 <_printf_float+0x360>
 8004bc6:	f04f 0b00 	mov.w	fp, #0
 8004bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bce:	f104 021a 	add.w	r2, r4, #26
 8004bd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bd4:	9306      	str	r3, [sp, #24]
 8004bd6:	eba3 0309 	sub.w	r3, r3, r9
 8004bda:	455b      	cmp	r3, fp
 8004bdc:	dc31      	bgt.n	8004c42 <_printf_float+0x36e>
 8004bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004be0:	459a      	cmp	sl, r3
 8004be2:	dc3a      	bgt.n	8004c5a <_printf_float+0x386>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	07da      	lsls	r2, r3, #31
 8004be8:	d437      	bmi.n	8004c5a <_printf_float+0x386>
 8004bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bec:	ebaa 0903 	sub.w	r9, sl, r3
 8004bf0:	9b06      	ldr	r3, [sp, #24]
 8004bf2:	ebaa 0303 	sub.w	r3, sl, r3
 8004bf6:	4599      	cmp	r9, r3
 8004bf8:	bfa8      	it	ge
 8004bfa:	4699      	movge	r9, r3
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	dc33      	bgt.n	8004c6a <_printf_float+0x396>
 8004c02:	f04f 0800 	mov.w	r8, #0
 8004c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c0a:	f104 0b1a 	add.w	fp, r4, #26
 8004c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c10:	ebaa 0303 	sub.w	r3, sl, r3
 8004c14:	eba3 0309 	sub.w	r3, r3, r9
 8004c18:	4543      	cmp	r3, r8
 8004c1a:	f77f af79 	ble.w	8004b10 <_printf_float+0x23c>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	465a      	mov	r2, fp
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f aeae 	beq.w	800498a <_printf_float+0xb6>
 8004c2e:	f108 0801 	add.w	r8, r8, #1
 8004c32:	e7ec      	b.n	8004c0e <_printf_float+0x33a>
 8004c34:	4642      	mov	r2, r8
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d1c2      	bne.n	8004bc6 <_printf_float+0x2f2>
 8004c40:	e6a3      	b.n	800498a <_printf_float+0xb6>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4631      	mov	r1, r6
 8004c46:	4628      	mov	r0, r5
 8004c48:	9206      	str	r2, [sp, #24]
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f ae9c 	beq.w	800498a <_printf_float+0xb6>
 8004c52:	9a06      	ldr	r2, [sp, #24]
 8004c54:	f10b 0b01 	add.w	fp, fp, #1
 8004c58:	e7bb      	b.n	8004bd2 <_printf_float+0x2fe>
 8004c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1c0      	bne.n	8004bea <_printf_float+0x316>
 8004c68:	e68f      	b.n	800498a <_printf_float+0xb6>
 8004c6a:	9a06      	ldr	r2, [sp, #24]
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	4442      	add	r2, r8
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	d1c3      	bne.n	8004c02 <_printf_float+0x32e>
 8004c7a:	e686      	b.n	800498a <_printf_float+0xb6>
 8004c7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c80:	f1ba 0f01 	cmp.w	sl, #1
 8004c84:	dc01      	bgt.n	8004c8a <_printf_float+0x3b6>
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d536      	bpl.n	8004cf8 <_printf_float+0x424>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f ae78 	beq.w	800498a <_printf_float+0xb6>
 8004c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f ae70 	beq.w	800498a <_printf_float+0xb6>
 8004caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cb6:	f7fb ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cba:	b9c0      	cbnz	r0, 8004cee <_printf_float+0x41a>
 8004cbc:	4653      	mov	r3, sl
 8004cbe:	f108 0201 	add.w	r2, r8, #1
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d10c      	bne.n	8004ce6 <_printf_float+0x412>
 8004ccc:	e65d      	b.n	800498a <_printf_float+0xb6>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	465a      	mov	r2, fp
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f ae56 	beq.w	800498a <_printf_float+0xb6>
 8004cde:	f108 0801 	add.w	r8, r8, #1
 8004ce2:	45d0      	cmp	r8, sl
 8004ce4:	dbf3      	blt.n	8004cce <_printf_float+0x3fa>
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cec:	e6df      	b.n	8004aae <_printf_float+0x1da>
 8004cee:	f04f 0800 	mov.w	r8, #0
 8004cf2:	f104 0b1a 	add.w	fp, r4, #26
 8004cf6:	e7f4      	b.n	8004ce2 <_printf_float+0x40e>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	e7e1      	b.n	8004cc2 <_printf_float+0x3ee>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	464a      	mov	r2, r9
 8004d02:	4631      	mov	r1, r6
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b8      	blx	r7
 8004d08:	3001      	adds	r0, #1
 8004d0a:	f43f ae3e 	beq.w	800498a <_printf_float+0xb6>
 8004d0e:	f108 0801 	add.w	r8, r8, #1
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d16:	1a5b      	subs	r3, r3, r1
 8004d18:	4543      	cmp	r3, r8
 8004d1a:	dcf0      	bgt.n	8004cfe <_printf_float+0x42a>
 8004d1c:	e6fc      	b.n	8004b18 <_printf_float+0x244>
 8004d1e:	f04f 0800 	mov.w	r8, #0
 8004d22:	f104 0919 	add.w	r9, r4, #25
 8004d26:	e7f4      	b.n	8004d12 <_printf_float+0x43e>

08004d28 <_printf_common>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	4698      	mov	r8, r3
 8004d30:	688a      	ldr	r2, [r1, #8]
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	bfb8      	it	lt
 8004d3c:	4613      	movlt	r3, r2
 8004d3e:	6033      	str	r3, [r6, #0]
 8004d40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d44:	4607      	mov	r7, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b10a      	cbz	r2, 8004d4e <_printf_common+0x26>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	0699      	lsls	r1, r3, #26
 8004d52:	bf42      	ittt	mi
 8004d54:	6833      	ldrmi	r3, [r6, #0]
 8004d56:	3302      	addmi	r3, #2
 8004d58:	6033      	strmi	r3, [r6, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	f015 0506 	ands.w	r5, r5, #6
 8004d60:	d106      	bne.n	8004d70 <_printf_common+0x48>
 8004d62:	f104 0a19 	add.w	sl, r4, #25
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dc26      	bgt.n	8004dbe <_printf_common+0x96>
 8004d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	3b00      	subs	r3, #0
 8004d78:	bf18      	it	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	0692      	lsls	r2, r2, #26
 8004d7e:	d42b      	bmi.n	8004dd8 <_printf_common+0xb0>
 8004d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d84:	4641      	mov	r1, r8
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c8      	blx	r9
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d01e      	beq.n	8004dcc <_printf_common+0xa4>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	f003 0306 	and.w	r3, r3, #6
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf02      	ittt	eq
 8004d9a:	68e5      	ldreq	r5, [r4, #12]
 8004d9c:	6833      	ldreq	r3, [r6, #0]
 8004d9e:	1aed      	subeq	r5, r5, r3
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	bf0c      	ite	eq
 8004da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da8:	2500      	movne	r5, #0
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bfc4      	itt	gt
 8004dae:	1a9b      	subgt	r3, r3, r2
 8004db0:	18ed      	addgt	r5, r5, r3
 8004db2:	2600      	movs	r6, #0
 8004db4:	341a      	adds	r4, #26
 8004db6:	42b5      	cmp	r5, r6
 8004db8:	d11a      	bne.n	8004df0 <_printf_common+0xc8>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e008      	b.n	8004dd0 <_printf_common+0xa8>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	47c8      	blx	r9
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_printf_common+0xac>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7c6      	b.n	8004d66 <_printf_common+0x3e>
 8004dd8:	18e1      	adds	r1, r4, r3
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	2030      	movs	r0, #48	@ 0x30
 8004dde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004de2:	4422      	add	r2, r4
 8004de4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dec:	3302      	adds	r3, #2
 8004dee:	e7c7      	b.n	8004d80 <_printf_common+0x58>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4622      	mov	r2, r4
 8004df4:	4641      	mov	r1, r8
 8004df6:	4638      	mov	r0, r7
 8004df8:	47c8      	blx	r9
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0e6      	beq.n	8004dcc <_printf_common+0xa4>
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7d9      	b.n	8004db6 <_printf_common+0x8e>
	...

08004e04 <_printf_i>:
 8004e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	7e0f      	ldrb	r7, [r1, #24]
 8004e0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e0c:	2f78      	cmp	r7, #120	@ 0x78
 8004e0e:	4691      	mov	r9, r2
 8004e10:	4680      	mov	r8, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	469a      	mov	sl, r3
 8004e16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e1a:	d807      	bhi.n	8004e2c <_printf_i+0x28>
 8004e1c:	2f62      	cmp	r7, #98	@ 0x62
 8004e1e:	d80a      	bhi.n	8004e36 <_printf_i+0x32>
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	f000 80d1 	beq.w	8004fc8 <_printf_i+0x1c4>
 8004e26:	2f58      	cmp	r7, #88	@ 0x58
 8004e28:	f000 80b8 	beq.w	8004f9c <_printf_i+0x198>
 8004e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e34:	e03a      	b.n	8004eac <_printf_i+0xa8>
 8004e36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e3a:	2b15      	cmp	r3, #21
 8004e3c:	d8f6      	bhi.n	8004e2c <_printf_i+0x28>
 8004e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e44 <_printf_i+0x40>)
 8004e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004e2d 	.word	0x08004e2d
 8004e50:	08004e2d 	.word	0x08004e2d
 8004e54:	08004e2d 	.word	0x08004e2d
 8004e58:	08004e2d 	.word	0x08004e2d
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004e2d 	.word	0x08004e2d
 8004e64:	08004e2d 	.word	0x08004e2d
 8004e68:	08004e2d 	.word	0x08004e2d
 8004e6c:	08004e2d 	.word	0x08004e2d
 8004e70:	08004faf 	.word	0x08004faf
 8004e74:	08004edb 	.word	0x08004edb
 8004e78:	08004f69 	.word	0x08004f69
 8004e7c:	08004e2d 	.word	0x08004e2d
 8004e80:	08004e2d 	.word	0x08004e2d
 8004e84:	08004fd1 	.word	0x08004fd1
 8004e88:	08004e2d 	.word	0x08004e2d
 8004e8c:	08004edb 	.word	0x08004edb
 8004e90:	08004e2d 	.word	0x08004e2d
 8004e94:	08004e2d 	.word	0x08004e2d
 8004e98:	08004f71 	.word	0x08004f71
 8004e9c:	6833      	ldr	r3, [r6, #0]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6032      	str	r2, [r6, #0]
 8004ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eac:	2301      	movs	r3, #1
 8004eae:	e09c      	b.n	8004fea <_printf_i+0x1e6>
 8004eb0:	6833      	ldr	r3, [r6, #0]
 8004eb2:	6820      	ldr	r0, [r4, #0]
 8004eb4:	1d19      	adds	r1, r3, #4
 8004eb6:	6031      	str	r1, [r6, #0]
 8004eb8:	0606      	lsls	r6, r0, #24
 8004eba:	d501      	bpl.n	8004ec0 <_printf_i+0xbc>
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	e003      	b.n	8004ec8 <_printf_i+0xc4>
 8004ec0:	0645      	lsls	r5, r0, #25
 8004ec2:	d5fb      	bpl.n	8004ebc <_printf_i+0xb8>
 8004ec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	da03      	bge.n	8004ed4 <_printf_i+0xd0>
 8004ecc:	232d      	movs	r3, #45	@ 0x2d
 8004ece:	426d      	negs	r5, r5
 8004ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ed4:	4858      	ldr	r0, [pc, #352]	@ (8005038 <_printf_i+0x234>)
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	e011      	b.n	8004efe <_printf_i+0xfa>
 8004eda:	6821      	ldr	r1, [r4, #0]
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	0608      	lsls	r0, r1, #24
 8004ee0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ee4:	d402      	bmi.n	8004eec <_printf_i+0xe8>
 8004ee6:	0649      	lsls	r1, r1, #25
 8004ee8:	bf48      	it	mi
 8004eea:	b2ad      	uxthmi	r5, r5
 8004eec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eee:	4852      	ldr	r0, [pc, #328]	@ (8005038 <_printf_i+0x234>)
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	bf14      	ite	ne
 8004ef4:	230a      	movne	r3, #10
 8004ef6:	2308      	moveq	r3, #8
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004efe:	6866      	ldr	r6, [r4, #4]
 8004f00:	60a6      	str	r6, [r4, #8]
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	db05      	blt.n	8004f12 <_printf_i+0x10e>
 8004f06:	6821      	ldr	r1, [r4, #0]
 8004f08:	432e      	orrs	r6, r5
 8004f0a:	f021 0104 	bic.w	r1, r1, #4
 8004f0e:	6021      	str	r1, [r4, #0]
 8004f10:	d04b      	beq.n	8004faa <_printf_i+0x1a6>
 8004f12:	4616      	mov	r6, r2
 8004f14:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f18:	fb03 5711 	mls	r7, r3, r1, r5
 8004f1c:	5dc7      	ldrb	r7, [r0, r7]
 8004f1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f22:	462f      	mov	r7, r5
 8004f24:	42bb      	cmp	r3, r7
 8004f26:	460d      	mov	r5, r1
 8004f28:	d9f4      	bls.n	8004f14 <_printf_i+0x110>
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d10b      	bne.n	8004f46 <_printf_i+0x142>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	07df      	lsls	r7, r3, #31
 8004f32:	d508      	bpl.n	8004f46 <_printf_i+0x142>
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	6861      	ldr	r1, [r4, #4]
 8004f38:	4299      	cmp	r1, r3
 8004f3a:	bfde      	ittt	le
 8004f3c:	2330      	movle	r3, #48	@ 0x30
 8004f3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f46:	1b92      	subs	r2, r2, r6
 8004f48:	6122      	str	r2, [r4, #16]
 8004f4a:	f8cd a000 	str.w	sl, [sp]
 8004f4e:	464b      	mov	r3, r9
 8004f50:	aa03      	add	r2, sp, #12
 8004f52:	4621      	mov	r1, r4
 8004f54:	4640      	mov	r0, r8
 8004f56:	f7ff fee7 	bl	8004d28 <_printf_common>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d14a      	bne.n	8004ff4 <_printf_i+0x1f0>
 8004f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f62:	b004      	add	sp, #16
 8004f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	f043 0320 	orr.w	r3, r3, #32
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	4832      	ldr	r0, [pc, #200]	@ (800503c <_printf_i+0x238>)
 8004f72:	2778      	movs	r7, #120	@ 0x78
 8004f74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	6831      	ldr	r1, [r6, #0]
 8004f7c:	061f      	lsls	r7, r3, #24
 8004f7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f82:	d402      	bmi.n	8004f8a <_printf_i+0x186>
 8004f84:	065f      	lsls	r7, r3, #25
 8004f86:	bf48      	it	mi
 8004f88:	b2ad      	uxthmi	r5, r5
 8004f8a:	6031      	str	r1, [r6, #0]
 8004f8c:	07d9      	lsls	r1, r3, #31
 8004f8e:	bf44      	itt	mi
 8004f90:	f043 0320 	orrmi.w	r3, r3, #32
 8004f94:	6023      	strmi	r3, [r4, #0]
 8004f96:	b11d      	cbz	r5, 8004fa0 <_printf_i+0x19c>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	e7ad      	b.n	8004ef8 <_printf_i+0xf4>
 8004f9c:	4826      	ldr	r0, [pc, #152]	@ (8005038 <_printf_i+0x234>)
 8004f9e:	e7e9      	b.n	8004f74 <_printf_i+0x170>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	f023 0320 	bic.w	r3, r3, #32
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	e7f6      	b.n	8004f98 <_printf_i+0x194>
 8004faa:	4616      	mov	r6, r2
 8004fac:	e7bd      	b.n	8004f2a <_printf_i+0x126>
 8004fae:	6833      	ldr	r3, [r6, #0]
 8004fb0:	6825      	ldr	r5, [r4, #0]
 8004fb2:	6961      	ldr	r1, [r4, #20]
 8004fb4:	1d18      	adds	r0, r3, #4
 8004fb6:	6030      	str	r0, [r6, #0]
 8004fb8:	062e      	lsls	r6, r5, #24
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	d501      	bpl.n	8004fc2 <_printf_i+0x1be>
 8004fbe:	6019      	str	r1, [r3, #0]
 8004fc0:	e002      	b.n	8004fc8 <_printf_i+0x1c4>
 8004fc2:	0668      	lsls	r0, r5, #25
 8004fc4:	d5fb      	bpl.n	8004fbe <_printf_i+0x1ba>
 8004fc6:	8019      	strh	r1, [r3, #0]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	4616      	mov	r6, r2
 8004fce:	e7bc      	b.n	8004f4a <_printf_i+0x146>
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	6032      	str	r2, [r6, #0]
 8004fd6:	681e      	ldr	r6, [r3, #0]
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f7fb f8ff 	bl	80001e0 <memchr>
 8004fe2:	b108      	cbz	r0, 8004fe8 <_printf_i+0x1e4>
 8004fe4:	1b80      	subs	r0, r0, r6
 8004fe6:	6060      	str	r0, [r4, #4]
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	6123      	str	r3, [r4, #16]
 8004fec:	2300      	movs	r3, #0
 8004fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ff2:	e7aa      	b.n	8004f4a <_printf_i+0x146>
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	47d0      	blx	sl
 8004ffe:	3001      	adds	r0, #1
 8005000:	d0ad      	beq.n	8004f5e <_printf_i+0x15a>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	079b      	lsls	r3, r3, #30
 8005006:	d413      	bmi.n	8005030 <_printf_i+0x22c>
 8005008:	68e0      	ldr	r0, [r4, #12]
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	4298      	cmp	r0, r3
 800500e:	bfb8      	it	lt
 8005010:	4618      	movlt	r0, r3
 8005012:	e7a6      	b.n	8004f62 <_printf_i+0x15e>
 8005014:	2301      	movs	r3, #1
 8005016:	4632      	mov	r2, r6
 8005018:	4649      	mov	r1, r9
 800501a:	4640      	mov	r0, r8
 800501c:	47d0      	blx	sl
 800501e:	3001      	adds	r0, #1
 8005020:	d09d      	beq.n	8004f5e <_printf_i+0x15a>
 8005022:	3501      	adds	r5, #1
 8005024:	68e3      	ldr	r3, [r4, #12]
 8005026:	9903      	ldr	r1, [sp, #12]
 8005028:	1a5b      	subs	r3, r3, r1
 800502a:	42ab      	cmp	r3, r5
 800502c:	dcf2      	bgt.n	8005014 <_printf_i+0x210>
 800502e:	e7eb      	b.n	8005008 <_printf_i+0x204>
 8005030:	2500      	movs	r5, #0
 8005032:	f104 0619 	add.w	r6, r4, #25
 8005036:	e7f5      	b.n	8005024 <_printf_i+0x220>
 8005038:	08007516 	.word	0x08007516
 800503c:	08007527 	.word	0x08007527

08005040 <std>:
 8005040:	2300      	movs	r3, #0
 8005042:	b510      	push	{r4, lr}
 8005044:	4604      	mov	r4, r0
 8005046:	e9c0 3300 	strd	r3, r3, [r0]
 800504a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800504e:	6083      	str	r3, [r0, #8]
 8005050:	8181      	strh	r1, [r0, #12]
 8005052:	6643      	str	r3, [r0, #100]	@ 0x64
 8005054:	81c2      	strh	r2, [r0, #14]
 8005056:	6183      	str	r3, [r0, #24]
 8005058:	4619      	mov	r1, r3
 800505a:	2208      	movs	r2, #8
 800505c:	305c      	adds	r0, #92	@ 0x5c
 800505e:	f000 f92a 	bl	80052b6 <memset>
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <std+0x58>)
 8005064:	6263      	str	r3, [r4, #36]	@ 0x24
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <std+0x5c>)
 8005068:	62a3      	str	r3, [r4, #40]	@ 0x28
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <std+0x60>)
 800506c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <std+0x64>)
 8005070:	6323      	str	r3, [r4, #48]	@ 0x30
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <std+0x68>)
 8005074:	6224      	str	r4, [r4, #32]
 8005076:	429c      	cmp	r4, r3
 8005078:	d006      	beq.n	8005088 <std+0x48>
 800507a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800507e:	4294      	cmp	r4, r2
 8005080:	d002      	beq.n	8005088 <std+0x48>
 8005082:	33d0      	adds	r3, #208	@ 0xd0
 8005084:	429c      	cmp	r4, r3
 8005086:	d105      	bne.n	8005094 <std+0x54>
 8005088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	f000 b98e 	b.w	80053b0 <__retarget_lock_init_recursive>
 8005094:	bd10      	pop	{r4, pc}
 8005096:	bf00      	nop
 8005098:	08005231 	.word	0x08005231
 800509c:	08005253 	.word	0x08005253
 80050a0:	0800528b 	.word	0x0800528b
 80050a4:	080052af 	.word	0x080052af
 80050a8:	200003c8 	.word	0x200003c8

080050ac <stdio_exit_handler>:
 80050ac:	4a02      	ldr	r2, [pc, #8]	@ (80050b8 <stdio_exit_handler+0xc>)
 80050ae:	4903      	ldr	r1, [pc, #12]	@ (80050bc <stdio_exit_handler+0x10>)
 80050b0:	4803      	ldr	r0, [pc, #12]	@ (80050c0 <stdio_exit_handler+0x14>)
 80050b2:	f000 b869 	b.w	8005188 <_fwalk_sglue>
 80050b6:	bf00      	nop
 80050b8:	20000018 	.word	0x20000018
 80050bc:	08006d15 	.word	0x08006d15
 80050c0:	20000028 	.word	0x20000028

080050c4 <cleanup_stdio>:
 80050c4:	6841      	ldr	r1, [r0, #4]
 80050c6:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <cleanup_stdio+0x34>)
 80050c8:	4299      	cmp	r1, r3
 80050ca:	b510      	push	{r4, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	d001      	beq.n	80050d4 <cleanup_stdio+0x10>
 80050d0:	f001 fe20 	bl	8006d14 <_fflush_r>
 80050d4:	68a1      	ldr	r1, [r4, #8]
 80050d6:	4b09      	ldr	r3, [pc, #36]	@ (80050fc <cleanup_stdio+0x38>)
 80050d8:	4299      	cmp	r1, r3
 80050da:	d002      	beq.n	80050e2 <cleanup_stdio+0x1e>
 80050dc:	4620      	mov	r0, r4
 80050de:	f001 fe19 	bl	8006d14 <_fflush_r>
 80050e2:	68e1      	ldr	r1, [r4, #12]
 80050e4:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <cleanup_stdio+0x3c>)
 80050e6:	4299      	cmp	r1, r3
 80050e8:	d004      	beq.n	80050f4 <cleanup_stdio+0x30>
 80050ea:	4620      	mov	r0, r4
 80050ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f0:	f001 be10 	b.w	8006d14 <_fflush_r>
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop
 80050f8:	200003c8 	.word	0x200003c8
 80050fc:	20000430 	.word	0x20000430
 8005100:	20000498 	.word	0x20000498

08005104 <global_stdio_init.part.0>:
 8005104:	b510      	push	{r4, lr}
 8005106:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <global_stdio_init.part.0+0x30>)
 8005108:	4c0b      	ldr	r4, [pc, #44]	@ (8005138 <global_stdio_init.part.0+0x34>)
 800510a:	4a0c      	ldr	r2, [pc, #48]	@ (800513c <global_stdio_init.part.0+0x38>)
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	4620      	mov	r0, r4
 8005110:	2200      	movs	r2, #0
 8005112:	2104      	movs	r1, #4
 8005114:	f7ff ff94 	bl	8005040 <std>
 8005118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800511c:	2201      	movs	r2, #1
 800511e:	2109      	movs	r1, #9
 8005120:	f7ff ff8e 	bl	8005040 <std>
 8005124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005128:	2202      	movs	r2, #2
 800512a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512e:	2112      	movs	r1, #18
 8005130:	f7ff bf86 	b.w	8005040 <std>
 8005134:	20000500 	.word	0x20000500
 8005138:	200003c8 	.word	0x200003c8
 800513c:	080050ad 	.word	0x080050ad

08005140 <__sfp_lock_acquire>:
 8005140:	4801      	ldr	r0, [pc, #4]	@ (8005148 <__sfp_lock_acquire+0x8>)
 8005142:	f000 b936 	b.w	80053b2 <__retarget_lock_acquire_recursive>
 8005146:	bf00      	nop
 8005148:	20000509 	.word	0x20000509

0800514c <__sfp_lock_release>:
 800514c:	4801      	ldr	r0, [pc, #4]	@ (8005154 <__sfp_lock_release+0x8>)
 800514e:	f000 b931 	b.w	80053b4 <__retarget_lock_release_recursive>
 8005152:	bf00      	nop
 8005154:	20000509 	.word	0x20000509

08005158 <__sinit>:
 8005158:	b510      	push	{r4, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	f7ff fff0 	bl	8005140 <__sfp_lock_acquire>
 8005160:	6a23      	ldr	r3, [r4, #32]
 8005162:	b11b      	cbz	r3, 800516c <__sinit+0x14>
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f7ff bff0 	b.w	800514c <__sfp_lock_release>
 800516c:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <__sinit+0x28>)
 800516e:	6223      	str	r3, [r4, #32]
 8005170:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <__sinit+0x2c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f5      	bne.n	8005164 <__sinit+0xc>
 8005178:	f7ff ffc4 	bl	8005104 <global_stdio_init.part.0>
 800517c:	e7f2      	b.n	8005164 <__sinit+0xc>
 800517e:	bf00      	nop
 8005180:	080050c5 	.word	0x080050c5
 8005184:	20000500 	.word	0x20000500

08005188 <_fwalk_sglue>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	4607      	mov	r7, r0
 800518e:	4688      	mov	r8, r1
 8005190:	4614      	mov	r4, r2
 8005192:	2600      	movs	r6, #0
 8005194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005198:	f1b9 0901 	subs.w	r9, r9, #1
 800519c:	d505      	bpl.n	80051aa <_fwalk_sglue+0x22>
 800519e:	6824      	ldr	r4, [r4, #0]
 80051a0:	2c00      	cmp	r4, #0
 80051a2:	d1f7      	bne.n	8005194 <_fwalk_sglue+0xc>
 80051a4:	4630      	mov	r0, r6
 80051a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d907      	bls.n	80051c0 <_fwalk_sglue+0x38>
 80051b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b4:	3301      	adds	r3, #1
 80051b6:	d003      	beq.n	80051c0 <_fwalk_sglue+0x38>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4638      	mov	r0, r7
 80051bc:	47c0      	blx	r8
 80051be:	4306      	orrs	r6, r0
 80051c0:	3568      	adds	r5, #104	@ 0x68
 80051c2:	e7e9      	b.n	8005198 <_fwalk_sglue+0x10>

080051c4 <sniprintf>:
 80051c4:	b40c      	push	{r2, r3}
 80051c6:	b530      	push	{r4, r5, lr}
 80051c8:	4b18      	ldr	r3, [pc, #96]	@ (800522c <sniprintf+0x68>)
 80051ca:	1e0c      	subs	r4, r1, #0
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	b09d      	sub	sp, #116	@ 0x74
 80051d0:	da08      	bge.n	80051e4 <sniprintf+0x20>
 80051d2:	238b      	movs	r3, #139	@ 0x8b
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295
 80051da:	b01d      	add	sp, #116	@ 0x74
 80051dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051e0:	b002      	add	sp, #8
 80051e2:	4770      	bx	lr
 80051e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80051e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80051f2:	bf14      	ite	ne
 80051f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80051f8:	4623      	moveq	r3, r4
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	9307      	str	r3, [sp, #28]
 80051fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005202:	9002      	str	r0, [sp, #8]
 8005204:	9006      	str	r0, [sp, #24]
 8005206:	f8ad 3016 	strh.w	r3, [sp, #22]
 800520a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800520c:	ab21      	add	r3, sp, #132	@ 0x84
 800520e:	a902      	add	r1, sp, #8
 8005210:	4628      	mov	r0, r5
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	f001 fbfe 	bl	8006a14 <_svfiprintf_r>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	bfbc      	itt	lt
 800521c:	238b      	movlt	r3, #139	@ 0x8b
 800521e:	602b      	strlt	r3, [r5, #0]
 8005220:	2c00      	cmp	r4, #0
 8005222:	d0da      	beq.n	80051da <sniprintf+0x16>
 8005224:	9b02      	ldr	r3, [sp, #8]
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e7d6      	b.n	80051da <sniprintf+0x16>
 800522c:	20000024 	.word	0x20000024

08005230 <__sread>:
 8005230:	b510      	push	{r4, lr}
 8005232:	460c      	mov	r4, r1
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	f000 f86c 	bl	8005314 <_read_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	bfab      	itete	ge
 8005240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005242:	89a3      	ldrhlt	r3, [r4, #12]
 8005244:	181b      	addge	r3, r3, r0
 8005246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800524a:	bfac      	ite	ge
 800524c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800524e:	81a3      	strhlt	r3, [r4, #12]
 8005250:	bd10      	pop	{r4, pc}

08005252 <__swrite>:
 8005252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	461f      	mov	r7, r3
 8005258:	898b      	ldrh	r3, [r1, #12]
 800525a:	05db      	lsls	r3, r3, #23
 800525c:	4605      	mov	r5, r0
 800525e:	460c      	mov	r4, r1
 8005260:	4616      	mov	r6, r2
 8005262:	d505      	bpl.n	8005270 <__swrite+0x1e>
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	2302      	movs	r3, #2
 800526a:	2200      	movs	r2, #0
 800526c:	f000 f840 	bl	80052f0 <_lseek_r>
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	4632      	mov	r2, r6
 800527e:	463b      	mov	r3, r7
 8005280:	4628      	mov	r0, r5
 8005282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	f000 b857 	b.w	8005338 <_write_r>

0800528a <__sseek>:
 800528a:	b510      	push	{r4, lr}
 800528c:	460c      	mov	r4, r1
 800528e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005292:	f000 f82d 	bl	80052f0 <_lseek_r>
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	bf15      	itete	ne
 800529c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800529e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052a6:	81a3      	strheq	r3, [r4, #12]
 80052a8:	bf18      	it	ne
 80052aa:	81a3      	strhne	r3, [r4, #12]
 80052ac:	bd10      	pop	{r4, pc}

080052ae <__sclose>:
 80052ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b2:	f000 b80d 	b.w	80052d0 <_close_r>

080052b6 <memset>:
 80052b6:	4402      	add	r2, r0
 80052b8:	4603      	mov	r3, r0
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d100      	bne.n	80052c0 <memset+0xa>
 80052be:	4770      	bx	lr
 80052c0:	f803 1b01 	strb.w	r1, [r3], #1
 80052c4:	e7f9      	b.n	80052ba <memset+0x4>
	...

080052c8 <_localeconv_r>:
 80052c8:	4800      	ldr	r0, [pc, #0]	@ (80052cc <_localeconv_r+0x4>)
 80052ca:	4770      	bx	lr
 80052cc:	20000164 	.word	0x20000164

080052d0 <_close_r>:
 80052d0:	b538      	push	{r3, r4, r5, lr}
 80052d2:	4d06      	ldr	r5, [pc, #24]	@ (80052ec <_close_r+0x1c>)
 80052d4:	2300      	movs	r3, #0
 80052d6:	4604      	mov	r4, r0
 80052d8:	4608      	mov	r0, r1
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	f7fc fe07 	bl	8001eee <_close>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_close_r+0x1a>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_close_r+0x1a>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20000504 	.word	0x20000504

080052f0 <_lseek_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	@ (8005310 <_lseek_r+0x20>)
 80052f4:	4604      	mov	r4, r0
 80052f6:	4608      	mov	r0, r1
 80052f8:	4611      	mov	r1, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	602a      	str	r2, [r5, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f7fc fe1c 	bl	8001f3c <_lseek>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_lseek_r+0x1e>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_lseek_r+0x1e>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	20000504 	.word	0x20000504

08005314 <_read_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d07      	ldr	r5, [pc, #28]	@ (8005334 <_read_r+0x20>)
 8005318:	4604      	mov	r4, r0
 800531a:	4608      	mov	r0, r1
 800531c:	4611      	mov	r1, r2
 800531e:	2200      	movs	r2, #0
 8005320:	602a      	str	r2, [r5, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	f7fc fdaa 	bl	8001e7c <_read>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_read_r+0x1e>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_read_r+0x1e>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	20000504 	.word	0x20000504

08005338 <_write_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d07      	ldr	r5, [pc, #28]	@ (8005358 <_write_r+0x20>)
 800533c:	4604      	mov	r4, r0
 800533e:	4608      	mov	r0, r1
 8005340:	4611      	mov	r1, r2
 8005342:	2200      	movs	r2, #0
 8005344:	602a      	str	r2, [r5, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	f7fc fdb5 	bl	8001eb6 <_write>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_write_r+0x1e>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	b103      	cbz	r3, 8005356 <_write_r+0x1e>
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	20000504 	.word	0x20000504

0800535c <__errno>:
 800535c:	4b01      	ldr	r3, [pc, #4]	@ (8005364 <__errno+0x8>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000024 	.word	0x20000024

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4d0d      	ldr	r5, [pc, #52]	@ (80053a0 <__libc_init_array+0x38>)
 800536c:	4c0d      	ldr	r4, [pc, #52]	@ (80053a4 <__libc_init_array+0x3c>)
 800536e:	1b64      	subs	r4, r4, r5
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	2600      	movs	r6, #0
 8005374:	42a6      	cmp	r6, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	4d0b      	ldr	r5, [pc, #44]	@ (80053a8 <__libc_init_array+0x40>)
 800537a:	4c0c      	ldr	r4, [pc, #48]	@ (80053ac <__libc_init_array+0x44>)
 800537c:	f002 f868 	bl	8007450 <_init>
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	2600      	movs	r6, #0
 8005386:	42a6      	cmp	r6, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005390:	4798      	blx	r3
 8005392:	3601      	adds	r6, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f855 3b04 	ldr.w	r3, [r5], #4
 800539a:	4798      	blx	r3
 800539c:	3601      	adds	r6, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	08007884 	.word	0x08007884
 80053a4:	08007884 	.word	0x08007884
 80053a8:	08007884 	.word	0x08007884
 80053ac:	08007888 	.word	0x08007888

080053b0 <__retarget_lock_init_recursive>:
 80053b0:	4770      	bx	lr

080053b2 <__retarget_lock_acquire_recursive>:
 80053b2:	4770      	bx	lr

080053b4 <__retarget_lock_release_recursive>:
 80053b4:	4770      	bx	lr

080053b6 <quorem>:
 80053b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ba:	6903      	ldr	r3, [r0, #16]
 80053bc:	690c      	ldr	r4, [r1, #16]
 80053be:	42a3      	cmp	r3, r4
 80053c0:	4607      	mov	r7, r0
 80053c2:	db7e      	blt.n	80054c2 <quorem+0x10c>
 80053c4:	3c01      	subs	r4, #1
 80053c6:	f101 0814 	add.w	r8, r1, #20
 80053ca:	00a3      	lsls	r3, r4, #2
 80053cc:	f100 0514 	add.w	r5, r0, #20
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053e0:	3301      	adds	r3, #1
 80053e2:	429a      	cmp	r2, r3
 80053e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80053ec:	d32e      	bcc.n	800544c <quorem+0x96>
 80053ee:	f04f 0a00 	mov.w	sl, #0
 80053f2:	46c4      	mov	ip, r8
 80053f4:	46ae      	mov	lr, r5
 80053f6:	46d3      	mov	fp, sl
 80053f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80053fc:	b298      	uxth	r0, r3
 80053fe:	fb06 a000 	mla	r0, r6, r0, sl
 8005402:	0c02      	lsrs	r2, r0, #16
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	fb06 2303 	mla	r3, r6, r3, r2
 800540a:	f8de 2000 	ldr.w	r2, [lr]
 800540e:	b280      	uxth	r0, r0
 8005410:	b292      	uxth	r2, r2
 8005412:	1a12      	subs	r2, r2, r0
 8005414:	445a      	add	r2, fp
 8005416:	f8de 0000 	ldr.w	r0, [lr]
 800541a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800541e:	b29b      	uxth	r3, r3
 8005420:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005424:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005428:	b292      	uxth	r2, r2
 800542a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800542e:	45e1      	cmp	r9, ip
 8005430:	f84e 2b04 	str.w	r2, [lr], #4
 8005434:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005438:	d2de      	bcs.n	80053f8 <quorem+0x42>
 800543a:	9b00      	ldr	r3, [sp, #0]
 800543c:	58eb      	ldr	r3, [r5, r3]
 800543e:	b92b      	cbnz	r3, 800544c <quorem+0x96>
 8005440:	9b01      	ldr	r3, [sp, #4]
 8005442:	3b04      	subs	r3, #4
 8005444:	429d      	cmp	r5, r3
 8005446:	461a      	mov	r2, r3
 8005448:	d32f      	bcc.n	80054aa <quorem+0xf4>
 800544a:	613c      	str	r4, [r7, #16]
 800544c:	4638      	mov	r0, r7
 800544e:	f001 f97d 	bl	800674c <__mcmp>
 8005452:	2800      	cmp	r0, #0
 8005454:	db25      	blt.n	80054a2 <quorem+0xec>
 8005456:	4629      	mov	r1, r5
 8005458:	2000      	movs	r0, #0
 800545a:	f858 2b04 	ldr.w	r2, [r8], #4
 800545e:	f8d1 c000 	ldr.w	ip, [r1]
 8005462:	fa1f fe82 	uxth.w	lr, r2
 8005466:	fa1f f38c 	uxth.w	r3, ip
 800546a:	eba3 030e 	sub.w	r3, r3, lr
 800546e:	4403      	add	r3, r0
 8005470:	0c12      	lsrs	r2, r2, #16
 8005472:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005476:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800547a:	b29b      	uxth	r3, r3
 800547c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005480:	45c1      	cmp	r9, r8
 8005482:	f841 3b04 	str.w	r3, [r1], #4
 8005486:	ea4f 4022 	mov.w	r0, r2, asr #16
 800548a:	d2e6      	bcs.n	800545a <quorem+0xa4>
 800548c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005490:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005494:	b922      	cbnz	r2, 80054a0 <quorem+0xea>
 8005496:	3b04      	subs	r3, #4
 8005498:	429d      	cmp	r5, r3
 800549a:	461a      	mov	r2, r3
 800549c:	d30b      	bcc.n	80054b6 <quorem+0x100>
 800549e:	613c      	str	r4, [r7, #16]
 80054a0:	3601      	adds	r6, #1
 80054a2:	4630      	mov	r0, r6
 80054a4:	b003      	add	sp, #12
 80054a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	3b04      	subs	r3, #4
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	d1cb      	bne.n	800544a <quorem+0x94>
 80054b2:	3c01      	subs	r4, #1
 80054b4:	e7c6      	b.n	8005444 <quorem+0x8e>
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	3b04      	subs	r3, #4
 80054ba:	2a00      	cmp	r2, #0
 80054bc:	d1ef      	bne.n	800549e <quorem+0xe8>
 80054be:	3c01      	subs	r4, #1
 80054c0:	e7ea      	b.n	8005498 <quorem+0xe2>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e7ee      	b.n	80054a4 <quorem+0xee>
	...

080054c8 <_dtoa_r>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	69c7      	ldr	r7, [r0, #28]
 80054ce:	b097      	sub	sp, #92	@ 0x5c
 80054d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80054d4:	ec55 4b10 	vmov	r4, r5, d0
 80054d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80054da:	9107      	str	r1, [sp, #28]
 80054dc:	4681      	mov	r9, r0
 80054de:	920c      	str	r2, [sp, #48]	@ 0x30
 80054e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80054e2:	b97f      	cbnz	r7, 8005504 <_dtoa_r+0x3c>
 80054e4:	2010      	movs	r0, #16
 80054e6:	f000 fe09 	bl	80060fc <malloc>
 80054ea:	4602      	mov	r2, r0
 80054ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80054f0:	b920      	cbnz	r0, 80054fc <_dtoa_r+0x34>
 80054f2:	4ba9      	ldr	r3, [pc, #676]	@ (8005798 <_dtoa_r+0x2d0>)
 80054f4:	21ef      	movs	r1, #239	@ 0xef
 80054f6:	48a9      	ldr	r0, [pc, #676]	@ (800579c <_dtoa_r+0x2d4>)
 80054f8:	f001 fc6c 	bl	8006dd4 <__assert_func>
 80054fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005500:	6007      	str	r7, [r0, #0]
 8005502:	60c7      	str	r7, [r0, #12]
 8005504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	b159      	cbz	r1, 8005524 <_dtoa_r+0x5c>
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	604a      	str	r2, [r1, #4]
 8005510:	2301      	movs	r3, #1
 8005512:	4093      	lsls	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
 8005516:	4648      	mov	r0, r9
 8005518:	f000 fee6 	bl	80062e8 <_Bfree>
 800551c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	1e2b      	subs	r3, r5, #0
 8005526:	bfb9      	ittee	lt
 8005528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800552c:	9305      	strlt	r3, [sp, #20]
 800552e:	2300      	movge	r3, #0
 8005530:	6033      	strge	r3, [r6, #0]
 8005532:	9f05      	ldr	r7, [sp, #20]
 8005534:	4b9a      	ldr	r3, [pc, #616]	@ (80057a0 <_dtoa_r+0x2d8>)
 8005536:	bfbc      	itt	lt
 8005538:	2201      	movlt	r2, #1
 800553a:	6032      	strlt	r2, [r6, #0]
 800553c:	43bb      	bics	r3, r7
 800553e:	d112      	bne.n	8005566 <_dtoa_r+0x9e>
 8005540:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005542:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800554c:	4323      	orrs	r3, r4
 800554e:	f000 855a 	beq.w	8006006 <_dtoa_r+0xb3e>
 8005552:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005554:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80057b4 <_dtoa_r+0x2ec>
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 855c 	beq.w	8006016 <_dtoa_r+0xb4e>
 800555e:	f10a 0303 	add.w	r3, sl, #3
 8005562:	f000 bd56 	b.w	8006012 <_dtoa_r+0xb4a>
 8005566:	ed9d 7b04 	vldr	d7, [sp, #16]
 800556a:	2200      	movs	r2, #0
 800556c:	ec51 0b17 	vmov	r0, r1, d7
 8005570:	2300      	movs	r3, #0
 8005572:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005576:	f7fb faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800557a:	4680      	mov	r8, r0
 800557c:	b158      	cbz	r0, 8005596 <_dtoa_r+0xce>
 800557e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005580:	2301      	movs	r3, #1
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005586:	b113      	cbz	r3, 800558e <_dtoa_r+0xc6>
 8005588:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800558a:	4b86      	ldr	r3, [pc, #536]	@ (80057a4 <_dtoa_r+0x2dc>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80057b8 <_dtoa_r+0x2f0>
 8005592:	f000 bd40 	b.w	8006016 <_dtoa_r+0xb4e>
 8005596:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800559a:	aa14      	add	r2, sp, #80	@ 0x50
 800559c:	a915      	add	r1, sp, #84	@ 0x54
 800559e:	4648      	mov	r0, r9
 80055a0:	f001 f984 	bl	80068ac <__d2b>
 80055a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80055a8:	9002      	str	r0, [sp, #8]
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	d078      	beq.n	80056a0 <_dtoa_r+0x1d8>
 80055ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80055b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80055c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80055c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80055c8:	4619      	mov	r1, r3
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b76      	ldr	r3, [pc, #472]	@ (80057a8 <_dtoa_r+0x2e0>)
 80055ce:	f7fa fe63 	bl	8000298 <__aeabi_dsub>
 80055d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005780 <_dtoa_r+0x2b8>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fb f816 	bl	8000608 <__aeabi_dmul>
 80055dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005788 <_dtoa_r+0x2c0>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa fe5b 	bl	800029c <__adddf3>
 80055e6:	4604      	mov	r4, r0
 80055e8:	4630      	mov	r0, r6
 80055ea:	460d      	mov	r5, r1
 80055ec:	f7fa ffa2 	bl	8000534 <__aeabi_i2d>
 80055f0:	a367      	add	r3, pc, #412	@ (adr r3, 8005790 <_dtoa_r+0x2c8>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fb f807 	bl	8000608 <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fa fe4b 	bl	800029c <__adddf3>
 8005606:	4604      	mov	r4, r0
 8005608:	460d      	mov	r5, r1
 800560a:	f7fb faad 	bl	8000b68 <__aeabi_d2iz>
 800560e:	2200      	movs	r2, #0
 8005610:	4607      	mov	r7, r0
 8005612:	2300      	movs	r3, #0
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f7fb fa68 	bl	8000aec <__aeabi_dcmplt>
 800561c:	b140      	cbz	r0, 8005630 <_dtoa_r+0x168>
 800561e:	4638      	mov	r0, r7
 8005620:	f7fa ff88 	bl	8000534 <__aeabi_i2d>
 8005624:	4622      	mov	r2, r4
 8005626:	462b      	mov	r3, r5
 8005628:	f7fb fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800562c:	b900      	cbnz	r0, 8005630 <_dtoa_r+0x168>
 800562e:	3f01      	subs	r7, #1
 8005630:	2f16      	cmp	r7, #22
 8005632:	d852      	bhi.n	80056da <_dtoa_r+0x212>
 8005634:	4b5d      	ldr	r3, [pc, #372]	@ (80057ac <_dtoa_r+0x2e4>)
 8005636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005642:	f7fb fa53 	bl	8000aec <__aeabi_dcmplt>
 8005646:	2800      	cmp	r0, #0
 8005648:	d049      	beq.n	80056de <_dtoa_r+0x216>
 800564a:	3f01      	subs	r7, #1
 800564c:	2300      	movs	r3, #0
 800564e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005650:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005652:	1b9b      	subs	r3, r3, r6
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	bf45      	ittet	mi
 8005658:	f1c3 0301 	rsbmi	r3, r3, #1
 800565c:	9300      	strmi	r3, [sp, #0]
 800565e:	2300      	movpl	r3, #0
 8005660:	2300      	movmi	r3, #0
 8005662:	9206      	str	r2, [sp, #24]
 8005664:	bf54      	ite	pl
 8005666:	9300      	strpl	r3, [sp, #0]
 8005668:	9306      	strmi	r3, [sp, #24]
 800566a:	2f00      	cmp	r7, #0
 800566c:	db39      	blt.n	80056e2 <_dtoa_r+0x21a>
 800566e:	9b06      	ldr	r3, [sp, #24]
 8005670:	970d      	str	r7, [sp, #52]	@ 0x34
 8005672:	443b      	add	r3, r7
 8005674:	9306      	str	r3, [sp, #24]
 8005676:	2300      	movs	r3, #0
 8005678:	9308      	str	r3, [sp, #32]
 800567a:	9b07      	ldr	r3, [sp, #28]
 800567c:	2b09      	cmp	r3, #9
 800567e:	d863      	bhi.n	8005748 <_dtoa_r+0x280>
 8005680:	2b05      	cmp	r3, #5
 8005682:	bfc4      	itt	gt
 8005684:	3b04      	subgt	r3, #4
 8005686:	9307      	strgt	r3, [sp, #28]
 8005688:	9b07      	ldr	r3, [sp, #28]
 800568a:	f1a3 0302 	sub.w	r3, r3, #2
 800568e:	bfcc      	ite	gt
 8005690:	2400      	movgt	r4, #0
 8005692:	2401      	movle	r4, #1
 8005694:	2b03      	cmp	r3, #3
 8005696:	d863      	bhi.n	8005760 <_dtoa_r+0x298>
 8005698:	e8df f003 	tbb	[pc, r3]
 800569c:	2b375452 	.word	0x2b375452
 80056a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80056a4:	441e      	add	r6, r3
 80056a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	bfc1      	itttt	gt
 80056ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80056b2:	409f      	lslgt	r7, r3
 80056b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80056b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80056bc:	bfd6      	itet	le
 80056be:	f1c3 0320 	rsble	r3, r3, #32
 80056c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80056c6:	fa04 f003 	lslle.w	r0, r4, r3
 80056ca:	f7fa ff23 	bl	8000514 <__aeabi_ui2d>
 80056ce:	2201      	movs	r2, #1
 80056d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80056d4:	3e01      	subs	r6, #1
 80056d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80056d8:	e776      	b.n	80055c8 <_dtoa_r+0x100>
 80056da:	2301      	movs	r3, #1
 80056dc:	e7b7      	b.n	800564e <_dtoa_r+0x186>
 80056de:	9010      	str	r0, [sp, #64]	@ 0x40
 80056e0:	e7b6      	b.n	8005650 <_dtoa_r+0x188>
 80056e2:	9b00      	ldr	r3, [sp, #0]
 80056e4:	1bdb      	subs	r3, r3, r7
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	427b      	negs	r3, r7
 80056ea:	9308      	str	r3, [sp, #32]
 80056ec:	2300      	movs	r3, #0
 80056ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80056f0:	e7c3      	b.n	800567a <_dtoa_r+0x1b2>
 80056f2:	2301      	movs	r3, #1
 80056f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056f8:	eb07 0b03 	add.w	fp, r7, r3
 80056fc:	f10b 0301 	add.w	r3, fp, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	9303      	str	r3, [sp, #12]
 8005704:	bfb8      	it	lt
 8005706:	2301      	movlt	r3, #1
 8005708:	e006      	b.n	8005718 <_dtoa_r+0x250>
 800570a:	2301      	movs	r3, #1
 800570c:	9309      	str	r3, [sp, #36]	@ 0x24
 800570e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005710:	2b00      	cmp	r3, #0
 8005712:	dd28      	ble.n	8005766 <_dtoa_r+0x29e>
 8005714:	469b      	mov	fp, r3
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800571c:	2100      	movs	r1, #0
 800571e:	2204      	movs	r2, #4
 8005720:	f102 0514 	add.w	r5, r2, #20
 8005724:	429d      	cmp	r5, r3
 8005726:	d926      	bls.n	8005776 <_dtoa_r+0x2ae>
 8005728:	6041      	str	r1, [r0, #4]
 800572a:	4648      	mov	r0, r9
 800572c:	f000 fd9c 	bl	8006268 <_Balloc>
 8005730:	4682      	mov	sl, r0
 8005732:	2800      	cmp	r0, #0
 8005734:	d142      	bne.n	80057bc <_dtoa_r+0x2f4>
 8005736:	4b1e      	ldr	r3, [pc, #120]	@ (80057b0 <_dtoa_r+0x2e8>)
 8005738:	4602      	mov	r2, r0
 800573a:	f240 11af 	movw	r1, #431	@ 0x1af
 800573e:	e6da      	b.n	80054f6 <_dtoa_r+0x2e>
 8005740:	2300      	movs	r3, #0
 8005742:	e7e3      	b.n	800570c <_dtoa_r+0x244>
 8005744:	2300      	movs	r3, #0
 8005746:	e7d5      	b.n	80056f4 <_dtoa_r+0x22c>
 8005748:	2401      	movs	r4, #1
 800574a:	2300      	movs	r3, #0
 800574c:	9307      	str	r3, [sp, #28]
 800574e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005750:	f04f 3bff 	mov.w	fp, #4294967295
 8005754:	2200      	movs	r2, #0
 8005756:	f8cd b00c 	str.w	fp, [sp, #12]
 800575a:	2312      	movs	r3, #18
 800575c:	920c      	str	r2, [sp, #48]	@ 0x30
 800575e:	e7db      	b.n	8005718 <_dtoa_r+0x250>
 8005760:	2301      	movs	r3, #1
 8005762:	9309      	str	r3, [sp, #36]	@ 0x24
 8005764:	e7f4      	b.n	8005750 <_dtoa_r+0x288>
 8005766:	f04f 0b01 	mov.w	fp, #1
 800576a:	f8cd b00c 	str.w	fp, [sp, #12]
 800576e:	465b      	mov	r3, fp
 8005770:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005774:	e7d0      	b.n	8005718 <_dtoa_r+0x250>
 8005776:	3101      	adds	r1, #1
 8005778:	0052      	lsls	r2, r2, #1
 800577a:	e7d1      	b.n	8005720 <_dtoa_r+0x258>
 800577c:	f3af 8000 	nop.w
 8005780:	636f4361 	.word	0x636f4361
 8005784:	3fd287a7 	.word	0x3fd287a7
 8005788:	8b60c8b3 	.word	0x8b60c8b3
 800578c:	3fc68a28 	.word	0x3fc68a28
 8005790:	509f79fb 	.word	0x509f79fb
 8005794:	3fd34413 	.word	0x3fd34413
 8005798:	08007545 	.word	0x08007545
 800579c:	0800755c 	.word	0x0800755c
 80057a0:	7ff00000 	.word	0x7ff00000
 80057a4:	08007515 	.word	0x08007515
 80057a8:	3ff80000 	.word	0x3ff80000
 80057ac:	080076b0 	.word	0x080076b0
 80057b0:	080075b4 	.word	0x080075b4
 80057b4:	08007541 	.word	0x08007541
 80057b8:	08007514 	.word	0x08007514
 80057bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057c0:	6018      	str	r0, [r3, #0]
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	2b0e      	cmp	r3, #14
 80057c6:	f200 80a1 	bhi.w	800590c <_dtoa_r+0x444>
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	f000 809e 	beq.w	800590c <_dtoa_r+0x444>
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	dd33      	ble.n	800583c <_dtoa_r+0x374>
 80057d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005a48 <_dtoa_r+0x580>)
 80057d6:	f007 020f 	and.w	r2, r7, #15
 80057da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057de:	ed93 7b00 	vldr	d7, [r3]
 80057e2:	05f8      	lsls	r0, r7, #23
 80057e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80057e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80057ec:	d516      	bpl.n	800581c <_dtoa_r+0x354>
 80057ee:	4b97      	ldr	r3, [pc, #604]	@ (8005a4c <_dtoa_r+0x584>)
 80057f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057f8:	f7fb f830 	bl	800085c <__aeabi_ddiv>
 80057fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005800:	f004 040f 	and.w	r4, r4, #15
 8005804:	2603      	movs	r6, #3
 8005806:	4d91      	ldr	r5, [pc, #580]	@ (8005a4c <_dtoa_r+0x584>)
 8005808:	b954      	cbnz	r4, 8005820 <_dtoa_r+0x358>
 800580a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800580e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005812:	f7fb f823 	bl	800085c <__aeabi_ddiv>
 8005816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800581a:	e028      	b.n	800586e <_dtoa_r+0x3a6>
 800581c:	2602      	movs	r6, #2
 800581e:	e7f2      	b.n	8005806 <_dtoa_r+0x33e>
 8005820:	07e1      	lsls	r1, r4, #31
 8005822:	d508      	bpl.n	8005836 <_dtoa_r+0x36e>
 8005824:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005828:	e9d5 2300 	ldrd	r2, r3, [r5]
 800582c:	f7fa feec 	bl	8000608 <__aeabi_dmul>
 8005830:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005834:	3601      	adds	r6, #1
 8005836:	1064      	asrs	r4, r4, #1
 8005838:	3508      	adds	r5, #8
 800583a:	e7e5      	b.n	8005808 <_dtoa_r+0x340>
 800583c:	f000 80af 	beq.w	800599e <_dtoa_r+0x4d6>
 8005840:	427c      	negs	r4, r7
 8005842:	4b81      	ldr	r3, [pc, #516]	@ (8005a48 <_dtoa_r+0x580>)
 8005844:	4d81      	ldr	r5, [pc, #516]	@ (8005a4c <_dtoa_r+0x584>)
 8005846:	f004 020f 	and.w	r2, r4, #15
 800584a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005856:	f7fa fed7 	bl	8000608 <__aeabi_dmul>
 800585a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800585e:	1124      	asrs	r4, r4, #4
 8005860:	2300      	movs	r3, #0
 8005862:	2602      	movs	r6, #2
 8005864:	2c00      	cmp	r4, #0
 8005866:	f040 808f 	bne.w	8005988 <_dtoa_r+0x4c0>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1d3      	bne.n	8005816 <_dtoa_r+0x34e>
 800586e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005870:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8094 	beq.w	80059a2 <_dtoa_r+0x4da>
 800587a:	4b75      	ldr	r3, [pc, #468]	@ (8005a50 <_dtoa_r+0x588>)
 800587c:	2200      	movs	r2, #0
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fb f933 	bl	8000aec <__aeabi_dcmplt>
 8005886:	2800      	cmp	r0, #0
 8005888:	f000 808b 	beq.w	80059a2 <_dtoa_r+0x4da>
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8087 	beq.w	80059a2 <_dtoa_r+0x4da>
 8005894:	f1bb 0f00 	cmp.w	fp, #0
 8005898:	dd34      	ble.n	8005904 <_dtoa_r+0x43c>
 800589a:	4620      	mov	r0, r4
 800589c:	4b6d      	ldr	r3, [pc, #436]	@ (8005a54 <_dtoa_r+0x58c>)
 800589e:	2200      	movs	r2, #0
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7fa feb1 	bl	8000608 <__aeabi_dmul>
 80058a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80058ae:	3601      	adds	r6, #1
 80058b0:	465c      	mov	r4, fp
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7fa fe3e 	bl	8000534 <__aeabi_i2d>
 80058b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058bc:	f7fa fea4 	bl	8000608 <__aeabi_dmul>
 80058c0:	4b65      	ldr	r3, [pc, #404]	@ (8005a58 <_dtoa_r+0x590>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f7fa fcea 	bl	800029c <__adddf3>
 80058c8:	4605      	mov	r5, r0
 80058ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80058ce:	2c00      	cmp	r4, #0
 80058d0:	d16a      	bne.n	80059a8 <_dtoa_r+0x4e0>
 80058d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d6:	4b61      	ldr	r3, [pc, #388]	@ (8005a5c <_dtoa_r+0x594>)
 80058d8:	2200      	movs	r2, #0
 80058da:	f7fa fcdd 	bl	8000298 <__aeabi_dsub>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058e6:	462a      	mov	r2, r5
 80058e8:	4633      	mov	r3, r6
 80058ea:	f7fb f91d 	bl	8000b28 <__aeabi_dcmpgt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f040 8298 	bne.w	8005e24 <_dtoa_r+0x95c>
 80058f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058f8:	462a      	mov	r2, r5
 80058fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80058fe:	f7fb f8f5 	bl	8000aec <__aeabi_dcmplt>
 8005902:	bb38      	cbnz	r0, 8005954 <_dtoa_r+0x48c>
 8005904:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005908:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800590c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800590e:	2b00      	cmp	r3, #0
 8005910:	f2c0 8157 	blt.w	8005bc2 <_dtoa_r+0x6fa>
 8005914:	2f0e      	cmp	r7, #14
 8005916:	f300 8154 	bgt.w	8005bc2 <_dtoa_r+0x6fa>
 800591a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a48 <_dtoa_r+0x580>)
 800591c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005920:	ed93 7b00 	vldr	d7, [r3]
 8005924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005926:	2b00      	cmp	r3, #0
 8005928:	ed8d 7b00 	vstr	d7, [sp]
 800592c:	f280 80e5 	bge.w	8005afa <_dtoa_r+0x632>
 8005930:	9b03      	ldr	r3, [sp, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f300 80e1 	bgt.w	8005afa <_dtoa_r+0x632>
 8005938:	d10c      	bne.n	8005954 <_dtoa_r+0x48c>
 800593a:	4b48      	ldr	r3, [pc, #288]	@ (8005a5c <_dtoa_r+0x594>)
 800593c:	2200      	movs	r2, #0
 800593e:	ec51 0b17 	vmov	r0, r1, d7
 8005942:	f7fa fe61 	bl	8000608 <__aeabi_dmul>
 8005946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800594a:	f7fb f8e3 	bl	8000b14 <__aeabi_dcmpge>
 800594e:	2800      	cmp	r0, #0
 8005950:	f000 8266 	beq.w	8005e20 <_dtoa_r+0x958>
 8005954:	2400      	movs	r4, #0
 8005956:	4625      	mov	r5, r4
 8005958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800595a:	4656      	mov	r6, sl
 800595c:	ea6f 0803 	mvn.w	r8, r3
 8005960:	2700      	movs	r7, #0
 8005962:	4621      	mov	r1, r4
 8005964:	4648      	mov	r0, r9
 8005966:	f000 fcbf 	bl	80062e8 <_Bfree>
 800596a:	2d00      	cmp	r5, #0
 800596c:	f000 80bd 	beq.w	8005aea <_dtoa_r+0x622>
 8005970:	b12f      	cbz	r7, 800597e <_dtoa_r+0x4b6>
 8005972:	42af      	cmp	r7, r5
 8005974:	d003      	beq.n	800597e <_dtoa_r+0x4b6>
 8005976:	4639      	mov	r1, r7
 8005978:	4648      	mov	r0, r9
 800597a:	f000 fcb5 	bl	80062e8 <_Bfree>
 800597e:	4629      	mov	r1, r5
 8005980:	4648      	mov	r0, r9
 8005982:	f000 fcb1 	bl	80062e8 <_Bfree>
 8005986:	e0b0      	b.n	8005aea <_dtoa_r+0x622>
 8005988:	07e2      	lsls	r2, r4, #31
 800598a:	d505      	bpl.n	8005998 <_dtoa_r+0x4d0>
 800598c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005990:	f7fa fe3a 	bl	8000608 <__aeabi_dmul>
 8005994:	3601      	adds	r6, #1
 8005996:	2301      	movs	r3, #1
 8005998:	1064      	asrs	r4, r4, #1
 800599a:	3508      	adds	r5, #8
 800599c:	e762      	b.n	8005864 <_dtoa_r+0x39c>
 800599e:	2602      	movs	r6, #2
 80059a0:	e765      	b.n	800586e <_dtoa_r+0x3a6>
 80059a2:	9c03      	ldr	r4, [sp, #12]
 80059a4:	46b8      	mov	r8, r7
 80059a6:	e784      	b.n	80058b2 <_dtoa_r+0x3ea>
 80059a8:	4b27      	ldr	r3, [pc, #156]	@ (8005a48 <_dtoa_r+0x580>)
 80059aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059b4:	4454      	add	r4, sl
 80059b6:	2900      	cmp	r1, #0
 80059b8:	d054      	beq.n	8005a64 <_dtoa_r+0x59c>
 80059ba:	4929      	ldr	r1, [pc, #164]	@ (8005a60 <_dtoa_r+0x598>)
 80059bc:	2000      	movs	r0, #0
 80059be:	f7fa ff4d 	bl	800085c <__aeabi_ddiv>
 80059c2:	4633      	mov	r3, r6
 80059c4:	462a      	mov	r2, r5
 80059c6:	f7fa fc67 	bl	8000298 <__aeabi_dsub>
 80059ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059ce:	4656      	mov	r6, sl
 80059d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d4:	f7fb f8c8 	bl	8000b68 <__aeabi_d2iz>
 80059d8:	4605      	mov	r5, r0
 80059da:	f7fa fdab 	bl	8000534 <__aeabi_i2d>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e6:	f7fa fc57 	bl	8000298 <__aeabi_dsub>
 80059ea:	3530      	adds	r5, #48	@ 0x30
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059f4:	f806 5b01 	strb.w	r5, [r6], #1
 80059f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059fc:	f7fb f876 	bl	8000aec <__aeabi_dcmplt>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d172      	bne.n	8005aea <_dtoa_r+0x622>
 8005a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a08:	4911      	ldr	r1, [pc, #68]	@ (8005a50 <_dtoa_r+0x588>)
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7fa fc44 	bl	8000298 <__aeabi_dsub>
 8005a10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a14:	f7fb f86a 	bl	8000aec <__aeabi_dcmplt>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f040 80b4 	bne.w	8005b86 <_dtoa_r+0x6be>
 8005a1e:	42a6      	cmp	r6, r4
 8005a20:	f43f af70 	beq.w	8005904 <_dtoa_r+0x43c>
 8005a24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a28:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <_dtoa_r+0x58c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f7fa fdec 	bl	8000608 <__aeabi_dmul>
 8005a30:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <_dtoa_r+0x58c>)
 8005a32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a36:	2200      	movs	r2, #0
 8005a38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a3c:	f7fa fde4 	bl	8000608 <__aeabi_dmul>
 8005a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a44:	e7c4      	b.n	80059d0 <_dtoa_r+0x508>
 8005a46:	bf00      	nop
 8005a48:	080076b0 	.word	0x080076b0
 8005a4c:	08007688 	.word	0x08007688
 8005a50:	3ff00000 	.word	0x3ff00000
 8005a54:	40240000 	.word	0x40240000
 8005a58:	401c0000 	.word	0x401c0000
 8005a5c:	40140000 	.word	0x40140000
 8005a60:	3fe00000 	.word	0x3fe00000
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7fa fdce 	bl	8000608 <__aeabi_dmul>
 8005a6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a72:	4656      	mov	r6, sl
 8005a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a78:	f7fb f876 	bl	8000b68 <__aeabi_d2iz>
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	f7fa fd59 	bl	8000534 <__aeabi_i2d>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a8a:	f7fa fc05 	bl	8000298 <__aeabi_dsub>
 8005a8e:	3530      	adds	r5, #48	@ 0x30
 8005a90:	f806 5b01 	strb.w	r5, [r6], #1
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	d124      	bne.n	8005aee <_dtoa_r+0x626>
 8005aa4:	4baf      	ldr	r3, [pc, #700]	@ (8005d64 <_dtoa_r+0x89c>)
 8005aa6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005aaa:	f7fa fbf7 	bl	800029c <__adddf3>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ab6:	f7fb f837 	bl	8000b28 <__aeabi_dcmpgt>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d163      	bne.n	8005b86 <_dtoa_r+0x6be>
 8005abe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005ac2:	49a8      	ldr	r1, [pc, #672]	@ (8005d64 <_dtoa_r+0x89c>)
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7fa fbe7 	bl	8000298 <__aeabi_dsub>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ad2:	f7fb f80b 	bl	8000aec <__aeabi_dcmplt>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f43f af14 	beq.w	8005904 <_dtoa_r+0x43c>
 8005adc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005ade:	1e73      	subs	r3, r6, #1
 8005ae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ae2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ae6:	2b30      	cmp	r3, #48	@ 0x30
 8005ae8:	d0f8      	beq.n	8005adc <_dtoa_r+0x614>
 8005aea:	4647      	mov	r7, r8
 8005aec:	e03b      	b.n	8005b66 <_dtoa_r+0x69e>
 8005aee:	4b9e      	ldr	r3, [pc, #632]	@ (8005d68 <_dtoa_r+0x8a0>)
 8005af0:	f7fa fd8a 	bl	8000608 <__aeabi_dmul>
 8005af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005af8:	e7bc      	b.n	8005a74 <_dtoa_r+0x5ac>
 8005afa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005afe:	4656      	mov	r6, sl
 8005b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fea8 	bl	800085c <__aeabi_ddiv>
 8005b0c:	f7fb f82c 	bl	8000b68 <__aeabi_d2iz>
 8005b10:	4680      	mov	r8, r0
 8005b12:	f7fa fd0f 	bl	8000534 <__aeabi_i2d>
 8005b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1a:	f7fa fd75 	bl	8000608 <__aeabi_dmul>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b2a:	f7fa fbb5 	bl	8000298 <__aeabi_dsub>
 8005b2e:	f806 4b01 	strb.w	r4, [r6], #1
 8005b32:	9d03      	ldr	r5, [sp, #12]
 8005b34:	eba6 040a 	sub.w	r4, r6, sl
 8005b38:	42a5      	cmp	r5, r4
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	d133      	bne.n	8005ba8 <_dtoa_r+0x6e0>
 8005b40:	f7fa fbac 	bl	800029c <__adddf3>
 8005b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	f7fa ffec 	bl	8000b28 <__aeabi_dcmpgt>
 8005b50:	b9c0      	cbnz	r0, 8005b84 <_dtoa_r+0x6bc>
 8005b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b5e:	b110      	cbz	r0, 8005b66 <_dtoa_r+0x69e>
 8005b60:	f018 0f01 	tst.w	r8, #1
 8005b64:	d10e      	bne.n	8005b84 <_dtoa_r+0x6bc>
 8005b66:	9902      	ldr	r1, [sp, #8]
 8005b68:	4648      	mov	r0, r9
 8005b6a:	f000 fbbd 	bl	80062e8 <_Bfree>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	7033      	strb	r3, [r6, #0]
 8005b72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b74:	3701      	adds	r7, #1
 8005b76:	601f      	str	r7, [r3, #0]
 8005b78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 824b 	beq.w	8006016 <_dtoa_r+0xb4e>
 8005b80:	601e      	str	r6, [r3, #0]
 8005b82:	e248      	b.n	8006016 <_dtoa_r+0xb4e>
 8005b84:	46b8      	mov	r8, r7
 8005b86:	4633      	mov	r3, r6
 8005b88:	461e      	mov	r6, r3
 8005b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b8e:	2a39      	cmp	r2, #57	@ 0x39
 8005b90:	d106      	bne.n	8005ba0 <_dtoa_r+0x6d8>
 8005b92:	459a      	cmp	sl, r3
 8005b94:	d1f8      	bne.n	8005b88 <_dtoa_r+0x6c0>
 8005b96:	2230      	movs	r2, #48	@ 0x30
 8005b98:	f108 0801 	add.w	r8, r8, #1
 8005b9c:	f88a 2000 	strb.w	r2, [sl]
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	3201      	adds	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	e7a0      	b.n	8005aea <_dtoa_r+0x622>
 8005ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8005d68 <_dtoa_r+0x8a0>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	f7fa fd2c 	bl	8000608 <__aeabi_dmul>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	f7fa ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d09f      	beq.n	8005b00 <_dtoa_r+0x638>
 8005bc0:	e7d1      	b.n	8005b66 <_dtoa_r+0x69e>
 8005bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	f000 80ea 	beq.w	8005d9e <_dtoa_r+0x8d6>
 8005bca:	9a07      	ldr	r2, [sp, #28]
 8005bcc:	2a01      	cmp	r2, #1
 8005bce:	f300 80cd 	bgt.w	8005d6c <_dtoa_r+0x8a4>
 8005bd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	f000 80c1 	beq.w	8005d5c <_dtoa_r+0x894>
 8005bda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005bde:	9c08      	ldr	r4, [sp, #32]
 8005be0:	9e00      	ldr	r6, [sp, #0]
 8005be2:	9a00      	ldr	r2, [sp, #0]
 8005be4:	441a      	add	r2, r3
 8005be6:	9200      	str	r2, [sp, #0]
 8005be8:	9a06      	ldr	r2, [sp, #24]
 8005bea:	2101      	movs	r1, #1
 8005bec:	441a      	add	r2, r3
 8005bee:	4648      	mov	r0, r9
 8005bf0:	9206      	str	r2, [sp, #24]
 8005bf2:	f000 fc2d 	bl	8006450 <__i2b>
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	b166      	cbz	r6, 8005c14 <_dtoa_r+0x74c>
 8005bfa:	9b06      	ldr	r3, [sp, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dd09      	ble.n	8005c14 <_dtoa_r+0x74c>
 8005c00:	42b3      	cmp	r3, r6
 8005c02:	9a00      	ldr	r2, [sp, #0]
 8005c04:	bfa8      	it	ge
 8005c06:	4633      	movge	r3, r6
 8005c08:	1ad2      	subs	r2, r2, r3
 8005c0a:	9200      	str	r2, [sp, #0]
 8005c0c:	9a06      	ldr	r2, [sp, #24]
 8005c0e:	1af6      	subs	r6, r6, r3
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	9306      	str	r3, [sp, #24]
 8005c14:	9b08      	ldr	r3, [sp, #32]
 8005c16:	b30b      	cbz	r3, 8005c5c <_dtoa_r+0x794>
 8005c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80c6 	beq.w	8005dac <_dtoa_r+0x8e4>
 8005c20:	2c00      	cmp	r4, #0
 8005c22:	f000 80c0 	beq.w	8005da6 <_dtoa_r+0x8de>
 8005c26:	4629      	mov	r1, r5
 8005c28:	4622      	mov	r2, r4
 8005c2a:	4648      	mov	r0, r9
 8005c2c:	f000 fcc8 	bl	80065c0 <__pow5mult>
 8005c30:	9a02      	ldr	r2, [sp, #8]
 8005c32:	4601      	mov	r1, r0
 8005c34:	4605      	mov	r5, r0
 8005c36:	4648      	mov	r0, r9
 8005c38:	f000 fc20 	bl	800647c <__multiply>
 8005c3c:	9902      	ldr	r1, [sp, #8]
 8005c3e:	4680      	mov	r8, r0
 8005c40:	4648      	mov	r0, r9
 8005c42:	f000 fb51 	bl	80062e8 <_Bfree>
 8005c46:	9b08      	ldr	r3, [sp, #32]
 8005c48:	1b1b      	subs	r3, r3, r4
 8005c4a:	9308      	str	r3, [sp, #32]
 8005c4c:	f000 80b1 	beq.w	8005db2 <_dtoa_r+0x8ea>
 8005c50:	9a08      	ldr	r2, [sp, #32]
 8005c52:	4641      	mov	r1, r8
 8005c54:	4648      	mov	r0, r9
 8005c56:	f000 fcb3 	bl	80065c0 <__pow5mult>
 8005c5a:	9002      	str	r0, [sp, #8]
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4648      	mov	r0, r9
 8005c60:	f000 fbf6 	bl	8006450 <__i2b>
 8005c64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c66:	4604      	mov	r4, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 81d8 	beq.w	800601e <_dtoa_r+0xb56>
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4601      	mov	r1, r0
 8005c72:	4648      	mov	r0, r9
 8005c74:	f000 fca4 	bl	80065c0 <__pow5mult>
 8005c78:	9b07      	ldr	r3, [sp, #28]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	f300 809f 	bgt.w	8005dc0 <_dtoa_r+0x8f8>
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 8097 	bne.w	8005db8 <_dtoa_r+0x8f0>
 8005c8a:	9b05      	ldr	r3, [sp, #20]
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 8093 	bne.w	8005dbc <_dtoa_r+0x8f4>
 8005c96:	9b05      	ldr	r3, [sp, #20]
 8005c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c9c:	0d1b      	lsrs	r3, r3, #20
 8005c9e:	051b      	lsls	r3, r3, #20
 8005ca0:	b133      	cbz	r3, 8005cb0 <_dtoa_r+0x7e8>
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	9b06      	ldr	r3, [sp, #24]
 8005caa:	3301      	adds	r3, #1
 8005cac:	9306      	str	r3, [sp, #24]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	9308      	str	r3, [sp, #32]
 8005cb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 81b8 	beq.w	800602a <_dtoa_r+0xb62>
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cc0:	6918      	ldr	r0, [r3, #16]
 8005cc2:	f000 fb79 	bl	80063b8 <__hi0bits>
 8005cc6:	f1c0 0020 	rsb	r0, r0, #32
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	4418      	add	r0, r3
 8005cce:	f010 001f 	ands.w	r0, r0, #31
 8005cd2:	f000 8082 	beq.w	8005dda <_dtoa_r+0x912>
 8005cd6:	f1c0 0320 	rsb	r3, r0, #32
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	dd73      	ble.n	8005dc6 <_dtoa_r+0x8fe>
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	f1c0 001c 	rsb	r0, r0, #28
 8005ce4:	4403      	add	r3, r0
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	4403      	add	r3, r0
 8005cec:	4406      	add	r6, r0
 8005cee:	9306      	str	r3, [sp, #24]
 8005cf0:	9b00      	ldr	r3, [sp, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dd05      	ble.n	8005d02 <_dtoa_r+0x83a>
 8005cf6:	9902      	ldr	r1, [sp, #8]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4648      	mov	r0, r9
 8005cfc:	f000 fcba 	bl	8006674 <__lshift>
 8005d00:	9002      	str	r0, [sp, #8]
 8005d02:	9b06      	ldr	r3, [sp, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	dd05      	ble.n	8005d14 <_dtoa_r+0x84c>
 8005d08:	4621      	mov	r1, r4
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4648      	mov	r0, r9
 8005d0e:	f000 fcb1 	bl	8006674 <__lshift>
 8005d12:	4604      	mov	r4, r0
 8005d14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d061      	beq.n	8005dde <_dtoa_r+0x916>
 8005d1a:	9802      	ldr	r0, [sp, #8]
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	f000 fd15 	bl	800674c <__mcmp>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	da5b      	bge.n	8005dde <_dtoa_r+0x916>
 8005d26:	2300      	movs	r3, #0
 8005d28:	9902      	ldr	r1, [sp, #8]
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	f000 fafd 	bl	800632c <__multadd>
 8005d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d34:	9002      	str	r0, [sp, #8]
 8005d36:	f107 38ff 	add.w	r8, r7, #4294967295
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8177 	beq.w	800602e <_dtoa_r+0xb66>
 8005d40:	4629      	mov	r1, r5
 8005d42:	2300      	movs	r3, #0
 8005d44:	220a      	movs	r2, #10
 8005d46:	4648      	mov	r0, r9
 8005d48:	f000 faf0 	bl	800632c <__multadd>
 8005d4c:	f1bb 0f00 	cmp.w	fp, #0
 8005d50:	4605      	mov	r5, r0
 8005d52:	dc6f      	bgt.n	8005e34 <_dtoa_r+0x96c>
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	dc49      	bgt.n	8005dee <_dtoa_r+0x926>
 8005d5a:	e06b      	b.n	8005e34 <_dtoa_r+0x96c>
 8005d5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005d62:	e73c      	b.n	8005bde <_dtoa_r+0x716>
 8005d64:	3fe00000 	.word	0x3fe00000
 8005d68:	40240000 	.word	0x40240000
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	1e5c      	subs	r4, r3, #1
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	db09      	blt.n	8005d8a <_dtoa_r+0x8c2>
 8005d76:	1b1c      	subs	r4, r3, r4
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f6bf af30 	bge.w	8005be0 <_dtoa_r+0x718>
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	9a03      	ldr	r2, [sp, #12]
 8005d84:	1a9e      	subs	r6, r3, r2
 8005d86:	2300      	movs	r3, #0
 8005d88:	e72b      	b.n	8005be2 <_dtoa_r+0x71a>
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d8e:	9408      	str	r4, [sp, #32]
 8005d90:	1ae3      	subs	r3, r4, r3
 8005d92:	441a      	add	r2, r3
 8005d94:	9e00      	ldr	r6, [sp, #0]
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	920d      	str	r2, [sp, #52]	@ 0x34
 8005d9a:	2400      	movs	r4, #0
 8005d9c:	e721      	b.n	8005be2 <_dtoa_r+0x71a>
 8005d9e:	9c08      	ldr	r4, [sp, #32]
 8005da0:	9e00      	ldr	r6, [sp, #0]
 8005da2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005da4:	e728      	b.n	8005bf8 <_dtoa_r+0x730>
 8005da6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005daa:	e751      	b.n	8005c50 <_dtoa_r+0x788>
 8005dac:	9a08      	ldr	r2, [sp, #32]
 8005dae:	9902      	ldr	r1, [sp, #8]
 8005db0:	e750      	b.n	8005c54 <_dtoa_r+0x78c>
 8005db2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005db6:	e751      	b.n	8005c5c <_dtoa_r+0x794>
 8005db8:	2300      	movs	r3, #0
 8005dba:	e779      	b.n	8005cb0 <_dtoa_r+0x7e8>
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	e777      	b.n	8005cb0 <_dtoa_r+0x7e8>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9308      	str	r3, [sp, #32]
 8005dc4:	e779      	b.n	8005cba <_dtoa_r+0x7f2>
 8005dc6:	d093      	beq.n	8005cf0 <_dtoa_r+0x828>
 8005dc8:	9a00      	ldr	r2, [sp, #0]
 8005dca:	331c      	adds	r3, #28
 8005dcc:	441a      	add	r2, r3
 8005dce:	9200      	str	r2, [sp, #0]
 8005dd0:	9a06      	ldr	r2, [sp, #24]
 8005dd2:	441a      	add	r2, r3
 8005dd4:	441e      	add	r6, r3
 8005dd6:	9206      	str	r2, [sp, #24]
 8005dd8:	e78a      	b.n	8005cf0 <_dtoa_r+0x828>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	e7f4      	b.n	8005dc8 <_dtoa_r+0x900>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	46b8      	mov	r8, r7
 8005de4:	dc20      	bgt.n	8005e28 <_dtoa_r+0x960>
 8005de6:	469b      	mov	fp, r3
 8005de8:	9b07      	ldr	r3, [sp, #28]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	dd1e      	ble.n	8005e2c <_dtoa_r+0x964>
 8005dee:	f1bb 0f00 	cmp.w	fp, #0
 8005df2:	f47f adb1 	bne.w	8005958 <_dtoa_r+0x490>
 8005df6:	4621      	mov	r1, r4
 8005df8:	465b      	mov	r3, fp
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	4648      	mov	r0, r9
 8005dfe:	f000 fa95 	bl	800632c <__multadd>
 8005e02:	4601      	mov	r1, r0
 8005e04:	4604      	mov	r4, r0
 8005e06:	9802      	ldr	r0, [sp, #8]
 8005e08:	f000 fca0 	bl	800674c <__mcmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f77f ada3 	ble.w	8005958 <_dtoa_r+0x490>
 8005e12:	4656      	mov	r6, sl
 8005e14:	2331      	movs	r3, #49	@ 0x31
 8005e16:	f806 3b01 	strb.w	r3, [r6], #1
 8005e1a:	f108 0801 	add.w	r8, r8, #1
 8005e1e:	e59f      	b.n	8005960 <_dtoa_r+0x498>
 8005e20:	9c03      	ldr	r4, [sp, #12]
 8005e22:	46b8      	mov	r8, r7
 8005e24:	4625      	mov	r5, r4
 8005e26:	e7f4      	b.n	8005e12 <_dtoa_r+0x94a>
 8005e28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8101 	beq.w	8006036 <_dtoa_r+0xb6e>
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	dd05      	ble.n	8005e44 <_dtoa_r+0x97c>
 8005e38:	4629      	mov	r1, r5
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	f000 fc19 	bl	8006674 <__lshift>
 8005e42:	4605      	mov	r5, r0
 8005e44:	9b08      	ldr	r3, [sp, #32]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d05c      	beq.n	8005f04 <_dtoa_r+0xa3c>
 8005e4a:	6869      	ldr	r1, [r5, #4]
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	f000 fa0b 	bl	8006268 <_Balloc>
 8005e52:	4606      	mov	r6, r0
 8005e54:	b928      	cbnz	r0, 8005e62 <_dtoa_r+0x99a>
 8005e56:	4b82      	ldr	r3, [pc, #520]	@ (8006060 <_dtoa_r+0xb98>)
 8005e58:	4602      	mov	r2, r0
 8005e5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e5e:	f7ff bb4a 	b.w	80054f6 <_dtoa_r+0x2e>
 8005e62:	692a      	ldr	r2, [r5, #16]
 8005e64:	3202      	adds	r2, #2
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	f105 010c 	add.w	r1, r5, #12
 8005e6c:	300c      	adds	r0, #12
 8005e6e:	f000 ffa3 	bl	8006db8 <memcpy>
 8005e72:	2201      	movs	r2, #1
 8005e74:	4631      	mov	r1, r6
 8005e76:	4648      	mov	r0, r9
 8005e78:	f000 fbfc 	bl	8006674 <__lshift>
 8005e7c:	f10a 0301 	add.w	r3, sl, #1
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	eb0a 030b 	add.w	r3, sl, fp
 8005e86:	9308      	str	r3, [sp, #32]
 8005e88:	9b04      	ldr	r3, [sp, #16]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	462f      	mov	r7, r5
 8005e90:	9306      	str	r3, [sp, #24]
 8005e92:	4605      	mov	r5, r0
 8005e94:	9b00      	ldr	r3, [sp, #0]
 8005e96:	9802      	ldr	r0, [sp, #8]
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e9e:	f7ff fa8a 	bl	80053b6 <quorem>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	3330      	adds	r3, #48	@ 0x30
 8005ea6:	9003      	str	r0, [sp, #12]
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	9802      	ldr	r0, [sp, #8]
 8005eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eae:	f000 fc4d 	bl	800674c <__mcmp>
 8005eb2:	462a      	mov	r2, r5
 8005eb4:	9004      	str	r0, [sp, #16]
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4648      	mov	r0, r9
 8005eba:	f000 fc63 	bl	8006784 <__mdiff>
 8005ebe:	68c2      	ldr	r2, [r0, #12]
 8005ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	bb02      	cbnz	r2, 8005f08 <_dtoa_r+0xa40>
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	9802      	ldr	r0, [sp, #8]
 8005eca:	f000 fc3f 	bl	800674c <__mcmp>
 8005ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4648      	mov	r0, r9
 8005ed6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eda:	f000 fa05 	bl	80062e8 <_Bfree>
 8005ede:	9b07      	ldr	r3, [sp, #28]
 8005ee0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ee2:	9e00      	ldr	r6, [sp, #0]
 8005ee4:	ea42 0103 	orr.w	r1, r2, r3
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	4319      	orrs	r1, r3
 8005eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eee:	d10d      	bne.n	8005f0c <_dtoa_r+0xa44>
 8005ef0:	2b39      	cmp	r3, #57	@ 0x39
 8005ef2:	d027      	beq.n	8005f44 <_dtoa_r+0xa7c>
 8005ef4:	9a04      	ldr	r2, [sp, #16]
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	dd01      	ble.n	8005efe <_dtoa_r+0xa36>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	3331      	adds	r3, #49	@ 0x31
 8005efe:	f88b 3000 	strb.w	r3, [fp]
 8005f02:	e52e      	b.n	8005962 <_dtoa_r+0x49a>
 8005f04:	4628      	mov	r0, r5
 8005f06:	e7b9      	b.n	8005e7c <_dtoa_r+0x9b4>
 8005f08:	2201      	movs	r2, #1
 8005f0a:	e7e2      	b.n	8005ed2 <_dtoa_r+0xa0a>
 8005f0c:	9904      	ldr	r1, [sp, #16]
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	db04      	blt.n	8005f1c <_dtoa_r+0xa54>
 8005f12:	9807      	ldr	r0, [sp, #28]
 8005f14:	4301      	orrs	r1, r0
 8005f16:	9806      	ldr	r0, [sp, #24]
 8005f18:	4301      	orrs	r1, r0
 8005f1a:	d120      	bne.n	8005f5e <_dtoa_r+0xa96>
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	ddee      	ble.n	8005efe <_dtoa_r+0xa36>
 8005f20:	9902      	ldr	r1, [sp, #8]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	4648      	mov	r0, r9
 8005f28:	f000 fba4 	bl	8006674 <__lshift>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	9002      	str	r0, [sp, #8]
 8005f30:	f000 fc0c 	bl	800674c <__mcmp>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	dc02      	bgt.n	8005f40 <_dtoa_r+0xa78>
 8005f3a:	d1e0      	bne.n	8005efe <_dtoa_r+0xa36>
 8005f3c:	07da      	lsls	r2, r3, #31
 8005f3e:	d5de      	bpl.n	8005efe <_dtoa_r+0xa36>
 8005f40:	2b39      	cmp	r3, #57	@ 0x39
 8005f42:	d1da      	bne.n	8005efa <_dtoa_r+0xa32>
 8005f44:	2339      	movs	r3, #57	@ 0x39
 8005f46:	f88b 3000 	strb.w	r3, [fp]
 8005f4a:	4633      	mov	r3, r6
 8005f4c:	461e      	mov	r6, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f54:	2a39      	cmp	r2, #57	@ 0x39
 8005f56:	d04e      	beq.n	8005ff6 <_dtoa_r+0xb2e>
 8005f58:	3201      	adds	r2, #1
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e501      	b.n	8005962 <_dtoa_r+0x49a>
 8005f5e:	2a00      	cmp	r2, #0
 8005f60:	dd03      	ble.n	8005f6a <_dtoa_r+0xaa2>
 8005f62:	2b39      	cmp	r3, #57	@ 0x39
 8005f64:	d0ee      	beq.n	8005f44 <_dtoa_r+0xa7c>
 8005f66:	3301      	adds	r3, #1
 8005f68:	e7c9      	b.n	8005efe <_dtoa_r+0xa36>
 8005f6a:	9a00      	ldr	r2, [sp, #0]
 8005f6c:	9908      	ldr	r1, [sp, #32]
 8005f6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f72:	428a      	cmp	r2, r1
 8005f74:	d028      	beq.n	8005fc8 <_dtoa_r+0xb00>
 8005f76:	9902      	ldr	r1, [sp, #8]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	220a      	movs	r2, #10
 8005f7c:	4648      	mov	r0, r9
 8005f7e:	f000 f9d5 	bl	800632c <__multadd>
 8005f82:	42af      	cmp	r7, r5
 8005f84:	9002      	str	r0, [sp, #8]
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	f04f 020a 	mov.w	r2, #10
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4648      	mov	r0, r9
 8005f92:	d107      	bne.n	8005fa4 <_dtoa_r+0xadc>
 8005f94:	f000 f9ca 	bl	800632c <__multadd>
 8005f98:	4607      	mov	r7, r0
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	e777      	b.n	8005e94 <_dtoa_r+0x9cc>
 8005fa4:	f000 f9c2 	bl	800632c <__multadd>
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4607      	mov	r7, r0
 8005fac:	2300      	movs	r3, #0
 8005fae:	220a      	movs	r2, #10
 8005fb0:	4648      	mov	r0, r9
 8005fb2:	f000 f9bb 	bl	800632c <__multadd>
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	e7f0      	b.n	8005f9c <_dtoa_r+0xad4>
 8005fba:	f1bb 0f00 	cmp.w	fp, #0
 8005fbe:	bfcc      	ite	gt
 8005fc0:	465e      	movgt	r6, fp
 8005fc2:	2601      	movle	r6, #1
 8005fc4:	4456      	add	r6, sl
 8005fc6:	2700      	movs	r7, #0
 8005fc8:	9902      	ldr	r1, [sp, #8]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	4648      	mov	r0, r9
 8005fd0:	f000 fb50 	bl	8006674 <__lshift>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	9002      	str	r0, [sp, #8]
 8005fd8:	f000 fbb8 	bl	800674c <__mcmp>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	dcb4      	bgt.n	8005f4a <_dtoa_r+0xa82>
 8005fe0:	d102      	bne.n	8005fe8 <_dtoa_r+0xb20>
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	07db      	lsls	r3, r3, #31
 8005fe6:	d4b0      	bmi.n	8005f4a <_dtoa_r+0xa82>
 8005fe8:	4633      	mov	r3, r6
 8005fea:	461e      	mov	r6, r3
 8005fec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ff0:	2a30      	cmp	r2, #48	@ 0x30
 8005ff2:	d0fa      	beq.n	8005fea <_dtoa_r+0xb22>
 8005ff4:	e4b5      	b.n	8005962 <_dtoa_r+0x49a>
 8005ff6:	459a      	cmp	sl, r3
 8005ff8:	d1a8      	bne.n	8005f4c <_dtoa_r+0xa84>
 8005ffa:	2331      	movs	r3, #49	@ 0x31
 8005ffc:	f108 0801 	add.w	r8, r8, #1
 8006000:	f88a 3000 	strb.w	r3, [sl]
 8006004:	e4ad      	b.n	8005962 <_dtoa_r+0x49a>
 8006006:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006008:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006064 <_dtoa_r+0xb9c>
 800600c:	b11b      	cbz	r3, 8006016 <_dtoa_r+0xb4e>
 800600e:	f10a 0308 	add.w	r3, sl, #8
 8006012:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	4650      	mov	r0, sl
 8006018:	b017      	add	sp, #92	@ 0x5c
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	2b01      	cmp	r3, #1
 8006022:	f77f ae2e 	ble.w	8005c82 <_dtoa_r+0x7ba>
 8006026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006028:	9308      	str	r3, [sp, #32]
 800602a:	2001      	movs	r0, #1
 800602c:	e64d      	b.n	8005cca <_dtoa_r+0x802>
 800602e:	f1bb 0f00 	cmp.w	fp, #0
 8006032:	f77f aed9 	ble.w	8005de8 <_dtoa_r+0x920>
 8006036:	4656      	mov	r6, sl
 8006038:	9802      	ldr	r0, [sp, #8]
 800603a:	4621      	mov	r1, r4
 800603c:	f7ff f9bb 	bl	80053b6 <quorem>
 8006040:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006044:	f806 3b01 	strb.w	r3, [r6], #1
 8006048:	eba6 020a 	sub.w	r2, r6, sl
 800604c:	4593      	cmp	fp, r2
 800604e:	ddb4      	ble.n	8005fba <_dtoa_r+0xaf2>
 8006050:	9902      	ldr	r1, [sp, #8]
 8006052:	2300      	movs	r3, #0
 8006054:	220a      	movs	r2, #10
 8006056:	4648      	mov	r0, r9
 8006058:	f000 f968 	bl	800632c <__multadd>
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	e7eb      	b.n	8006038 <_dtoa_r+0xb70>
 8006060:	080075b4 	.word	0x080075b4
 8006064:	08007538 	.word	0x08007538

08006068 <_free_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4605      	mov	r5, r0
 800606c:	2900      	cmp	r1, #0
 800606e:	d041      	beq.n	80060f4 <_free_r+0x8c>
 8006070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006074:	1f0c      	subs	r4, r1, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfb8      	it	lt
 800607a:	18e4      	addlt	r4, r4, r3
 800607c:	f000 f8e8 	bl	8006250 <__malloc_lock>
 8006080:	4a1d      	ldr	r2, [pc, #116]	@ (80060f8 <_free_r+0x90>)
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	b933      	cbnz	r3, 8006094 <_free_r+0x2c>
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	6014      	str	r4, [r2, #0]
 800608a:	4628      	mov	r0, r5
 800608c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006090:	f000 b8e4 	b.w	800625c <__malloc_unlock>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d908      	bls.n	80060aa <_free_r+0x42>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	1821      	adds	r1, r4, r0
 800609c:	428b      	cmp	r3, r1
 800609e:	bf01      	itttt	eq
 80060a0:	6819      	ldreq	r1, [r3, #0]
 80060a2:	685b      	ldreq	r3, [r3, #4]
 80060a4:	1809      	addeq	r1, r1, r0
 80060a6:	6021      	streq	r1, [r4, #0]
 80060a8:	e7ed      	b.n	8006086 <_free_r+0x1e>
 80060aa:	461a      	mov	r2, r3
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	b10b      	cbz	r3, 80060b4 <_free_r+0x4c>
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d9fa      	bls.n	80060aa <_free_r+0x42>
 80060b4:	6811      	ldr	r1, [r2, #0]
 80060b6:	1850      	adds	r0, r2, r1
 80060b8:	42a0      	cmp	r0, r4
 80060ba:	d10b      	bne.n	80060d4 <_free_r+0x6c>
 80060bc:	6820      	ldr	r0, [r4, #0]
 80060be:	4401      	add	r1, r0
 80060c0:	1850      	adds	r0, r2, r1
 80060c2:	4283      	cmp	r3, r0
 80060c4:	6011      	str	r1, [r2, #0]
 80060c6:	d1e0      	bne.n	800608a <_free_r+0x22>
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	6053      	str	r3, [r2, #4]
 80060ce:	4408      	add	r0, r1
 80060d0:	6010      	str	r0, [r2, #0]
 80060d2:	e7da      	b.n	800608a <_free_r+0x22>
 80060d4:	d902      	bls.n	80060dc <_free_r+0x74>
 80060d6:	230c      	movs	r3, #12
 80060d8:	602b      	str	r3, [r5, #0]
 80060da:	e7d6      	b.n	800608a <_free_r+0x22>
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	1821      	adds	r1, r4, r0
 80060e0:	428b      	cmp	r3, r1
 80060e2:	bf04      	itt	eq
 80060e4:	6819      	ldreq	r1, [r3, #0]
 80060e6:	685b      	ldreq	r3, [r3, #4]
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	bf04      	itt	eq
 80060ec:	1809      	addeq	r1, r1, r0
 80060ee:	6021      	streq	r1, [r4, #0]
 80060f0:	6054      	str	r4, [r2, #4]
 80060f2:	e7ca      	b.n	800608a <_free_r+0x22>
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
 80060f6:	bf00      	nop
 80060f8:	20000510 	.word	0x20000510

080060fc <malloc>:
 80060fc:	4b02      	ldr	r3, [pc, #8]	@ (8006108 <malloc+0xc>)
 80060fe:	4601      	mov	r1, r0
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f000 b825 	b.w	8006150 <_malloc_r>
 8006106:	bf00      	nop
 8006108:	20000024 	.word	0x20000024

0800610c <sbrk_aligned>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4e0f      	ldr	r6, [pc, #60]	@ (800614c <sbrk_aligned+0x40>)
 8006110:	460c      	mov	r4, r1
 8006112:	6831      	ldr	r1, [r6, #0]
 8006114:	4605      	mov	r5, r0
 8006116:	b911      	cbnz	r1, 800611e <sbrk_aligned+0x12>
 8006118:	f000 fe3e 	bl	8006d98 <_sbrk_r>
 800611c:	6030      	str	r0, [r6, #0]
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f000 fe39 	bl	8006d98 <_sbrk_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d103      	bne.n	8006132 <sbrk_aligned+0x26>
 800612a:	f04f 34ff 	mov.w	r4, #4294967295
 800612e:	4620      	mov	r0, r4
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	1cc4      	adds	r4, r0, #3
 8006134:	f024 0403 	bic.w	r4, r4, #3
 8006138:	42a0      	cmp	r0, r4
 800613a:	d0f8      	beq.n	800612e <sbrk_aligned+0x22>
 800613c:	1a21      	subs	r1, r4, r0
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fe2a 	bl	8006d98 <_sbrk_r>
 8006144:	3001      	adds	r0, #1
 8006146:	d1f2      	bne.n	800612e <sbrk_aligned+0x22>
 8006148:	e7ef      	b.n	800612a <sbrk_aligned+0x1e>
 800614a:	bf00      	nop
 800614c:	2000050c 	.word	0x2000050c

08006150 <_malloc_r>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	1ccd      	adds	r5, r1, #3
 8006156:	f025 0503 	bic.w	r5, r5, #3
 800615a:	3508      	adds	r5, #8
 800615c:	2d0c      	cmp	r5, #12
 800615e:	bf38      	it	cc
 8006160:	250c      	movcc	r5, #12
 8006162:	2d00      	cmp	r5, #0
 8006164:	4606      	mov	r6, r0
 8006166:	db01      	blt.n	800616c <_malloc_r+0x1c>
 8006168:	42a9      	cmp	r1, r5
 800616a:	d904      	bls.n	8006176 <_malloc_r+0x26>
 800616c:	230c      	movs	r3, #12
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	2000      	movs	r0, #0
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800624c <_malloc_r+0xfc>
 800617a:	f000 f869 	bl	8006250 <__malloc_lock>
 800617e:	f8d8 3000 	ldr.w	r3, [r8]
 8006182:	461c      	mov	r4, r3
 8006184:	bb44      	cbnz	r4, 80061d8 <_malloc_r+0x88>
 8006186:	4629      	mov	r1, r5
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff ffbf 	bl	800610c <sbrk_aligned>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	4604      	mov	r4, r0
 8006192:	d158      	bne.n	8006246 <_malloc_r+0xf6>
 8006194:	f8d8 4000 	ldr.w	r4, [r8]
 8006198:	4627      	mov	r7, r4
 800619a:	2f00      	cmp	r7, #0
 800619c:	d143      	bne.n	8006226 <_malloc_r+0xd6>
 800619e:	2c00      	cmp	r4, #0
 80061a0:	d04b      	beq.n	800623a <_malloc_r+0xea>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4639      	mov	r1, r7
 80061a6:	4630      	mov	r0, r6
 80061a8:	eb04 0903 	add.w	r9, r4, r3
 80061ac:	f000 fdf4 	bl	8006d98 <_sbrk_r>
 80061b0:	4581      	cmp	r9, r0
 80061b2:	d142      	bne.n	800623a <_malloc_r+0xea>
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	1a6d      	subs	r5, r5, r1
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffa6 	bl	800610c <sbrk_aligned>
 80061c0:	3001      	adds	r0, #1
 80061c2:	d03a      	beq.n	800623a <_malloc_r+0xea>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	442b      	add	r3, r5
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	f8d8 3000 	ldr.w	r3, [r8]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	bb62      	cbnz	r2, 800622c <_malloc_r+0xdc>
 80061d2:	f8c8 7000 	str.w	r7, [r8]
 80061d6:	e00f      	b.n	80061f8 <_malloc_r+0xa8>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	1b52      	subs	r2, r2, r5
 80061dc:	d420      	bmi.n	8006220 <_malloc_r+0xd0>
 80061de:	2a0b      	cmp	r2, #11
 80061e0:	d917      	bls.n	8006212 <_malloc_r+0xc2>
 80061e2:	1961      	adds	r1, r4, r5
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	6025      	str	r5, [r4, #0]
 80061e8:	bf18      	it	ne
 80061ea:	6059      	strne	r1, [r3, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	bf08      	it	eq
 80061f0:	f8c8 1000 	streq.w	r1, [r8]
 80061f4:	5162      	str	r2, [r4, r5]
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 f82f 	bl	800625c <__malloc_unlock>
 80061fe:	f104 000b 	add.w	r0, r4, #11
 8006202:	1d23      	adds	r3, r4, #4
 8006204:	f020 0007 	bic.w	r0, r0, #7
 8006208:	1ac2      	subs	r2, r0, r3
 800620a:	bf1c      	itt	ne
 800620c:	1a1b      	subne	r3, r3, r0
 800620e:	50a3      	strne	r3, [r4, r2]
 8006210:	e7af      	b.n	8006172 <_malloc_r+0x22>
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	bf0c      	ite	eq
 8006218:	f8c8 2000 	streq.w	r2, [r8]
 800621c:	605a      	strne	r2, [r3, #4]
 800621e:	e7eb      	b.n	80061f8 <_malloc_r+0xa8>
 8006220:	4623      	mov	r3, r4
 8006222:	6864      	ldr	r4, [r4, #4]
 8006224:	e7ae      	b.n	8006184 <_malloc_r+0x34>
 8006226:	463c      	mov	r4, r7
 8006228:	687f      	ldr	r7, [r7, #4]
 800622a:	e7b6      	b.n	800619a <_malloc_r+0x4a>
 800622c:	461a      	mov	r2, r3
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	42a3      	cmp	r3, r4
 8006232:	d1fb      	bne.n	800622c <_malloc_r+0xdc>
 8006234:	2300      	movs	r3, #0
 8006236:	6053      	str	r3, [r2, #4]
 8006238:	e7de      	b.n	80061f8 <_malloc_r+0xa8>
 800623a:	230c      	movs	r3, #12
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f80c 	bl	800625c <__malloc_unlock>
 8006244:	e794      	b.n	8006170 <_malloc_r+0x20>
 8006246:	6005      	str	r5, [r0, #0]
 8006248:	e7d6      	b.n	80061f8 <_malloc_r+0xa8>
 800624a:	bf00      	nop
 800624c:	20000510 	.word	0x20000510

08006250 <__malloc_lock>:
 8006250:	4801      	ldr	r0, [pc, #4]	@ (8006258 <__malloc_lock+0x8>)
 8006252:	f7ff b8ae 	b.w	80053b2 <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	20000508 	.word	0x20000508

0800625c <__malloc_unlock>:
 800625c:	4801      	ldr	r0, [pc, #4]	@ (8006264 <__malloc_unlock+0x8>)
 800625e:	f7ff b8a9 	b.w	80053b4 <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	20000508 	.word	0x20000508

08006268 <_Balloc>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	69c6      	ldr	r6, [r0, #28]
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	b976      	cbnz	r6, 8006290 <_Balloc+0x28>
 8006272:	2010      	movs	r0, #16
 8006274:	f7ff ff42 	bl	80060fc <malloc>
 8006278:	4602      	mov	r2, r0
 800627a:	61e0      	str	r0, [r4, #28]
 800627c:	b920      	cbnz	r0, 8006288 <_Balloc+0x20>
 800627e:	4b18      	ldr	r3, [pc, #96]	@ (80062e0 <_Balloc+0x78>)
 8006280:	4818      	ldr	r0, [pc, #96]	@ (80062e4 <_Balloc+0x7c>)
 8006282:	216b      	movs	r1, #107	@ 0x6b
 8006284:	f000 fda6 	bl	8006dd4 <__assert_func>
 8006288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800628c:	6006      	str	r6, [r0, #0]
 800628e:	60c6      	str	r6, [r0, #12]
 8006290:	69e6      	ldr	r6, [r4, #28]
 8006292:	68f3      	ldr	r3, [r6, #12]
 8006294:	b183      	cbz	r3, 80062b8 <_Balloc+0x50>
 8006296:	69e3      	ldr	r3, [r4, #28]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800629e:	b9b8      	cbnz	r0, 80062d0 <_Balloc+0x68>
 80062a0:	2101      	movs	r1, #1
 80062a2:	fa01 f605 	lsl.w	r6, r1, r5
 80062a6:	1d72      	adds	r2, r6, #5
 80062a8:	0092      	lsls	r2, r2, #2
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 fdb0 	bl	8006e10 <_calloc_r>
 80062b0:	b160      	cbz	r0, 80062cc <_Balloc+0x64>
 80062b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062b6:	e00e      	b.n	80062d6 <_Balloc+0x6e>
 80062b8:	2221      	movs	r2, #33	@ 0x21
 80062ba:	2104      	movs	r1, #4
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fda7 	bl	8006e10 <_calloc_r>
 80062c2:	69e3      	ldr	r3, [r4, #28]
 80062c4:	60f0      	str	r0, [r6, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e4      	bne.n	8006296 <_Balloc+0x2e>
 80062cc:	2000      	movs	r0, #0
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	6802      	ldr	r2, [r0, #0]
 80062d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062d6:	2300      	movs	r3, #0
 80062d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062dc:	e7f7      	b.n	80062ce <_Balloc+0x66>
 80062de:	bf00      	nop
 80062e0:	08007545 	.word	0x08007545
 80062e4:	080075c5 	.word	0x080075c5

080062e8 <_Bfree>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	69c6      	ldr	r6, [r0, #28]
 80062ec:	4605      	mov	r5, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b976      	cbnz	r6, 8006310 <_Bfree+0x28>
 80062f2:	2010      	movs	r0, #16
 80062f4:	f7ff ff02 	bl	80060fc <malloc>
 80062f8:	4602      	mov	r2, r0
 80062fa:	61e8      	str	r0, [r5, #28]
 80062fc:	b920      	cbnz	r0, 8006308 <_Bfree+0x20>
 80062fe:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <_Bfree+0x3c>)
 8006300:	4809      	ldr	r0, [pc, #36]	@ (8006328 <_Bfree+0x40>)
 8006302:	218f      	movs	r1, #143	@ 0x8f
 8006304:	f000 fd66 	bl	8006dd4 <__assert_func>
 8006308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800630c:	6006      	str	r6, [r0, #0]
 800630e:	60c6      	str	r6, [r0, #12]
 8006310:	b13c      	cbz	r4, 8006322 <_Bfree+0x3a>
 8006312:	69eb      	ldr	r3, [r5, #28]
 8006314:	6862      	ldr	r2, [r4, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800631c:	6021      	str	r1, [r4, #0]
 800631e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	08007545 	.word	0x08007545
 8006328:	080075c5 	.word	0x080075c5

0800632c <__multadd>:
 800632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006330:	690d      	ldr	r5, [r1, #16]
 8006332:	4607      	mov	r7, r0
 8006334:	460c      	mov	r4, r1
 8006336:	461e      	mov	r6, r3
 8006338:	f101 0c14 	add.w	ip, r1, #20
 800633c:	2000      	movs	r0, #0
 800633e:	f8dc 3000 	ldr.w	r3, [ip]
 8006342:	b299      	uxth	r1, r3
 8006344:	fb02 6101 	mla	r1, r2, r1, r6
 8006348:	0c1e      	lsrs	r6, r3, #16
 800634a:	0c0b      	lsrs	r3, r1, #16
 800634c:	fb02 3306 	mla	r3, r2, r6, r3
 8006350:	b289      	uxth	r1, r1
 8006352:	3001      	adds	r0, #1
 8006354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006358:	4285      	cmp	r5, r0
 800635a:	f84c 1b04 	str.w	r1, [ip], #4
 800635e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006362:	dcec      	bgt.n	800633e <__multadd+0x12>
 8006364:	b30e      	cbz	r6, 80063aa <__multadd+0x7e>
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	42ab      	cmp	r3, r5
 800636a:	dc19      	bgt.n	80063a0 <__multadd+0x74>
 800636c:	6861      	ldr	r1, [r4, #4]
 800636e:	4638      	mov	r0, r7
 8006370:	3101      	adds	r1, #1
 8006372:	f7ff ff79 	bl	8006268 <_Balloc>
 8006376:	4680      	mov	r8, r0
 8006378:	b928      	cbnz	r0, 8006386 <__multadd+0x5a>
 800637a:	4602      	mov	r2, r0
 800637c:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <__multadd+0x84>)
 800637e:	480d      	ldr	r0, [pc, #52]	@ (80063b4 <__multadd+0x88>)
 8006380:	21ba      	movs	r1, #186	@ 0xba
 8006382:	f000 fd27 	bl	8006dd4 <__assert_func>
 8006386:	6922      	ldr	r2, [r4, #16]
 8006388:	3202      	adds	r2, #2
 800638a:	f104 010c 	add.w	r1, r4, #12
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	300c      	adds	r0, #12
 8006392:	f000 fd11 	bl	8006db8 <memcpy>
 8006396:	4621      	mov	r1, r4
 8006398:	4638      	mov	r0, r7
 800639a:	f7ff ffa5 	bl	80062e8 <_Bfree>
 800639e:	4644      	mov	r4, r8
 80063a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063a4:	3501      	adds	r5, #1
 80063a6:	615e      	str	r6, [r3, #20]
 80063a8:	6125      	str	r5, [r4, #16]
 80063aa:	4620      	mov	r0, r4
 80063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b0:	080075b4 	.word	0x080075b4
 80063b4:	080075c5 	.word	0x080075c5

080063b8 <__hi0bits>:
 80063b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063bc:	4603      	mov	r3, r0
 80063be:	bf36      	itet	cc
 80063c0:	0403      	lslcc	r3, r0, #16
 80063c2:	2000      	movcs	r0, #0
 80063c4:	2010      	movcc	r0, #16
 80063c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063ca:	bf3c      	itt	cc
 80063cc:	021b      	lslcc	r3, r3, #8
 80063ce:	3008      	addcc	r0, #8
 80063d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063d4:	bf3c      	itt	cc
 80063d6:	011b      	lslcc	r3, r3, #4
 80063d8:	3004      	addcc	r0, #4
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063de:	bf3c      	itt	cc
 80063e0:	009b      	lslcc	r3, r3, #2
 80063e2:	3002      	addcc	r0, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	db05      	blt.n	80063f4 <__hi0bits+0x3c>
 80063e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063ec:	f100 0001 	add.w	r0, r0, #1
 80063f0:	bf08      	it	eq
 80063f2:	2020      	moveq	r0, #32
 80063f4:	4770      	bx	lr

080063f6 <__lo0bits>:
 80063f6:	6803      	ldr	r3, [r0, #0]
 80063f8:	4602      	mov	r2, r0
 80063fa:	f013 0007 	ands.w	r0, r3, #7
 80063fe:	d00b      	beq.n	8006418 <__lo0bits+0x22>
 8006400:	07d9      	lsls	r1, r3, #31
 8006402:	d421      	bmi.n	8006448 <__lo0bits+0x52>
 8006404:	0798      	lsls	r0, r3, #30
 8006406:	bf49      	itett	mi
 8006408:	085b      	lsrmi	r3, r3, #1
 800640a:	089b      	lsrpl	r3, r3, #2
 800640c:	2001      	movmi	r0, #1
 800640e:	6013      	strmi	r3, [r2, #0]
 8006410:	bf5c      	itt	pl
 8006412:	6013      	strpl	r3, [r2, #0]
 8006414:	2002      	movpl	r0, #2
 8006416:	4770      	bx	lr
 8006418:	b299      	uxth	r1, r3
 800641a:	b909      	cbnz	r1, 8006420 <__lo0bits+0x2a>
 800641c:	0c1b      	lsrs	r3, r3, #16
 800641e:	2010      	movs	r0, #16
 8006420:	b2d9      	uxtb	r1, r3
 8006422:	b909      	cbnz	r1, 8006428 <__lo0bits+0x32>
 8006424:	3008      	adds	r0, #8
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	0719      	lsls	r1, r3, #28
 800642a:	bf04      	itt	eq
 800642c:	091b      	lsreq	r3, r3, #4
 800642e:	3004      	addeq	r0, #4
 8006430:	0799      	lsls	r1, r3, #30
 8006432:	bf04      	itt	eq
 8006434:	089b      	lsreq	r3, r3, #2
 8006436:	3002      	addeq	r0, #2
 8006438:	07d9      	lsls	r1, r3, #31
 800643a:	d403      	bmi.n	8006444 <__lo0bits+0x4e>
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	f100 0001 	add.w	r0, r0, #1
 8006442:	d003      	beq.n	800644c <__lo0bits+0x56>
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4770      	bx	lr
 8006448:	2000      	movs	r0, #0
 800644a:	4770      	bx	lr
 800644c:	2020      	movs	r0, #32
 800644e:	4770      	bx	lr

08006450 <__i2b>:
 8006450:	b510      	push	{r4, lr}
 8006452:	460c      	mov	r4, r1
 8006454:	2101      	movs	r1, #1
 8006456:	f7ff ff07 	bl	8006268 <_Balloc>
 800645a:	4602      	mov	r2, r0
 800645c:	b928      	cbnz	r0, 800646a <__i2b+0x1a>
 800645e:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <__i2b+0x24>)
 8006460:	4805      	ldr	r0, [pc, #20]	@ (8006478 <__i2b+0x28>)
 8006462:	f240 1145 	movw	r1, #325	@ 0x145
 8006466:	f000 fcb5 	bl	8006dd4 <__assert_func>
 800646a:	2301      	movs	r3, #1
 800646c:	6144      	str	r4, [r0, #20]
 800646e:	6103      	str	r3, [r0, #16]
 8006470:	bd10      	pop	{r4, pc}
 8006472:	bf00      	nop
 8006474:	080075b4 	.word	0x080075b4
 8006478:	080075c5 	.word	0x080075c5

0800647c <__multiply>:
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	4617      	mov	r7, r2
 8006482:	690a      	ldr	r2, [r1, #16]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	429a      	cmp	r2, r3
 8006488:	bfa8      	it	ge
 800648a:	463b      	movge	r3, r7
 800648c:	4689      	mov	r9, r1
 800648e:	bfa4      	itt	ge
 8006490:	460f      	movge	r7, r1
 8006492:	4699      	movge	r9, r3
 8006494:	693d      	ldr	r5, [r7, #16]
 8006496:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	eb05 060a 	add.w	r6, r5, sl
 80064a2:	42b3      	cmp	r3, r6
 80064a4:	b085      	sub	sp, #20
 80064a6:	bfb8      	it	lt
 80064a8:	3101      	addlt	r1, #1
 80064aa:	f7ff fedd 	bl	8006268 <_Balloc>
 80064ae:	b930      	cbnz	r0, 80064be <__multiply+0x42>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b41      	ldr	r3, [pc, #260]	@ (80065b8 <__multiply+0x13c>)
 80064b4:	4841      	ldr	r0, [pc, #260]	@ (80065bc <__multiply+0x140>)
 80064b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064ba:	f000 fc8b 	bl	8006dd4 <__assert_func>
 80064be:	f100 0414 	add.w	r4, r0, #20
 80064c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80064c6:	4623      	mov	r3, r4
 80064c8:	2200      	movs	r2, #0
 80064ca:	4573      	cmp	r3, lr
 80064cc:	d320      	bcc.n	8006510 <__multiply+0x94>
 80064ce:	f107 0814 	add.w	r8, r7, #20
 80064d2:	f109 0114 	add.w	r1, r9, #20
 80064d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80064da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80064de:	9302      	str	r3, [sp, #8]
 80064e0:	1beb      	subs	r3, r5, r7
 80064e2:	3b15      	subs	r3, #21
 80064e4:	f023 0303 	bic.w	r3, r3, #3
 80064e8:	3304      	adds	r3, #4
 80064ea:	3715      	adds	r7, #21
 80064ec:	42bd      	cmp	r5, r7
 80064ee:	bf38      	it	cc
 80064f0:	2304      	movcc	r3, #4
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	9b02      	ldr	r3, [sp, #8]
 80064f6:	9103      	str	r1, [sp, #12]
 80064f8:	428b      	cmp	r3, r1
 80064fa:	d80c      	bhi.n	8006516 <__multiply+0x9a>
 80064fc:	2e00      	cmp	r6, #0
 80064fe:	dd03      	ble.n	8006508 <__multiply+0x8c>
 8006500:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006504:	2b00      	cmp	r3, #0
 8006506:	d055      	beq.n	80065b4 <__multiply+0x138>
 8006508:	6106      	str	r6, [r0, #16]
 800650a:	b005      	add	sp, #20
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006510:	f843 2b04 	str.w	r2, [r3], #4
 8006514:	e7d9      	b.n	80064ca <__multiply+0x4e>
 8006516:	f8b1 a000 	ldrh.w	sl, [r1]
 800651a:	f1ba 0f00 	cmp.w	sl, #0
 800651e:	d01f      	beq.n	8006560 <__multiply+0xe4>
 8006520:	46c4      	mov	ip, r8
 8006522:	46a1      	mov	r9, r4
 8006524:	2700      	movs	r7, #0
 8006526:	f85c 2b04 	ldr.w	r2, [ip], #4
 800652a:	f8d9 3000 	ldr.w	r3, [r9]
 800652e:	fa1f fb82 	uxth.w	fp, r2
 8006532:	b29b      	uxth	r3, r3
 8006534:	fb0a 330b 	mla	r3, sl, fp, r3
 8006538:	443b      	add	r3, r7
 800653a:	f8d9 7000 	ldr.w	r7, [r9]
 800653e:	0c12      	lsrs	r2, r2, #16
 8006540:	0c3f      	lsrs	r7, r7, #16
 8006542:	fb0a 7202 	mla	r2, sl, r2, r7
 8006546:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800654a:	b29b      	uxth	r3, r3
 800654c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006550:	4565      	cmp	r5, ip
 8006552:	f849 3b04 	str.w	r3, [r9], #4
 8006556:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800655a:	d8e4      	bhi.n	8006526 <__multiply+0xaa>
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	50e7      	str	r7, [r4, r3]
 8006560:	9b03      	ldr	r3, [sp, #12]
 8006562:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006566:	3104      	adds	r1, #4
 8006568:	f1b9 0f00 	cmp.w	r9, #0
 800656c:	d020      	beq.n	80065b0 <__multiply+0x134>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	4647      	mov	r7, r8
 8006572:	46a4      	mov	ip, r4
 8006574:	f04f 0a00 	mov.w	sl, #0
 8006578:	f8b7 b000 	ldrh.w	fp, [r7]
 800657c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006580:	fb09 220b 	mla	r2, r9, fp, r2
 8006584:	4452      	add	r2, sl
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800658c:	f84c 3b04 	str.w	r3, [ip], #4
 8006590:	f857 3b04 	ldr.w	r3, [r7], #4
 8006594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006598:	f8bc 3000 	ldrh.w	r3, [ip]
 800659c:	fb09 330a 	mla	r3, r9, sl, r3
 80065a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80065a4:	42bd      	cmp	r5, r7
 80065a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065aa:	d8e5      	bhi.n	8006578 <__multiply+0xfc>
 80065ac:	9a01      	ldr	r2, [sp, #4]
 80065ae:	50a3      	str	r3, [r4, r2]
 80065b0:	3404      	adds	r4, #4
 80065b2:	e79f      	b.n	80064f4 <__multiply+0x78>
 80065b4:	3e01      	subs	r6, #1
 80065b6:	e7a1      	b.n	80064fc <__multiply+0x80>
 80065b8:	080075b4 	.word	0x080075b4
 80065bc:	080075c5 	.word	0x080075c5

080065c0 <__pow5mult>:
 80065c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c4:	4615      	mov	r5, r2
 80065c6:	f012 0203 	ands.w	r2, r2, #3
 80065ca:	4607      	mov	r7, r0
 80065cc:	460e      	mov	r6, r1
 80065ce:	d007      	beq.n	80065e0 <__pow5mult+0x20>
 80065d0:	4c25      	ldr	r4, [pc, #148]	@ (8006668 <__pow5mult+0xa8>)
 80065d2:	3a01      	subs	r2, #1
 80065d4:	2300      	movs	r3, #0
 80065d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065da:	f7ff fea7 	bl	800632c <__multadd>
 80065de:	4606      	mov	r6, r0
 80065e0:	10ad      	asrs	r5, r5, #2
 80065e2:	d03d      	beq.n	8006660 <__pow5mult+0xa0>
 80065e4:	69fc      	ldr	r4, [r7, #28]
 80065e6:	b97c      	cbnz	r4, 8006608 <__pow5mult+0x48>
 80065e8:	2010      	movs	r0, #16
 80065ea:	f7ff fd87 	bl	80060fc <malloc>
 80065ee:	4602      	mov	r2, r0
 80065f0:	61f8      	str	r0, [r7, #28]
 80065f2:	b928      	cbnz	r0, 8006600 <__pow5mult+0x40>
 80065f4:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <__pow5mult+0xac>)
 80065f6:	481e      	ldr	r0, [pc, #120]	@ (8006670 <__pow5mult+0xb0>)
 80065f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80065fc:	f000 fbea 	bl	8006dd4 <__assert_func>
 8006600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006604:	6004      	str	r4, [r0, #0]
 8006606:	60c4      	str	r4, [r0, #12]
 8006608:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800660c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006610:	b94c      	cbnz	r4, 8006626 <__pow5mult+0x66>
 8006612:	f240 2171 	movw	r1, #625	@ 0x271
 8006616:	4638      	mov	r0, r7
 8006618:	f7ff ff1a 	bl	8006450 <__i2b>
 800661c:	2300      	movs	r3, #0
 800661e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006622:	4604      	mov	r4, r0
 8006624:	6003      	str	r3, [r0, #0]
 8006626:	f04f 0900 	mov.w	r9, #0
 800662a:	07eb      	lsls	r3, r5, #31
 800662c:	d50a      	bpl.n	8006644 <__pow5mult+0x84>
 800662e:	4631      	mov	r1, r6
 8006630:	4622      	mov	r2, r4
 8006632:	4638      	mov	r0, r7
 8006634:	f7ff ff22 	bl	800647c <__multiply>
 8006638:	4631      	mov	r1, r6
 800663a:	4680      	mov	r8, r0
 800663c:	4638      	mov	r0, r7
 800663e:	f7ff fe53 	bl	80062e8 <_Bfree>
 8006642:	4646      	mov	r6, r8
 8006644:	106d      	asrs	r5, r5, #1
 8006646:	d00b      	beq.n	8006660 <__pow5mult+0xa0>
 8006648:	6820      	ldr	r0, [r4, #0]
 800664a:	b938      	cbnz	r0, 800665c <__pow5mult+0x9c>
 800664c:	4622      	mov	r2, r4
 800664e:	4621      	mov	r1, r4
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff ff13 	bl	800647c <__multiply>
 8006656:	6020      	str	r0, [r4, #0]
 8006658:	f8c0 9000 	str.w	r9, [r0]
 800665c:	4604      	mov	r4, r0
 800665e:	e7e4      	b.n	800662a <__pow5mult+0x6a>
 8006660:	4630      	mov	r0, r6
 8006662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006666:	bf00      	nop
 8006668:	08007678 	.word	0x08007678
 800666c:	08007545 	.word	0x08007545
 8006670:	080075c5 	.word	0x080075c5

08006674 <__lshift>:
 8006674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	460c      	mov	r4, r1
 800667a:	6849      	ldr	r1, [r1, #4]
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	4607      	mov	r7, r0
 8006686:	4691      	mov	r9, r2
 8006688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800668c:	f108 0601 	add.w	r6, r8, #1
 8006690:	42b3      	cmp	r3, r6
 8006692:	db0b      	blt.n	80066ac <__lshift+0x38>
 8006694:	4638      	mov	r0, r7
 8006696:	f7ff fde7 	bl	8006268 <_Balloc>
 800669a:	4605      	mov	r5, r0
 800669c:	b948      	cbnz	r0, 80066b2 <__lshift+0x3e>
 800669e:	4602      	mov	r2, r0
 80066a0:	4b28      	ldr	r3, [pc, #160]	@ (8006744 <__lshift+0xd0>)
 80066a2:	4829      	ldr	r0, [pc, #164]	@ (8006748 <__lshift+0xd4>)
 80066a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066a8:	f000 fb94 	bl	8006dd4 <__assert_func>
 80066ac:	3101      	adds	r1, #1
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	e7ee      	b.n	8006690 <__lshift+0x1c>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f100 0114 	add.w	r1, r0, #20
 80066b8:	f100 0210 	add.w	r2, r0, #16
 80066bc:	4618      	mov	r0, r3
 80066be:	4553      	cmp	r3, sl
 80066c0:	db33      	blt.n	800672a <__lshift+0xb6>
 80066c2:	6920      	ldr	r0, [r4, #16]
 80066c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066c8:	f104 0314 	add.w	r3, r4, #20
 80066cc:	f019 091f 	ands.w	r9, r9, #31
 80066d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066d8:	d02b      	beq.n	8006732 <__lshift+0xbe>
 80066da:	f1c9 0e20 	rsb	lr, r9, #32
 80066de:	468a      	mov	sl, r1
 80066e0:	2200      	movs	r2, #0
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	fa00 f009 	lsl.w	r0, r0, r9
 80066e8:	4310      	orrs	r0, r2
 80066ea:	f84a 0b04 	str.w	r0, [sl], #4
 80066ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f2:	459c      	cmp	ip, r3
 80066f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80066f8:	d8f3      	bhi.n	80066e2 <__lshift+0x6e>
 80066fa:	ebac 0304 	sub.w	r3, ip, r4
 80066fe:	3b15      	subs	r3, #21
 8006700:	f023 0303 	bic.w	r3, r3, #3
 8006704:	3304      	adds	r3, #4
 8006706:	f104 0015 	add.w	r0, r4, #21
 800670a:	4560      	cmp	r0, ip
 800670c:	bf88      	it	hi
 800670e:	2304      	movhi	r3, #4
 8006710:	50ca      	str	r2, [r1, r3]
 8006712:	b10a      	cbz	r2, 8006718 <__lshift+0xa4>
 8006714:	f108 0602 	add.w	r6, r8, #2
 8006718:	3e01      	subs	r6, #1
 800671a:	4638      	mov	r0, r7
 800671c:	612e      	str	r6, [r5, #16]
 800671e:	4621      	mov	r1, r4
 8006720:	f7ff fde2 	bl	80062e8 <_Bfree>
 8006724:	4628      	mov	r0, r5
 8006726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672a:	f842 0f04 	str.w	r0, [r2, #4]!
 800672e:	3301      	adds	r3, #1
 8006730:	e7c5      	b.n	80066be <__lshift+0x4a>
 8006732:	3904      	subs	r1, #4
 8006734:	f853 2b04 	ldr.w	r2, [r3], #4
 8006738:	f841 2f04 	str.w	r2, [r1, #4]!
 800673c:	459c      	cmp	ip, r3
 800673e:	d8f9      	bhi.n	8006734 <__lshift+0xc0>
 8006740:	e7ea      	b.n	8006718 <__lshift+0xa4>
 8006742:	bf00      	nop
 8006744:	080075b4 	.word	0x080075b4
 8006748:	080075c5 	.word	0x080075c5

0800674c <__mcmp>:
 800674c:	690a      	ldr	r2, [r1, #16]
 800674e:	4603      	mov	r3, r0
 8006750:	6900      	ldr	r0, [r0, #16]
 8006752:	1a80      	subs	r0, r0, r2
 8006754:	b530      	push	{r4, r5, lr}
 8006756:	d10e      	bne.n	8006776 <__mcmp+0x2a>
 8006758:	3314      	adds	r3, #20
 800675a:	3114      	adds	r1, #20
 800675c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006760:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006764:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006768:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800676c:	4295      	cmp	r5, r2
 800676e:	d003      	beq.n	8006778 <__mcmp+0x2c>
 8006770:	d205      	bcs.n	800677e <__mcmp+0x32>
 8006772:	f04f 30ff 	mov.w	r0, #4294967295
 8006776:	bd30      	pop	{r4, r5, pc}
 8006778:	42a3      	cmp	r3, r4
 800677a:	d3f3      	bcc.n	8006764 <__mcmp+0x18>
 800677c:	e7fb      	b.n	8006776 <__mcmp+0x2a>
 800677e:	2001      	movs	r0, #1
 8006780:	e7f9      	b.n	8006776 <__mcmp+0x2a>
	...

08006784 <__mdiff>:
 8006784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	4689      	mov	r9, r1
 800678a:	4606      	mov	r6, r0
 800678c:	4611      	mov	r1, r2
 800678e:	4648      	mov	r0, r9
 8006790:	4614      	mov	r4, r2
 8006792:	f7ff ffdb 	bl	800674c <__mcmp>
 8006796:	1e05      	subs	r5, r0, #0
 8006798:	d112      	bne.n	80067c0 <__mdiff+0x3c>
 800679a:	4629      	mov	r1, r5
 800679c:	4630      	mov	r0, r6
 800679e:	f7ff fd63 	bl	8006268 <_Balloc>
 80067a2:	4602      	mov	r2, r0
 80067a4:	b928      	cbnz	r0, 80067b2 <__mdiff+0x2e>
 80067a6:	4b3f      	ldr	r3, [pc, #252]	@ (80068a4 <__mdiff+0x120>)
 80067a8:	f240 2137 	movw	r1, #567	@ 0x237
 80067ac:	483e      	ldr	r0, [pc, #248]	@ (80068a8 <__mdiff+0x124>)
 80067ae:	f000 fb11 	bl	8006dd4 <__assert_func>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067b8:	4610      	mov	r0, r2
 80067ba:	b003      	add	sp, #12
 80067bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c0:	bfbc      	itt	lt
 80067c2:	464b      	movlt	r3, r9
 80067c4:	46a1      	movlt	r9, r4
 80067c6:	4630      	mov	r0, r6
 80067c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067cc:	bfba      	itte	lt
 80067ce:	461c      	movlt	r4, r3
 80067d0:	2501      	movlt	r5, #1
 80067d2:	2500      	movge	r5, #0
 80067d4:	f7ff fd48 	bl	8006268 <_Balloc>
 80067d8:	4602      	mov	r2, r0
 80067da:	b918      	cbnz	r0, 80067e4 <__mdiff+0x60>
 80067dc:	4b31      	ldr	r3, [pc, #196]	@ (80068a4 <__mdiff+0x120>)
 80067de:	f240 2145 	movw	r1, #581	@ 0x245
 80067e2:	e7e3      	b.n	80067ac <__mdiff+0x28>
 80067e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067e8:	6926      	ldr	r6, [r4, #16]
 80067ea:	60c5      	str	r5, [r0, #12]
 80067ec:	f109 0310 	add.w	r3, r9, #16
 80067f0:	f109 0514 	add.w	r5, r9, #20
 80067f4:	f104 0e14 	add.w	lr, r4, #20
 80067f8:	f100 0b14 	add.w	fp, r0, #20
 80067fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006800:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	46d9      	mov	r9, fp
 8006808:	f04f 0c00 	mov.w	ip, #0
 800680c:	9b01      	ldr	r3, [sp, #4]
 800680e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006812:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	fa1f f38a 	uxth.w	r3, sl
 800681c:	4619      	mov	r1, r3
 800681e:	b283      	uxth	r3, r0
 8006820:	1acb      	subs	r3, r1, r3
 8006822:	0c00      	lsrs	r0, r0, #16
 8006824:	4463      	add	r3, ip
 8006826:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800682a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006834:	4576      	cmp	r6, lr
 8006836:	f849 3b04 	str.w	r3, [r9], #4
 800683a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800683e:	d8e5      	bhi.n	800680c <__mdiff+0x88>
 8006840:	1b33      	subs	r3, r6, r4
 8006842:	3b15      	subs	r3, #21
 8006844:	f023 0303 	bic.w	r3, r3, #3
 8006848:	3415      	adds	r4, #21
 800684a:	3304      	adds	r3, #4
 800684c:	42a6      	cmp	r6, r4
 800684e:	bf38      	it	cc
 8006850:	2304      	movcc	r3, #4
 8006852:	441d      	add	r5, r3
 8006854:	445b      	add	r3, fp
 8006856:	461e      	mov	r6, r3
 8006858:	462c      	mov	r4, r5
 800685a:	4544      	cmp	r4, r8
 800685c:	d30e      	bcc.n	800687c <__mdiff+0xf8>
 800685e:	f108 0103 	add.w	r1, r8, #3
 8006862:	1b49      	subs	r1, r1, r5
 8006864:	f021 0103 	bic.w	r1, r1, #3
 8006868:	3d03      	subs	r5, #3
 800686a:	45a8      	cmp	r8, r5
 800686c:	bf38      	it	cc
 800686e:	2100      	movcc	r1, #0
 8006870:	440b      	add	r3, r1
 8006872:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006876:	b191      	cbz	r1, 800689e <__mdiff+0x11a>
 8006878:	6117      	str	r7, [r2, #16]
 800687a:	e79d      	b.n	80067b8 <__mdiff+0x34>
 800687c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006880:	46e6      	mov	lr, ip
 8006882:	0c08      	lsrs	r0, r1, #16
 8006884:	fa1c fc81 	uxtah	ip, ip, r1
 8006888:	4471      	add	r1, lr
 800688a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800688e:	b289      	uxth	r1, r1
 8006890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006894:	f846 1b04 	str.w	r1, [r6], #4
 8006898:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800689c:	e7dd      	b.n	800685a <__mdiff+0xd6>
 800689e:	3f01      	subs	r7, #1
 80068a0:	e7e7      	b.n	8006872 <__mdiff+0xee>
 80068a2:	bf00      	nop
 80068a4:	080075b4 	.word	0x080075b4
 80068a8:	080075c5 	.word	0x080075c5

080068ac <__d2b>:
 80068ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068b0:	460f      	mov	r7, r1
 80068b2:	2101      	movs	r1, #1
 80068b4:	ec59 8b10 	vmov	r8, r9, d0
 80068b8:	4616      	mov	r6, r2
 80068ba:	f7ff fcd5 	bl	8006268 <_Balloc>
 80068be:	4604      	mov	r4, r0
 80068c0:	b930      	cbnz	r0, 80068d0 <__d2b+0x24>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b23      	ldr	r3, [pc, #140]	@ (8006954 <__d2b+0xa8>)
 80068c6:	4824      	ldr	r0, [pc, #144]	@ (8006958 <__d2b+0xac>)
 80068c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80068cc:	f000 fa82 	bl	8006dd4 <__assert_func>
 80068d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068d8:	b10d      	cbz	r5, 80068de <__d2b+0x32>
 80068da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	f1b8 0300 	subs.w	r3, r8, #0
 80068e4:	d023      	beq.n	800692e <__d2b+0x82>
 80068e6:	4668      	mov	r0, sp
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	f7ff fd84 	bl	80063f6 <__lo0bits>
 80068ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068f2:	b1d0      	cbz	r0, 800692a <__d2b+0x7e>
 80068f4:	f1c0 0320 	rsb	r3, r0, #32
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	430b      	orrs	r3, r1
 80068fe:	40c2      	lsrs	r2, r0
 8006900:	6163      	str	r3, [r4, #20]
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	9b01      	ldr	r3, [sp, #4]
 8006906:	61a3      	str	r3, [r4, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf0c      	ite	eq
 800690c:	2201      	moveq	r2, #1
 800690e:	2202      	movne	r2, #2
 8006910:	6122      	str	r2, [r4, #16]
 8006912:	b1a5      	cbz	r5, 800693e <__d2b+0x92>
 8006914:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006918:	4405      	add	r5, r0
 800691a:	603d      	str	r5, [r7, #0]
 800691c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006920:	6030      	str	r0, [r6, #0]
 8006922:	4620      	mov	r0, r4
 8006924:	b003      	add	sp, #12
 8006926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692a:	6161      	str	r1, [r4, #20]
 800692c:	e7ea      	b.n	8006904 <__d2b+0x58>
 800692e:	a801      	add	r0, sp, #4
 8006930:	f7ff fd61 	bl	80063f6 <__lo0bits>
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	6163      	str	r3, [r4, #20]
 8006938:	3020      	adds	r0, #32
 800693a:	2201      	movs	r2, #1
 800693c:	e7e8      	b.n	8006910 <__d2b+0x64>
 800693e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006942:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006946:	6038      	str	r0, [r7, #0]
 8006948:	6918      	ldr	r0, [r3, #16]
 800694a:	f7ff fd35 	bl	80063b8 <__hi0bits>
 800694e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006952:	e7e5      	b.n	8006920 <__d2b+0x74>
 8006954:	080075b4 	.word	0x080075b4
 8006958:	080075c5 	.word	0x080075c5

0800695c <__ssputs_r>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	688e      	ldr	r6, [r1, #8]
 8006962:	461f      	mov	r7, r3
 8006964:	42be      	cmp	r6, r7
 8006966:	680b      	ldr	r3, [r1, #0]
 8006968:	4682      	mov	sl, r0
 800696a:	460c      	mov	r4, r1
 800696c:	4690      	mov	r8, r2
 800696e:	d82d      	bhi.n	80069cc <__ssputs_r+0x70>
 8006970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006978:	d026      	beq.n	80069c8 <__ssputs_r+0x6c>
 800697a:	6965      	ldr	r5, [r4, #20]
 800697c:	6909      	ldr	r1, [r1, #16]
 800697e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006982:	eba3 0901 	sub.w	r9, r3, r1
 8006986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800698a:	1c7b      	adds	r3, r7, #1
 800698c:	444b      	add	r3, r9
 800698e:	106d      	asrs	r5, r5, #1
 8006990:	429d      	cmp	r5, r3
 8006992:	bf38      	it	cc
 8006994:	461d      	movcc	r5, r3
 8006996:	0553      	lsls	r3, r2, #21
 8006998:	d527      	bpl.n	80069ea <__ssputs_r+0x8e>
 800699a:	4629      	mov	r1, r5
 800699c:	f7ff fbd8 	bl	8006150 <_malloc_r>
 80069a0:	4606      	mov	r6, r0
 80069a2:	b360      	cbz	r0, 80069fe <__ssputs_r+0xa2>
 80069a4:	6921      	ldr	r1, [r4, #16]
 80069a6:	464a      	mov	r2, r9
 80069a8:	f000 fa06 	bl	8006db8 <memcpy>
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	6126      	str	r6, [r4, #16]
 80069ba:	6165      	str	r5, [r4, #20]
 80069bc:	444e      	add	r6, r9
 80069be:	eba5 0509 	sub.w	r5, r5, r9
 80069c2:	6026      	str	r6, [r4, #0]
 80069c4:	60a5      	str	r5, [r4, #8]
 80069c6:	463e      	mov	r6, r7
 80069c8:	42be      	cmp	r6, r7
 80069ca:	d900      	bls.n	80069ce <__ssputs_r+0x72>
 80069cc:	463e      	mov	r6, r7
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	4632      	mov	r2, r6
 80069d2:	4641      	mov	r1, r8
 80069d4:	f000 f9c6 	bl	8006d64 <memmove>
 80069d8:	68a3      	ldr	r3, [r4, #8]
 80069da:	1b9b      	subs	r3, r3, r6
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	4433      	add	r3, r6
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	2000      	movs	r0, #0
 80069e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ea:	462a      	mov	r2, r5
 80069ec:	f000 fa36 	bl	8006e5c <_realloc_r>
 80069f0:	4606      	mov	r6, r0
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d1e0      	bne.n	80069b8 <__ssputs_r+0x5c>
 80069f6:	6921      	ldr	r1, [r4, #16]
 80069f8:	4650      	mov	r0, sl
 80069fa:	f7ff fb35 	bl	8006068 <_free_r>
 80069fe:	230c      	movs	r3, #12
 8006a00:	f8ca 3000 	str.w	r3, [sl]
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	e7e9      	b.n	80069e6 <__ssputs_r+0x8a>
	...

08006a14 <_svfiprintf_r>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	4698      	mov	r8, r3
 8006a1a:	898b      	ldrh	r3, [r1, #12]
 8006a1c:	061b      	lsls	r3, r3, #24
 8006a1e:	b09d      	sub	sp, #116	@ 0x74
 8006a20:	4607      	mov	r7, r0
 8006a22:	460d      	mov	r5, r1
 8006a24:	4614      	mov	r4, r2
 8006a26:	d510      	bpl.n	8006a4a <_svfiprintf_r+0x36>
 8006a28:	690b      	ldr	r3, [r1, #16]
 8006a2a:	b973      	cbnz	r3, 8006a4a <_svfiprintf_r+0x36>
 8006a2c:	2140      	movs	r1, #64	@ 0x40
 8006a2e:	f7ff fb8f 	bl	8006150 <_malloc_r>
 8006a32:	6028      	str	r0, [r5, #0]
 8006a34:	6128      	str	r0, [r5, #16]
 8006a36:	b930      	cbnz	r0, 8006a46 <_svfiprintf_r+0x32>
 8006a38:	230c      	movs	r3, #12
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	b01d      	add	sp, #116	@ 0x74
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a46:	2340      	movs	r3, #64	@ 0x40
 8006a48:	616b      	str	r3, [r5, #20]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a4e:	2320      	movs	r3, #32
 8006a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a58:	2330      	movs	r3, #48	@ 0x30
 8006a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bf8 <_svfiprintf_r+0x1e4>
 8006a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a62:	f04f 0901 	mov.w	r9, #1
 8006a66:	4623      	mov	r3, r4
 8006a68:	469a      	mov	sl, r3
 8006a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a6e:	b10a      	cbz	r2, 8006a74 <_svfiprintf_r+0x60>
 8006a70:	2a25      	cmp	r2, #37	@ 0x25
 8006a72:	d1f9      	bne.n	8006a68 <_svfiprintf_r+0x54>
 8006a74:	ebba 0b04 	subs.w	fp, sl, r4
 8006a78:	d00b      	beq.n	8006a92 <_svfiprintf_r+0x7e>
 8006a7a:	465b      	mov	r3, fp
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff ff6b 	bl	800695c <__ssputs_r>
 8006a86:	3001      	adds	r0, #1
 8006a88:	f000 80a7 	beq.w	8006bda <_svfiprintf_r+0x1c6>
 8006a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a8e:	445a      	add	r2, fp
 8006a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a92:	f89a 3000 	ldrb.w	r3, [sl]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 809f 	beq.w	8006bda <_svfiprintf_r+0x1c6>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa6:	f10a 0a01 	add.w	sl, sl, #1
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	9307      	str	r3, [sp, #28]
 8006aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ab4:	4654      	mov	r4, sl
 8006ab6:	2205      	movs	r2, #5
 8006ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006abc:	484e      	ldr	r0, [pc, #312]	@ (8006bf8 <_svfiprintf_r+0x1e4>)
 8006abe:	f7f9 fb8f 	bl	80001e0 <memchr>
 8006ac2:	9a04      	ldr	r2, [sp, #16]
 8006ac4:	b9d8      	cbnz	r0, 8006afe <_svfiprintf_r+0xea>
 8006ac6:	06d0      	lsls	r0, r2, #27
 8006ac8:	bf44      	itt	mi
 8006aca:	2320      	movmi	r3, #32
 8006acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ad0:	0711      	lsls	r1, r2, #28
 8006ad2:	bf44      	itt	mi
 8006ad4:	232b      	movmi	r3, #43	@ 0x2b
 8006ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ada:	f89a 3000 	ldrb.w	r3, [sl]
 8006ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae0:	d015      	beq.n	8006b0e <_svfiprintf_r+0xfa>
 8006ae2:	9a07      	ldr	r2, [sp, #28]
 8006ae4:	4654      	mov	r4, sl
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f04f 0c0a 	mov.w	ip, #10
 8006aec:	4621      	mov	r1, r4
 8006aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af2:	3b30      	subs	r3, #48	@ 0x30
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	d94b      	bls.n	8006b90 <_svfiprintf_r+0x17c>
 8006af8:	b1b0      	cbz	r0, 8006b28 <_svfiprintf_r+0x114>
 8006afa:	9207      	str	r2, [sp, #28]
 8006afc:	e014      	b.n	8006b28 <_svfiprintf_r+0x114>
 8006afe:	eba0 0308 	sub.w	r3, r0, r8
 8006b02:	fa09 f303 	lsl.w	r3, r9, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	46a2      	mov	sl, r4
 8006b0c:	e7d2      	b.n	8006ab4 <_svfiprintf_r+0xa0>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	1d19      	adds	r1, r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	9103      	str	r1, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfbb      	ittet	lt
 8006b1a:	425b      	neglt	r3, r3
 8006b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006b20:	9307      	strge	r3, [sp, #28]
 8006b22:	9307      	strlt	r3, [sp, #28]
 8006b24:	bfb8      	it	lt
 8006b26:	9204      	strlt	r2, [sp, #16]
 8006b28:	7823      	ldrb	r3, [r4, #0]
 8006b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b2c:	d10a      	bne.n	8006b44 <_svfiprintf_r+0x130>
 8006b2e:	7863      	ldrb	r3, [r4, #1]
 8006b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b32:	d132      	bne.n	8006b9a <_svfiprintf_r+0x186>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	1d1a      	adds	r2, r3, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	9203      	str	r2, [sp, #12]
 8006b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b40:	3402      	adds	r4, #2
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c08 <_svfiprintf_r+0x1f4>
 8006b48:	7821      	ldrb	r1, [r4, #0]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	f7f9 fb47 	bl	80001e0 <memchr>
 8006b52:	b138      	cbz	r0, 8006b64 <_svfiprintf_r+0x150>
 8006b54:	9b04      	ldr	r3, [sp, #16]
 8006b56:	eba0 000a 	sub.w	r0, r0, sl
 8006b5a:	2240      	movs	r2, #64	@ 0x40
 8006b5c:	4082      	lsls	r2, r0
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	3401      	adds	r4, #1
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b68:	4824      	ldr	r0, [pc, #144]	@ (8006bfc <_svfiprintf_r+0x1e8>)
 8006b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b6e:	2206      	movs	r2, #6
 8006b70:	f7f9 fb36 	bl	80001e0 <memchr>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d036      	beq.n	8006be6 <_svfiprintf_r+0x1d2>
 8006b78:	4b21      	ldr	r3, [pc, #132]	@ (8006c00 <_svfiprintf_r+0x1ec>)
 8006b7a:	bb1b      	cbnz	r3, 8006bc4 <_svfiprintf_r+0x1b0>
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	3307      	adds	r3, #7
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	3308      	adds	r3, #8
 8006b86:	9303      	str	r3, [sp, #12]
 8006b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8a:	4433      	add	r3, r6
 8006b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b8e:	e76a      	b.n	8006a66 <_svfiprintf_r+0x52>
 8006b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b94:	460c      	mov	r4, r1
 8006b96:	2001      	movs	r0, #1
 8006b98:	e7a8      	b.n	8006aec <_svfiprintf_r+0xd8>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	3401      	adds	r4, #1
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f04f 0c0a 	mov.w	ip, #10
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bac:	3a30      	subs	r2, #48	@ 0x30
 8006bae:	2a09      	cmp	r2, #9
 8006bb0:	d903      	bls.n	8006bba <_svfiprintf_r+0x1a6>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0c6      	beq.n	8006b44 <_svfiprintf_r+0x130>
 8006bb6:	9105      	str	r1, [sp, #20]
 8006bb8:	e7c4      	b.n	8006b44 <_svfiprintf_r+0x130>
 8006bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7f0      	b.n	8006ba6 <_svfiprintf_r+0x192>
 8006bc4:	ab03      	add	r3, sp, #12
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4b0e      	ldr	r3, [pc, #56]	@ (8006c04 <_svfiprintf_r+0x1f0>)
 8006bcc:	a904      	add	r1, sp, #16
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f7fd fe80 	bl	80048d4 <_printf_float>
 8006bd4:	1c42      	adds	r2, r0, #1
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	d1d6      	bne.n	8006b88 <_svfiprintf_r+0x174>
 8006bda:	89ab      	ldrh	r3, [r5, #12]
 8006bdc:	065b      	lsls	r3, r3, #25
 8006bde:	f53f af2d 	bmi.w	8006a3c <_svfiprintf_r+0x28>
 8006be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006be4:	e72c      	b.n	8006a40 <_svfiprintf_r+0x2c>
 8006be6:	ab03      	add	r3, sp, #12
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	462a      	mov	r2, r5
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <_svfiprintf_r+0x1f0>)
 8006bee:	a904      	add	r1, sp, #16
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	f7fe f907 	bl	8004e04 <_printf_i>
 8006bf6:	e7ed      	b.n	8006bd4 <_svfiprintf_r+0x1c0>
 8006bf8:	0800761e 	.word	0x0800761e
 8006bfc:	08007628 	.word	0x08007628
 8006c00:	080048d5 	.word	0x080048d5
 8006c04:	0800695d 	.word	0x0800695d
 8006c08:	08007624 	.word	0x08007624

08006c0c <__sflush_r>:
 8006c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	0716      	lsls	r6, r2, #28
 8006c16:	4605      	mov	r5, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	d454      	bmi.n	8006cc6 <__sflush_r+0xba>
 8006c1c:	684b      	ldr	r3, [r1, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dc02      	bgt.n	8006c28 <__sflush_r+0x1c>
 8006c22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dd48      	ble.n	8006cba <__sflush_r+0xae>
 8006c28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	d045      	beq.n	8006cba <__sflush_r+0xae>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c34:	682f      	ldr	r7, [r5, #0]
 8006c36:	6a21      	ldr	r1, [r4, #32]
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	d030      	beq.n	8006c9e <__sflush_r+0x92>
 8006c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	0759      	lsls	r1, r3, #29
 8006c42:	d505      	bpl.n	8006c50 <__sflush_r+0x44>
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c4a:	b10b      	cbz	r3, 8006c50 <__sflush_r+0x44>
 8006c4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c54:	6a21      	ldr	r1, [r4, #32]
 8006c56:	4628      	mov	r0, r5
 8006c58:	47b0      	blx	r6
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	d106      	bne.n	8006c6e <__sflush_r+0x62>
 8006c60:	6829      	ldr	r1, [r5, #0]
 8006c62:	291d      	cmp	r1, #29
 8006c64:	d82b      	bhi.n	8006cbe <__sflush_r+0xb2>
 8006c66:	4a2a      	ldr	r2, [pc, #168]	@ (8006d10 <__sflush_r+0x104>)
 8006c68:	40ca      	lsrs	r2, r1
 8006c6a:	07d6      	lsls	r6, r2, #31
 8006c6c:	d527      	bpl.n	8006cbe <__sflush_r+0xb2>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6062      	str	r2, [r4, #4]
 8006c72:	04d9      	lsls	r1, r3, #19
 8006c74:	6922      	ldr	r2, [r4, #16]
 8006c76:	6022      	str	r2, [r4, #0]
 8006c78:	d504      	bpl.n	8006c84 <__sflush_r+0x78>
 8006c7a:	1c42      	adds	r2, r0, #1
 8006c7c:	d101      	bne.n	8006c82 <__sflush_r+0x76>
 8006c7e:	682b      	ldr	r3, [r5, #0]
 8006c80:	b903      	cbnz	r3, 8006c84 <__sflush_r+0x78>
 8006c82:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c86:	602f      	str	r7, [r5, #0]
 8006c88:	b1b9      	cbz	r1, 8006cba <__sflush_r+0xae>
 8006c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c8e:	4299      	cmp	r1, r3
 8006c90:	d002      	beq.n	8006c98 <__sflush_r+0x8c>
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7ff f9e8 	bl	8006068 <_free_r>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c9c:	e00d      	b.n	8006cba <__sflush_r+0xae>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b0      	blx	r6
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	1c50      	adds	r0, r2, #1
 8006ca8:	d1c9      	bne.n	8006c3e <__sflush_r+0x32>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0c6      	beq.n	8006c3e <__sflush_r+0x32>
 8006cb0:	2b1d      	cmp	r3, #29
 8006cb2:	d001      	beq.n	8006cb8 <__sflush_r+0xac>
 8006cb4:	2b16      	cmp	r3, #22
 8006cb6:	d11e      	bne.n	8006cf6 <__sflush_r+0xea>
 8006cb8:	602f      	str	r7, [r5, #0]
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e022      	b.n	8006d04 <__sflush_r+0xf8>
 8006cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cc2:	b21b      	sxth	r3, r3
 8006cc4:	e01b      	b.n	8006cfe <__sflush_r+0xf2>
 8006cc6:	690f      	ldr	r7, [r1, #16]
 8006cc8:	2f00      	cmp	r7, #0
 8006cca:	d0f6      	beq.n	8006cba <__sflush_r+0xae>
 8006ccc:	0793      	lsls	r3, r2, #30
 8006cce:	680e      	ldr	r6, [r1, #0]
 8006cd0:	bf08      	it	eq
 8006cd2:	694b      	ldreq	r3, [r1, #20]
 8006cd4:	600f      	str	r7, [r1, #0]
 8006cd6:	bf18      	it	ne
 8006cd8:	2300      	movne	r3, #0
 8006cda:	eba6 0807 	sub.w	r8, r6, r7
 8006cde:	608b      	str	r3, [r1, #8]
 8006ce0:	f1b8 0f00 	cmp.w	r8, #0
 8006ce4:	dde9      	ble.n	8006cba <__sflush_r+0xae>
 8006ce6:	6a21      	ldr	r1, [r4, #32]
 8006ce8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cea:	4643      	mov	r3, r8
 8006cec:	463a      	mov	r2, r7
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b0      	blx	r6
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	dc08      	bgt.n	8006d08 <__sflush_r+0xfc>
 8006cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d08:	4407      	add	r7, r0
 8006d0a:	eba8 0800 	sub.w	r8, r8, r0
 8006d0e:	e7e7      	b.n	8006ce0 <__sflush_r+0xd4>
 8006d10:	20400001 	.word	0x20400001

08006d14 <_fflush_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	690b      	ldr	r3, [r1, #16]
 8006d18:	4605      	mov	r5, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	b913      	cbnz	r3, 8006d24 <_fflush_r+0x10>
 8006d1e:	2500      	movs	r5, #0
 8006d20:	4628      	mov	r0, r5
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	b118      	cbz	r0, 8006d2e <_fflush_r+0x1a>
 8006d26:	6a03      	ldr	r3, [r0, #32]
 8006d28:	b90b      	cbnz	r3, 8006d2e <_fflush_r+0x1a>
 8006d2a:	f7fe fa15 	bl	8005158 <__sinit>
 8006d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f3      	beq.n	8006d1e <_fflush_r+0xa>
 8006d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d38:	07d0      	lsls	r0, r2, #31
 8006d3a:	d404      	bmi.n	8006d46 <_fflush_r+0x32>
 8006d3c:	0599      	lsls	r1, r3, #22
 8006d3e:	d402      	bmi.n	8006d46 <_fflush_r+0x32>
 8006d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d42:	f7fe fb36 	bl	80053b2 <__retarget_lock_acquire_recursive>
 8006d46:	4628      	mov	r0, r5
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7ff ff5f 	bl	8006c0c <__sflush_r>
 8006d4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d50:	07da      	lsls	r2, r3, #31
 8006d52:	4605      	mov	r5, r0
 8006d54:	d4e4      	bmi.n	8006d20 <_fflush_r+0xc>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	059b      	lsls	r3, r3, #22
 8006d5a:	d4e1      	bmi.n	8006d20 <_fflush_r+0xc>
 8006d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d5e:	f7fe fb29 	bl	80053b4 <__retarget_lock_release_recursive>
 8006d62:	e7dd      	b.n	8006d20 <_fflush_r+0xc>

08006d64 <memmove>:
 8006d64:	4288      	cmp	r0, r1
 8006d66:	b510      	push	{r4, lr}
 8006d68:	eb01 0402 	add.w	r4, r1, r2
 8006d6c:	d902      	bls.n	8006d74 <memmove+0x10>
 8006d6e:	4284      	cmp	r4, r0
 8006d70:	4623      	mov	r3, r4
 8006d72:	d807      	bhi.n	8006d84 <memmove+0x20>
 8006d74:	1e43      	subs	r3, r0, #1
 8006d76:	42a1      	cmp	r1, r4
 8006d78:	d008      	beq.n	8006d8c <memmove+0x28>
 8006d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d82:	e7f8      	b.n	8006d76 <memmove+0x12>
 8006d84:	4402      	add	r2, r0
 8006d86:	4601      	mov	r1, r0
 8006d88:	428a      	cmp	r2, r1
 8006d8a:	d100      	bne.n	8006d8e <memmove+0x2a>
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d96:	e7f7      	b.n	8006d88 <memmove+0x24>

08006d98 <_sbrk_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d06      	ldr	r5, [pc, #24]	@ (8006db4 <_sbrk_r+0x1c>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f7fb f8d8 	bl	8001f58 <_sbrk>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_sbrk_r+0x1a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_sbrk_r+0x1a>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000504 	.word	0x20000504

08006db8 <memcpy>:
 8006db8:	440a      	add	r2, r1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc0:	d100      	bne.n	8006dc4 <memcpy+0xc>
 8006dc2:	4770      	bx	lr
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	d1f9      	bne.n	8006dc6 <memcpy+0xe>
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <__assert_func>:
 8006dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4b09      	ldr	r3, [pc, #36]	@ (8006e00 <__assert_func+0x2c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4605      	mov	r5, r0
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	b14c      	cbz	r4, 8006df8 <__assert_func+0x24>
 8006de4:	4b07      	ldr	r3, [pc, #28]	@ (8006e04 <__assert_func+0x30>)
 8006de6:	9100      	str	r1, [sp, #0]
 8006de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dec:	4906      	ldr	r1, [pc, #24]	@ (8006e08 <__assert_func+0x34>)
 8006dee:	462b      	mov	r3, r5
 8006df0:	f000 f870 	bl	8006ed4 <fiprintf>
 8006df4:	f000 f880 	bl	8006ef8 <abort>
 8006df8:	4b04      	ldr	r3, [pc, #16]	@ (8006e0c <__assert_func+0x38>)
 8006dfa:	461c      	mov	r4, r3
 8006dfc:	e7f3      	b.n	8006de6 <__assert_func+0x12>
 8006dfe:	bf00      	nop
 8006e00:	20000024 	.word	0x20000024
 8006e04:	08007639 	.word	0x08007639
 8006e08:	08007646 	.word	0x08007646
 8006e0c:	08007674 	.word	0x08007674

08006e10 <_calloc_r>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	fba1 5402 	umull	r5, r4, r1, r2
 8006e16:	b934      	cbnz	r4, 8006e26 <_calloc_r+0x16>
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7ff f999 	bl	8006150 <_malloc_r>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	b928      	cbnz	r0, 8006e2e <_calloc_r+0x1e>
 8006e22:	4630      	mov	r0, r6
 8006e24:	bd70      	pop	{r4, r5, r6, pc}
 8006e26:	220c      	movs	r2, #12
 8006e28:	6002      	str	r2, [r0, #0]
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	e7f9      	b.n	8006e22 <_calloc_r+0x12>
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4621      	mov	r1, r4
 8006e32:	f7fe fa40 	bl	80052b6 <memset>
 8006e36:	e7f4      	b.n	8006e22 <_calloc_r+0x12>

08006e38 <__ascii_mbtowc>:
 8006e38:	b082      	sub	sp, #8
 8006e3a:	b901      	cbnz	r1, 8006e3e <__ascii_mbtowc+0x6>
 8006e3c:	a901      	add	r1, sp, #4
 8006e3e:	b142      	cbz	r2, 8006e52 <__ascii_mbtowc+0x1a>
 8006e40:	b14b      	cbz	r3, 8006e56 <__ascii_mbtowc+0x1e>
 8006e42:	7813      	ldrb	r3, [r2, #0]
 8006e44:	600b      	str	r3, [r1, #0]
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	1e10      	subs	r0, r2, #0
 8006e4a:	bf18      	it	ne
 8006e4c:	2001      	movne	r0, #1
 8006e4e:	b002      	add	sp, #8
 8006e50:	4770      	bx	lr
 8006e52:	4610      	mov	r0, r2
 8006e54:	e7fb      	b.n	8006e4e <__ascii_mbtowc+0x16>
 8006e56:	f06f 0001 	mvn.w	r0, #1
 8006e5a:	e7f8      	b.n	8006e4e <__ascii_mbtowc+0x16>

08006e5c <_realloc_r>:
 8006e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e60:	4607      	mov	r7, r0
 8006e62:	4614      	mov	r4, r2
 8006e64:	460d      	mov	r5, r1
 8006e66:	b921      	cbnz	r1, 8006e72 <_realloc_r+0x16>
 8006e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	f7ff b96f 	b.w	8006150 <_malloc_r>
 8006e72:	b92a      	cbnz	r2, 8006e80 <_realloc_r+0x24>
 8006e74:	f7ff f8f8 	bl	8006068 <_free_r>
 8006e78:	4625      	mov	r5, r4
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e80:	f000 f841 	bl	8006f06 <_malloc_usable_size_r>
 8006e84:	4284      	cmp	r4, r0
 8006e86:	4606      	mov	r6, r0
 8006e88:	d802      	bhi.n	8006e90 <_realloc_r+0x34>
 8006e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e8e:	d8f4      	bhi.n	8006e7a <_realloc_r+0x1e>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4638      	mov	r0, r7
 8006e94:	f7ff f95c 	bl	8006150 <_malloc_r>
 8006e98:	4680      	mov	r8, r0
 8006e9a:	b908      	cbnz	r0, 8006ea0 <_realloc_r+0x44>
 8006e9c:	4645      	mov	r5, r8
 8006e9e:	e7ec      	b.n	8006e7a <_realloc_r+0x1e>
 8006ea0:	42b4      	cmp	r4, r6
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	bf28      	it	cs
 8006ea8:	4632      	movcs	r2, r6
 8006eaa:	f7ff ff85 	bl	8006db8 <memcpy>
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f7ff f8d9 	bl	8006068 <_free_r>
 8006eb6:	e7f1      	b.n	8006e9c <_realloc_r+0x40>

08006eb8 <__ascii_wctomb>:
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	b141      	cbz	r1, 8006ed0 <__ascii_wctomb+0x18>
 8006ebe:	2aff      	cmp	r2, #255	@ 0xff
 8006ec0:	d904      	bls.n	8006ecc <__ascii_wctomb+0x14>
 8006ec2:	228a      	movs	r2, #138	@ 0x8a
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eca:	4770      	bx	lr
 8006ecc:	700a      	strb	r2, [r1, #0]
 8006ece:	2001      	movs	r0, #1
 8006ed0:	4770      	bx	lr
	...

08006ed4 <fiprintf>:
 8006ed4:	b40e      	push	{r1, r2, r3}
 8006ed6:	b503      	push	{r0, r1, lr}
 8006ed8:	4601      	mov	r1, r0
 8006eda:	ab03      	add	r3, sp, #12
 8006edc:	4805      	ldr	r0, [pc, #20]	@ (8006ef4 <fiprintf+0x20>)
 8006ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee2:	6800      	ldr	r0, [r0, #0]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	f000 f83f 	bl	8006f68 <_vfiprintf_r>
 8006eea:	b002      	add	sp, #8
 8006eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef0:	b003      	add	sp, #12
 8006ef2:	4770      	bx	lr
 8006ef4:	20000024 	.word	0x20000024

08006ef8 <abort>:
 8006ef8:	b508      	push	{r3, lr}
 8006efa:	2006      	movs	r0, #6
 8006efc:	f000 fa08 	bl	8007310 <raise>
 8006f00:	2001      	movs	r0, #1
 8006f02:	f7fa ffb0 	bl	8001e66 <_exit>

08006f06 <_malloc_usable_size_r>:
 8006f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f0a:	1f18      	subs	r0, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bfbc      	itt	lt
 8006f10:	580b      	ldrlt	r3, [r1, r0]
 8006f12:	18c0      	addlt	r0, r0, r3
 8006f14:	4770      	bx	lr

08006f16 <__sfputc_r>:
 8006f16:	6893      	ldr	r3, [r2, #8]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	b410      	push	{r4}
 8006f1e:	6093      	str	r3, [r2, #8]
 8006f20:	da08      	bge.n	8006f34 <__sfputc_r+0x1e>
 8006f22:	6994      	ldr	r4, [r2, #24]
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	db01      	blt.n	8006f2c <__sfputc_r+0x16>
 8006f28:	290a      	cmp	r1, #10
 8006f2a:	d103      	bne.n	8006f34 <__sfputc_r+0x1e>
 8006f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f30:	f000 b932 	b.w	8007198 <__swbuf_r>
 8006f34:	6813      	ldr	r3, [r2, #0]
 8006f36:	1c58      	adds	r0, r3, #1
 8006f38:	6010      	str	r0, [r2, #0]
 8006f3a:	7019      	strb	r1, [r3, #0]
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <__sfputs_r>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	4606      	mov	r6, r0
 8006f48:	460f      	mov	r7, r1
 8006f4a:	4614      	mov	r4, r2
 8006f4c:	18d5      	adds	r5, r2, r3
 8006f4e:	42ac      	cmp	r4, r5
 8006f50:	d101      	bne.n	8006f56 <__sfputs_r+0x12>
 8006f52:	2000      	movs	r0, #0
 8006f54:	e007      	b.n	8006f66 <__sfputs_r+0x22>
 8006f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f5a:	463a      	mov	r2, r7
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff ffda 	bl	8006f16 <__sfputc_r>
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	d1f3      	bne.n	8006f4e <__sfputs_r+0xa>
 8006f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f68 <_vfiprintf_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	460d      	mov	r5, r1
 8006f6e:	b09d      	sub	sp, #116	@ 0x74
 8006f70:	4614      	mov	r4, r2
 8006f72:	4698      	mov	r8, r3
 8006f74:	4606      	mov	r6, r0
 8006f76:	b118      	cbz	r0, 8006f80 <_vfiprintf_r+0x18>
 8006f78:	6a03      	ldr	r3, [r0, #32]
 8006f7a:	b90b      	cbnz	r3, 8006f80 <_vfiprintf_r+0x18>
 8006f7c:	f7fe f8ec 	bl	8005158 <__sinit>
 8006f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f82:	07d9      	lsls	r1, r3, #31
 8006f84:	d405      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	059a      	lsls	r2, r3, #22
 8006f8a:	d402      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f8e:	f7fe fa10 	bl	80053b2 <__retarget_lock_acquire_recursive>
 8006f92:	89ab      	ldrh	r3, [r5, #12]
 8006f94:	071b      	lsls	r3, r3, #28
 8006f96:	d501      	bpl.n	8006f9c <_vfiprintf_r+0x34>
 8006f98:	692b      	ldr	r3, [r5, #16]
 8006f9a:	b99b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x5c>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f000 f938 	bl	8007214 <__swsetup_r>
 8006fa4:	b170      	cbz	r0, 8006fc4 <_vfiprintf_r+0x5c>
 8006fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fa8:	07dc      	lsls	r4, r3, #31
 8006faa:	d504      	bpl.n	8006fb6 <_vfiprintf_r+0x4e>
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb0:	b01d      	add	sp, #116	@ 0x74
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	0598      	lsls	r0, r3, #22
 8006fba:	d4f7      	bmi.n	8006fac <_vfiprintf_r+0x44>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fbe:	f7fe f9f9 	bl	80053b4 <__retarget_lock_release_recursive>
 8006fc2:	e7f3      	b.n	8006fac <_vfiprintf_r+0x44>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc8:	2320      	movs	r3, #32
 8006fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd2:	2330      	movs	r3, #48	@ 0x30
 8006fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007184 <_vfiprintf_r+0x21c>
 8006fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fdc:	f04f 0901 	mov.w	r9, #1
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	469a      	mov	sl, r3
 8006fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe8:	b10a      	cbz	r2, 8006fee <_vfiprintf_r+0x86>
 8006fea:	2a25      	cmp	r2, #37	@ 0x25
 8006fec:	d1f9      	bne.n	8006fe2 <_vfiprintf_r+0x7a>
 8006fee:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff2:	d00b      	beq.n	800700c <_vfiprintf_r+0xa4>
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ffa2 	bl	8006f44 <__sfputs_r>
 8007000:	3001      	adds	r0, #1
 8007002:	f000 80a7 	beq.w	8007154 <_vfiprintf_r+0x1ec>
 8007006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007008:	445a      	add	r2, fp
 800700a:	9209      	str	r2, [sp, #36]	@ 0x24
 800700c:	f89a 3000 	ldrb.w	r3, [sl]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 809f 	beq.w	8007154 <_vfiprintf_r+0x1ec>
 8007016:	2300      	movs	r3, #0
 8007018:	f04f 32ff 	mov.w	r2, #4294967295
 800701c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007020:	f10a 0a01 	add.w	sl, sl, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800702c:	931a      	str	r3, [sp, #104]	@ 0x68
 800702e:	4654      	mov	r4, sl
 8007030:	2205      	movs	r2, #5
 8007032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007036:	4853      	ldr	r0, [pc, #332]	@ (8007184 <_vfiprintf_r+0x21c>)
 8007038:	f7f9 f8d2 	bl	80001e0 <memchr>
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	b9d8      	cbnz	r0, 8007078 <_vfiprintf_r+0x110>
 8007040:	06d1      	lsls	r1, r2, #27
 8007042:	bf44      	itt	mi
 8007044:	2320      	movmi	r3, #32
 8007046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800704a:	0713      	lsls	r3, r2, #28
 800704c:	bf44      	itt	mi
 800704e:	232b      	movmi	r3, #43	@ 0x2b
 8007050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b2a      	cmp	r3, #42	@ 0x2a
 800705a:	d015      	beq.n	8007088 <_vfiprintf_r+0x120>
 800705c:	9a07      	ldr	r2, [sp, #28]
 800705e:	4654      	mov	r4, sl
 8007060:	2000      	movs	r0, #0
 8007062:	f04f 0c0a 	mov.w	ip, #10
 8007066:	4621      	mov	r1, r4
 8007068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800706c:	3b30      	subs	r3, #48	@ 0x30
 800706e:	2b09      	cmp	r3, #9
 8007070:	d94b      	bls.n	800710a <_vfiprintf_r+0x1a2>
 8007072:	b1b0      	cbz	r0, 80070a2 <_vfiprintf_r+0x13a>
 8007074:	9207      	str	r2, [sp, #28]
 8007076:	e014      	b.n	80070a2 <_vfiprintf_r+0x13a>
 8007078:	eba0 0308 	sub.w	r3, r0, r8
 800707c:	fa09 f303 	lsl.w	r3, r9, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	46a2      	mov	sl, r4
 8007086:	e7d2      	b.n	800702e <_vfiprintf_r+0xc6>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	1d19      	adds	r1, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	9103      	str	r1, [sp, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfbb      	ittet	lt
 8007094:	425b      	neglt	r3, r3
 8007096:	f042 0202 	orrlt.w	r2, r2, #2
 800709a:	9307      	strge	r3, [sp, #28]
 800709c:	9307      	strlt	r3, [sp, #28]
 800709e:	bfb8      	it	lt
 80070a0:	9204      	strlt	r2, [sp, #16]
 80070a2:	7823      	ldrb	r3, [r4, #0]
 80070a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80070a6:	d10a      	bne.n	80070be <_vfiprintf_r+0x156>
 80070a8:	7863      	ldrb	r3, [r4, #1]
 80070aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ac:	d132      	bne.n	8007114 <_vfiprintf_r+0x1ac>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	1d1a      	adds	r2, r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	9203      	str	r2, [sp, #12]
 80070b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070ba:	3402      	adds	r4, #2
 80070bc:	9305      	str	r3, [sp, #20]
 80070be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007194 <_vfiprintf_r+0x22c>
 80070c2:	7821      	ldrb	r1, [r4, #0]
 80070c4:	2203      	movs	r2, #3
 80070c6:	4650      	mov	r0, sl
 80070c8:	f7f9 f88a 	bl	80001e0 <memchr>
 80070cc:	b138      	cbz	r0, 80070de <_vfiprintf_r+0x176>
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	eba0 000a 	sub.w	r0, r0, sl
 80070d4:	2240      	movs	r2, #64	@ 0x40
 80070d6:	4082      	lsls	r2, r0
 80070d8:	4313      	orrs	r3, r2
 80070da:	3401      	adds	r4, #1
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e2:	4829      	ldr	r0, [pc, #164]	@ (8007188 <_vfiprintf_r+0x220>)
 80070e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070e8:	2206      	movs	r2, #6
 80070ea:	f7f9 f879 	bl	80001e0 <memchr>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d03f      	beq.n	8007172 <_vfiprintf_r+0x20a>
 80070f2:	4b26      	ldr	r3, [pc, #152]	@ (800718c <_vfiprintf_r+0x224>)
 80070f4:	bb1b      	cbnz	r3, 800713e <_vfiprintf_r+0x1d6>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	3307      	adds	r3, #7
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	3308      	adds	r3, #8
 8007100:	9303      	str	r3, [sp, #12]
 8007102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007104:	443b      	add	r3, r7
 8007106:	9309      	str	r3, [sp, #36]	@ 0x24
 8007108:	e76a      	b.n	8006fe0 <_vfiprintf_r+0x78>
 800710a:	fb0c 3202 	mla	r2, ip, r2, r3
 800710e:	460c      	mov	r4, r1
 8007110:	2001      	movs	r0, #1
 8007112:	e7a8      	b.n	8007066 <_vfiprintf_r+0xfe>
 8007114:	2300      	movs	r3, #0
 8007116:	3401      	adds	r4, #1
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	4619      	mov	r1, r3
 800711c:	f04f 0c0a 	mov.w	ip, #10
 8007120:	4620      	mov	r0, r4
 8007122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007126:	3a30      	subs	r2, #48	@ 0x30
 8007128:	2a09      	cmp	r2, #9
 800712a:	d903      	bls.n	8007134 <_vfiprintf_r+0x1cc>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0c6      	beq.n	80070be <_vfiprintf_r+0x156>
 8007130:	9105      	str	r1, [sp, #20]
 8007132:	e7c4      	b.n	80070be <_vfiprintf_r+0x156>
 8007134:	fb0c 2101 	mla	r1, ip, r1, r2
 8007138:	4604      	mov	r4, r0
 800713a:	2301      	movs	r3, #1
 800713c:	e7f0      	b.n	8007120 <_vfiprintf_r+0x1b8>
 800713e:	ab03      	add	r3, sp, #12
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	462a      	mov	r2, r5
 8007144:	4b12      	ldr	r3, [pc, #72]	@ (8007190 <_vfiprintf_r+0x228>)
 8007146:	a904      	add	r1, sp, #16
 8007148:	4630      	mov	r0, r6
 800714a:	f7fd fbc3 	bl	80048d4 <_printf_float>
 800714e:	4607      	mov	r7, r0
 8007150:	1c78      	adds	r0, r7, #1
 8007152:	d1d6      	bne.n	8007102 <_vfiprintf_r+0x19a>
 8007154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007156:	07d9      	lsls	r1, r3, #31
 8007158:	d405      	bmi.n	8007166 <_vfiprintf_r+0x1fe>
 800715a:	89ab      	ldrh	r3, [r5, #12]
 800715c:	059a      	lsls	r2, r3, #22
 800715e:	d402      	bmi.n	8007166 <_vfiprintf_r+0x1fe>
 8007160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007162:	f7fe f927 	bl	80053b4 <__retarget_lock_release_recursive>
 8007166:	89ab      	ldrh	r3, [r5, #12]
 8007168:	065b      	lsls	r3, r3, #25
 800716a:	f53f af1f 	bmi.w	8006fac <_vfiprintf_r+0x44>
 800716e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007170:	e71e      	b.n	8006fb0 <_vfiprintf_r+0x48>
 8007172:	ab03      	add	r3, sp, #12
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	462a      	mov	r2, r5
 8007178:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <_vfiprintf_r+0x228>)
 800717a:	a904      	add	r1, sp, #16
 800717c:	4630      	mov	r0, r6
 800717e:	f7fd fe41 	bl	8004e04 <_printf_i>
 8007182:	e7e4      	b.n	800714e <_vfiprintf_r+0x1e6>
 8007184:	0800761e 	.word	0x0800761e
 8007188:	08007628 	.word	0x08007628
 800718c:	080048d5 	.word	0x080048d5
 8007190:	08006f45 	.word	0x08006f45
 8007194:	08007624 	.word	0x08007624

08007198 <__swbuf_r>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	460e      	mov	r6, r1
 800719c:	4614      	mov	r4, r2
 800719e:	4605      	mov	r5, r0
 80071a0:	b118      	cbz	r0, 80071aa <__swbuf_r+0x12>
 80071a2:	6a03      	ldr	r3, [r0, #32]
 80071a4:	b90b      	cbnz	r3, 80071aa <__swbuf_r+0x12>
 80071a6:	f7fd ffd7 	bl	8005158 <__sinit>
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	60a3      	str	r3, [r4, #8]
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	071a      	lsls	r2, r3, #28
 80071b2:	d501      	bpl.n	80071b8 <__swbuf_r+0x20>
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	b943      	cbnz	r3, 80071ca <__swbuf_r+0x32>
 80071b8:	4621      	mov	r1, r4
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 f82a 	bl	8007214 <__swsetup_r>
 80071c0:	b118      	cbz	r0, 80071ca <__swbuf_r+0x32>
 80071c2:	f04f 37ff 	mov.w	r7, #4294967295
 80071c6:	4638      	mov	r0, r7
 80071c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	6922      	ldr	r2, [r4, #16]
 80071ce:	1a98      	subs	r0, r3, r2
 80071d0:	6963      	ldr	r3, [r4, #20]
 80071d2:	b2f6      	uxtb	r6, r6
 80071d4:	4283      	cmp	r3, r0
 80071d6:	4637      	mov	r7, r6
 80071d8:	dc05      	bgt.n	80071e6 <__swbuf_r+0x4e>
 80071da:	4621      	mov	r1, r4
 80071dc:	4628      	mov	r0, r5
 80071de:	f7ff fd99 	bl	8006d14 <_fflush_r>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d1ed      	bne.n	80071c2 <__swbuf_r+0x2a>
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	60a3      	str	r3, [r4, #8]
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	6022      	str	r2, [r4, #0]
 80071f2:	701e      	strb	r6, [r3, #0]
 80071f4:	6962      	ldr	r2, [r4, #20]
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d004      	beq.n	8007206 <__swbuf_r+0x6e>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	07db      	lsls	r3, r3, #31
 8007200:	d5e1      	bpl.n	80071c6 <__swbuf_r+0x2e>
 8007202:	2e0a      	cmp	r6, #10
 8007204:	d1df      	bne.n	80071c6 <__swbuf_r+0x2e>
 8007206:	4621      	mov	r1, r4
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff fd83 	bl	8006d14 <_fflush_r>
 800720e:	2800      	cmp	r0, #0
 8007210:	d0d9      	beq.n	80071c6 <__swbuf_r+0x2e>
 8007212:	e7d6      	b.n	80071c2 <__swbuf_r+0x2a>

08007214 <__swsetup_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4b29      	ldr	r3, [pc, #164]	@ (80072bc <__swsetup_r+0xa8>)
 8007218:	4605      	mov	r5, r0
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	460c      	mov	r4, r1
 800721e:	b118      	cbz	r0, 8007228 <__swsetup_r+0x14>
 8007220:	6a03      	ldr	r3, [r0, #32]
 8007222:	b90b      	cbnz	r3, 8007228 <__swsetup_r+0x14>
 8007224:	f7fd ff98 	bl	8005158 <__sinit>
 8007228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722c:	0719      	lsls	r1, r3, #28
 800722e:	d422      	bmi.n	8007276 <__swsetup_r+0x62>
 8007230:	06da      	lsls	r2, r3, #27
 8007232:	d407      	bmi.n	8007244 <__swsetup_r+0x30>
 8007234:	2209      	movs	r2, #9
 8007236:	602a      	str	r2, [r5, #0]
 8007238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	f04f 30ff 	mov.w	r0, #4294967295
 8007242:	e033      	b.n	80072ac <__swsetup_r+0x98>
 8007244:	0758      	lsls	r0, r3, #29
 8007246:	d512      	bpl.n	800726e <__swsetup_r+0x5a>
 8007248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800724a:	b141      	cbz	r1, 800725e <__swsetup_r+0x4a>
 800724c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007250:	4299      	cmp	r1, r3
 8007252:	d002      	beq.n	800725a <__swsetup_r+0x46>
 8007254:	4628      	mov	r0, r5
 8007256:	f7fe ff07 	bl	8006068 <_free_r>
 800725a:	2300      	movs	r3, #0
 800725c:	6363      	str	r3, [r4, #52]	@ 0x34
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	2300      	movs	r3, #0
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	f043 0308 	orr.w	r3, r3, #8
 8007274:	81a3      	strh	r3, [r4, #12]
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	b94b      	cbnz	r3, 800728e <__swsetup_r+0x7a>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007284:	d003      	beq.n	800728e <__swsetup_r+0x7a>
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 f883 	bl	8007394 <__smakebuf_r>
 800728e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007292:	f013 0201 	ands.w	r2, r3, #1
 8007296:	d00a      	beq.n	80072ae <__swsetup_r+0x9a>
 8007298:	2200      	movs	r2, #0
 800729a:	60a2      	str	r2, [r4, #8]
 800729c:	6962      	ldr	r2, [r4, #20]
 800729e:	4252      	negs	r2, r2
 80072a0:	61a2      	str	r2, [r4, #24]
 80072a2:	6922      	ldr	r2, [r4, #16]
 80072a4:	b942      	cbnz	r2, 80072b8 <__swsetup_r+0xa4>
 80072a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072aa:	d1c5      	bne.n	8007238 <__swsetup_r+0x24>
 80072ac:	bd38      	pop	{r3, r4, r5, pc}
 80072ae:	0799      	lsls	r1, r3, #30
 80072b0:	bf58      	it	pl
 80072b2:	6962      	ldrpl	r2, [r4, #20]
 80072b4:	60a2      	str	r2, [r4, #8]
 80072b6:	e7f4      	b.n	80072a2 <__swsetup_r+0x8e>
 80072b8:	2000      	movs	r0, #0
 80072ba:	e7f7      	b.n	80072ac <__swsetup_r+0x98>
 80072bc:	20000024 	.word	0x20000024

080072c0 <_raise_r>:
 80072c0:	291f      	cmp	r1, #31
 80072c2:	b538      	push	{r3, r4, r5, lr}
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	d904      	bls.n	80072d4 <_raise_r+0x14>
 80072ca:	2316      	movs	r3, #22
 80072cc:	6003      	str	r3, [r0, #0]
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80072d6:	b112      	cbz	r2, 80072de <_raise_r+0x1e>
 80072d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072dc:	b94b      	cbnz	r3, 80072f2 <_raise_r+0x32>
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 f830 	bl	8007344 <_getpid_r>
 80072e4:	4622      	mov	r2, r4
 80072e6:	4601      	mov	r1, r0
 80072e8:	4628      	mov	r0, r5
 80072ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ee:	f000 b817 	b.w	8007320 <_kill_r>
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d00a      	beq.n	800730c <_raise_r+0x4c>
 80072f6:	1c59      	adds	r1, r3, #1
 80072f8:	d103      	bne.n	8007302 <_raise_r+0x42>
 80072fa:	2316      	movs	r3, #22
 80072fc:	6003      	str	r3, [r0, #0]
 80072fe:	2001      	movs	r0, #1
 8007300:	e7e7      	b.n	80072d2 <_raise_r+0x12>
 8007302:	2100      	movs	r1, #0
 8007304:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007308:	4620      	mov	r0, r4
 800730a:	4798      	blx	r3
 800730c:	2000      	movs	r0, #0
 800730e:	e7e0      	b.n	80072d2 <_raise_r+0x12>

08007310 <raise>:
 8007310:	4b02      	ldr	r3, [pc, #8]	@ (800731c <raise+0xc>)
 8007312:	4601      	mov	r1, r0
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	f7ff bfd3 	b.w	80072c0 <_raise_r>
 800731a:	bf00      	nop
 800731c:	20000024 	.word	0x20000024

08007320 <_kill_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d07      	ldr	r5, [pc, #28]	@ (8007340 <_kill_r+0x20>)
 8007324:	2300      	movs	r3, #0
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	f7fa fd8a 	bl	8001e46 <_kill>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d102      	bne.n	800733c <_kill_r+0x1c>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	b103      	cbz	r3, 800733c <_kill_r+0x1c>
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	bd38      	pop	{r3, r4, r5, pc}
 800733e:	bf00      	nop
 8007340:	20000504 	.word	0x20000504

08007344 <_getpid_r>:
 8007344:	f7fa bd77 	b.w	8001e36 <_getpid>

08007348 <__swhatbuf_r>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	460c      	mov	r4, r1
 800734c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007350:	2900      	cmp	r1, #0
 8007352:	b096      	sub	sp, #88	@ 0x58
 8007354:	4615      	mov	r5, r2
 8007356:	461e      	mov	r6, r3
 8007358:	da0d      	bge.n	8007376 <__swhatbuf_r+0x2e>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	bf14      	ite	ne
 8007366:	2340      	movne	r3, #64	@ 0x40
 8007368:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800736c:	2000      	movs	r0, #0
 800736e:	6031      	str	r1, [r6, #0]
 8007370:	602b      	str	r3, [r5, #0]
 8007372:	b016      	add	sp, #88	@ 0x58
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	466a      	mov	r2, sp
 8007378:	f000 f848 	bl	800740c <_fstat_r>
 800737c:	2800      	cmp	r0, #0
 800737e:	dbec      	blt.n	800735a <__swhatbuf_r+0x12>
 8007380:	9901      	ldr	r1, [sp, #4]
 8007382:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007386:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800738a:	4259      	negs	r1, r3
 800738c:	4159      	adcs	r1, r3
 800738e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007392:	e7eb      	b.n	800736c <__swhatbuf_r+0x24>

08007394 <__smakebuf_r>:
 8007394:	898b      	ldrh	r3, [r1, #12]
 8007396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007398:	079d      	lsls	r5, r3, #30
 800739a:	4606      	mov	r6, r0
 800739c:	460c      	mov	r4, r1
 800739e:	d507      	bpl.n	80073b0 <__smakebuf_r+0x1c>
 80073a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	2301      	movs	r3, #1
 80073aa:	6163      	str	r3, [r4, #20]
 80073ac:	b003      	add	sp, #12
 80073ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b0:	ab01      	add	r3, sp, #4
 80073b2:	466a      	mov	r2, sp
 80073b4:	f7ff ffc8 	bl	8007348 <__swhatbuf_r>
 80073b8:	9f00      	ldr	r7, [sp, #0]
 80073ba:	4605      	mov	r5, r0
 80073bc:	4639      	mov	r1, r7
 80073be:	4630      	mov	r0, r6
 80073c0:	f7fe fec6 	bl	8006150 <_malloc_r>
 80073c4:	b948      	cbnz	r0, 80073da <__smakebuf_r+0x46>
 80073c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ca:	059a      	lsls	r2, r3, #22
 80073cc:	d4ee      	bmi.n	80073ac <__smakebuf_r+0x18>
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	f043 0302 	orr.w	r3, r3, #2
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	e7e2      	b.n	80073a0 <__smakebuf_r+0xc>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	6020      	str	r0, [r4, #0]
 80073de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073ea:	b15b      	cbz	r3, 8007404 <__smakebuf_r+0x70>
 80073ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 f81d 	bl	8007430 <_isatty_r>
 80073f6:	b128      	cbz	r0, 8007404 <__smakebuf_r+0x70>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f023 0303 	bic.w	r3, r3, #3
 80073fe:	f043 0301 	orr.w	r3, r3, #1
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	431d      	orrs	r5, r3
 8007408:	81a5      	strh	r5, [r4, #12]
 800740a:	e7cf      	b.n	80073ac <__smakebuf_r+0x18>

0800740c <_fstat_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	@ (800742c <_fstat_r+0x20>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	f7fa fd74 	bl	8001f06 <_fstat>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d102      	bne.n	8007428 <_fstat_r+0x1c>
 8007422:	682b      	ldr	r3, [r5, #0]
 8007424:	b103      	cbz	r3, 8007428 <_fstat_r+0x1c>
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	bf00      	nop
 800742c:	20000504 	.word	0x20000504

08007430 <_isatty_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d06      	ldr	r5, [pc, #24]	@ (800744c <_isatty_r+0x1c>)
 8007434:	2300      	movs	r3, #0
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	f7fa fd73 	bl	8001f26 <_isatty>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_isatty_r+0x1a>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_isatty_r+0x1a>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	20000504 	.word	0x20000504

08007450 <_init>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr

0800745c <_fini>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr
