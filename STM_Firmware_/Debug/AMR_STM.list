
AMR_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080042f0  080042f0  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004360  08004360  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004360  08004360  00005360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004368  08004368  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004368  08004368  00005368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004370  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000060  080043cc  00006060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080043cc  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be48  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001928  00000000  00000000  00011ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00013800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000933  00000000  00000000  000143b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016319  00000000  00000000  00014ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce97  00000000  00000000  0002b004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d899  00000000  00000000  00037e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  000c5778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000c8ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042d8 	.word	0x080042d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080042d8 	.word	0x080042d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b988 	b.w	8000920 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	468e      	mov	lr, r1
 8000630:	4604      	mov	r4, r0
 8000632:	4688      	mov	r8, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d962      	bls.n	8000704 <__udivmoddi4+0xdc>
 800063e:	fab2 f682 	clz	r6, r2
 8000642:	b14e      	cbz	r6, 8000658 <__udivmoddi4+0x30>
 8000644:	f1c6 0320 	rsb	r3, r6, #32
 8000648:	fa01 f806 	lsl.w	r8, r1, r6
 800064c:	fa20 f303 	lsr.w	r3, r0, r3
 8000650:	40b7      	lsls	r7, r6
 8000652:	ea43 0808 	orr.w	r8, r3, r8
 8000656:	40b4      	lsls	r4, r6
 8000658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800065c:	fa1f fc87 	uxth.w	ip, r7
 8000660:	fbb8 f1fe 	udiv	r1, r8, lr
 8000664:	0c23      	lsrs	r3, r4, #16
 8000666:	fb0e 8811 	mls	r8, lr, r1, r8
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fb01 f20c 	mul.w	r2, r1, ip
 8000672:	429a      	cmp	r2, r3
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0x62>
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	f101 30ff 	add.w	r0, r1, #4294967295
 800067c:	f080 80ea 	bcs.w	8000854 <__udivmoddi4+0x22c>
 8000680:	429a      	cmp	r2, r3
 8000682:	f240 80e7 	bls.w	8000854 <__udivmoddi4+0x22c>
 8000686:	3902      	subs	r1, #2
 8000688:	443b      	add	r3, r7
 800068a:	1a9a      	subs	r2, r3, r2
 800068c:	b2a3      	uxth	r3, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800069a:	fb00 fc0c 	mul.w	ip, r0, ip
 800069e:	459c      	cmp	ip, r3
 80006a0:	d909      	bls.n	80006b6 <__udivmoddi4+0x8e>
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006a8:	f080 80d6 	bcs.w	8000858 <__udivmoddi4+0x230>
 80006ac:	459c      	cmp	ip, r3
 80006ae:	f240 80d3 	bls.w	8000858 <__udivmoddi4+0x230>
 80006b2:	443b      	add	r3, r7
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ba:	eba3 030c 	sub.w	r3, r3, ip
 80006be:	2100      	movs	r1, #0
 80006c0:	b11d      	cbz	r5, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40f3      	lsrs	r3, r6
 80006c4:	2200      	movs	r2, #0
 80006c6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d905      	bls.n	80006de <__udivmoddi4+0xb6>
 80006d2:	b10d      	cbz	r5, 80006d8 <__udivmoddi4+0xb0>
 80006d4:	e9c5 0100 	strd	r0, r1, [r5]
 80006d8:	2100      	movs	r1, #0
 80006da:	4608      	mov	r0, r1
 80006dc:	e7f5      	b.n	80006ca <__udivmoddi4+0xa2>
 80006de:	fab3 f183 	clz	r1, r3
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d146      	bne.n	8000774 <__udivmoddi4+0x14c>
 80006e6:	4573      	cmp	r3, lr
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xc8>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 8105 	bhi.w	80008fa <__udivmoddi4+0x2d2>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4690      	mov	r8, r2
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0e5      	beq.n	80006ca <__udivmoddi4+0xa2>
 80006fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000702:	e7e2      	b.n	80006ca <__udivmoddi4+0xa2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	f000 8090 	beq.w	800082a <__udivmoddi4+0x202>
 800070a:	fab2 f682 	clz	r6, r2
 800070e:	2e00      	cmp	r6, #0
 8000710:	f040 80a4 	bne.w	800085c <__udivmoddi4+0x234>
 8000714:	1a8a      	subs	r2, r1, r2
 8000716:	0c03      	lsrs	r3, r0, #16
 8000718:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800071c:	b280      	uxth	r0, r0
 800071e:	b2bc      	uxth	r4, r7
 8000720:	2101      	movs	r1, #1
 8000722:	fbb2 fcfe 	udiv	ip, r2, lr
 8000726:	fb0e 221c 	mls	r2, lr, ip, r2
 800072a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072e:	fb04 f20c 	mul.w	r2, r4, ip
 8000732:	429a      	cmp	r2, r3
 8000734:	d907      	bls.n	8000746 <__udivmoddi4+0x11e>
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	f10c 38ff 	add.w	r8, ip, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x11c>
 800073e:	429a      	cmp	r2, r3
 8000740:	f200 80e0 	bhi.w	8000904 <__udivmoddi4+0x2dc>
 8000744:	46c4      	mov	ip, r8
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	fbb3 f2fe 	udiv	r2, r3, lr
 800074c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000750:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000754:	fb02 f404 	mul.w	r4, r2, r4
 8000758:	429c      	cmp	r4, r3
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x144>
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x142>
 8000764:	429c      	cmp	r4, r3
 8000766:	f200 80ca 	bhi.w	80008fe <__udivmoddi4+0x2d6>
 800076a:	4602      	mov	r2, r0
 800076c:	1b1b      	subs	r3, r3, r4
 800076e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000772:	e7a5      	b.n	80006c0 <__udivmoddi4+0x98>
 8000774:	f1c1 0620 	rsb	r6, r1, #32
 8000778:	408b      	lsls	r3, r1
 800077a:	fa22 f706 	lsr.w	r7, r2, r6
 800077e:	431f      	orrs	r7, r3
 8000780:	fa0e f401 	lsl.w	r4, lr, r1
 8000784:	fa20 f306 	lsr.w	r3, r0, r6
 8000788:	fa2e fe06 	lsr.w	lr, lr, r6
 800078c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000790:	4323      	orrs	r3, r4
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	fa1f fc87 	uxth.w	ip, r7
 800079a:	fbbe f0f9 	udiv	r0, lr, r9
 800079e:	0c1c      	lsrs	r4, r3, #16
 80007a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	d909      	bls.n	80007c8 <__udivmoddi4+0x1a0>
 80007b4:	193c      	adds	r4, r7, r4
 80007b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ba:	f080 809c 	bcs.w	80008f6 <__udivmoddi4+0x2ce>
 80007be:	45a6      	cmp	lr, r4
 80007c0:	f240 8099 	bls.w	80008f6 <__udivmoddi4+0x2ce>
 80007c4:	3802      	subs	r0, #2
 80007c6:	443c      	add	r4, r7
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	fa1f fe83 	uxth.w	lr, r3
 80007d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d4:	fb09 4413 	mls	r4, r9, r3, r4
 80007d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e0:	45a4      	cmp	ip, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x1ce>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007ea:	f080 8082 	bcs.w	80008f2 <__udivmoddi4+0x2ca>
 80007ee:	45a4      	cmp	ip, r4
 80007f0:	d97f      	bls.n	80008f2 <__udivmoddi4+0x2ca>
 80007f2:	3b02      	subs	r3, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007fa:	eba4 040c 	sub.w	r4, r4, ip
 80007fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000802:	4564      	cmp	r4, ip
 8000804:	4673      	mov	r3, lr
 8000806:	46e1      	mov	r9, ip
 8000808:	d362      	bcc.n	80008d0 <__udivmoddi4+0x2a8>
 800080a:	d05f      	beq.n	80008cc <__udivmoddi4+0x2a4>
 800080c:	b15d      	cbz	r5, 8000826 <__udivmoddi4+0x1fe>
 800080e:	ebb8 0203 	subs.w	r2, r8, r3
 8000812:	eb64 0409 	sbc.w	r4, r4, r9
 8000816:	fa04 f606 	lsl.w	r6, r4, r6
 800081a:	fa22 f301 	lsr.w	r3, r2, r1
 800081e:	431e      	orrs	r6, r3
 8000820:	40cc      	lsrs	r4, r1
 8000822:	e9c5 6400 	strd	r6, r4, [r5]
 8000826:	2100      	movs	r1, #0
 8000828:	e74f      	b.n	80006ca <__udivmoddi4+0xa2>
 800082a:	fbb1 fcf2 	udiv	ip, r1, r2
 800082e:	0c01      	lsrs	r1, r0, #16
 8000830:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000834:	b280      	uxth	r0, r0
 8000836:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800083a:	463b      	mov	r3, r7
 800083c:	4638      	mov	r0, r7
 800083e:	463c      	mov	r4, r7
 8000840:	46b8      	mov	r8, r7
 8000842:	46be      	mov	lr, r7
 8000844:	2620      	movs	r6, #32
 8000846:	fbb1 f1f7 	udiv	r1, r1, r7
 800084a:	eba2 0208 	sub.w	r2, r2, r8
 800084e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000852:	e766      	b.n	8000722 <__udivmoddi4+0xfa>
 8000854:	4601      	mov	r1, r0
 8000856:	e718      	b.n	800068a <__udivmoddi4+0x62>
 8000858:	4610      	mov	r0, r2
 800085a:	e72c      	b.n	80006b6 <__udivmoddi4+0x8e>
 800085c:	f1c6 0220 	rsb	r2, r6, #32
 8000860:	fa2e f302 	lsr.w	r3, lr, r2
 8000864:	40b7      	lsls	r7, r6
 8000866:	40b1      	lsls	r1, r6
 8000868:	fa20 f202 	lsr.w	r2, r0, r2
 800086c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000870:	430a      	orrs	r2, r1
 8000872:	fbb3 f8fe 	udiv	r8, r3, lr
 8000876:	b2bc      	uxth	r4, r7
 8000878:	fb0e 3318 	mls	r3, lr, r8, r3
 800087c:	0c11      	lsrs	r1, r2, #16
 800087e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000882:	fb08 f904 	mul.w	r9, r8, r4
 8000886:	40b0      	lsls	r0, r6
 8000888:	4589      	cmp	r9, r1
 800088a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800088e:	b280      	uxth	r0, r0
 8000890:	d93e      	bls.n	8000910 <__udivmoddi4+0x2e8>
 8000892:	1879      	adds	r1, r7, r1
 8000894:	f108 3cff 	add.w	ip, r8, #4294967295
 8000898:	d201      	bcs.n	800089e <__udivmoddi4+0x276>
 800089a:	4589      	cmp	r9, r1
 800089c:	d81f      	bhi.n	80008de <__udivmoddi4+0x2b6>
 800089e:	eba1 0109 	sub.w	r1, r1, r9
 80008a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008a6:	fb09 f804 	mul.w	r8, r9, r4
 80008aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ae:	b292      	uxth	r2, r2
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	4542      	cmp	r2, r8
 80008b6:	d229      	bcs.n	800090c <__udivmoddi4+0x2e4>
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80008be:	d2c4      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c0:	4542      	cmp	r2, r8
 80008c2:	d2c2      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c4:	f1a9 0102 	sub.w	r1, r9, #2
 80008c8:	443a      	add	r2, r7
 80008ca:	e7be      	b.n	800084a <__udivmoddi4+0x222>
 80008cc:	45f0      	cmp	r8, lr
 80008ce:	d29d      	bcs.n	800080c <__udivmoddi4+0x1e4>
 80008d0:	ebbe 0302 	subs.w	r3, lr, r2
 80008d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008d8:	3801      	subs	r0, #1
 80008da:	46e1      	mov	r9, ip
 80008dc:	e796      	b.n	800080c <__udivmoddi4+0x1e4>
 80008de:	eba7 0909 	sub.w	r9, r7, r9
 80008e2:	4449      	add	r1, r9
 80008e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ec:	fb09 f804 	mul.w	r8, r9, r4
 80008f0:	e7db      	b.n	80008aa <__udivmoddi4+0x282>
 80008f2:	4673      	mov	r3, lr
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1ce>
 80008f6:	4650      	mov	r0, sl
 80008f8:	e766      	b.n	80007c8 <__udivmoddi4+0x1a0>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e6fd      	b.n	80006fa <__udivmoddi4+0xd2>
 80008fe:	443b      	add	r3, r7
 8000900:	3a02      	subs	r2, #2
 8000902:	e733      	b.n	800076c <__udivmoddi4+0x144>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	443b      	add	r3, r7
 800090a:	e71c      	b.n	8000746 <__udivmoddi4+0x11e>
 800090c:	4649      	mov	r1, r9
 800090e:	e79c      	b.n	800084a <__udivmoddi4+0x222>
 8000910:	eba1 0109 	sub.w	r1, r1, r9
 8000914:	46c4      	mov	ip, r8
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fb09 f804 	mul.w	r8, r9, r4
 800091e:	e7c4      	b.n	80008aa <__udivmoddi4+0x282>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000928:	b0a6      	sub	sp, #152	@ 0x98
 800092a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fcde 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f910 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f000 fa9a 	bl	8000e6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000938:	f000 fa6e 	bl	8000e18 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800093c:	f000 f976 	bl	8000c2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000940:	f000 fa16 	bl	8000d70 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM once, set initial duty */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 250);   // initial duty
 8000944:	4b76      	ldr	r3, [pc, #472]	@ (8000b20 <main+0x1fc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	22fa      	movs	r2, #250	@ 0xfa
 800094a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4874      	ldr	r0, [pc, #464]	@ (8000b20 <main+0x1fc>)
 8000950:	f001 fd02 	bl	8002358 <HAL_TIM_PWM_Start>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <main+0x3a>
  {
    Error_Handler();
 800095a:	f000 fb0b 	bl	8000f74 <Error_Handler>
  }

  /* Start encoder timer */
  if (HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK) {
 800095e:	213c      	movs	r1, #60	@ 0x3c
 8000960:	4870      	ldr	r0, [pc, #448]	@ (8000b24 <main+0x200>)
 8000962:	f001 fe4f 	bl	8002604 <HAL_TIM_Encoder_Start>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <main+0x4c>
    Error_Handler();
 800096c:	f000 fb02 	bl	8000f74 <Error_Handler>
  }

  /* Initialize last count depending on timer's ARR width */
  if (htim3.Init.Period <= 0xFFFFu) {
 8000970:	4b6c      	ldr	r3, [pc, #432]	@ (8000b24 <main+0x200>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000978:	d206      	bcs.n	8000988 <main+0x64>
      last_cnt16 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim3);
 800097a:	4b6a      	ldr	r3, [pc, #424]	@ (8000b24 <main+0x200>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b69      	ldr	r3, [pc, #420]	@ (8000b28 <main+0x204>)
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	e004      	b.n	8000992 <main+0x6e>
  } else {
      last_cnt32 = __HAL_TIM_GET_COUNTER(&htim3);
 8000988:	4b66      	ldr	r3, [pc, #408]	@ (8000b24 <main+0x200>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098e:	4a67      	ldr	r2, [pc, #412]	@ (8000b2c <main+0x208>)
 8000990:	6013      	str	r3, [r2, #0]
  }

  /* Timestamp for next sample */
  uint32_t last_sample_tick = HAL_GetTick();
 8000992:	f000 fd11 	bl	80013b8 <HAL_GetTick>
 8000996:	67f8      	str	r0, [r7, #124]	@ 0x7c

  uint32_t last_motor_toggle = HAL_GetTick();
 8000998:	f000 fd0e 	bl	80013b8 <HAL_GetTick>
 800099c:	67b8      	str	r0, [r7, #120]	@ 0x78
  const uint32_t MOTOR_TOGGLE_MS = 3000;
 800099e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80009a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint8_t motor_dir = 0; // 0 = forward, 1 = reverse
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* --- non-blocking sample every SAMPLE_INTERVAL_MS --- */
	  uint32_t now = HAL_GetTick();
 80009aa:	f000 fd05 	bl	80013b8 <HAL_GetTick>
 80009ae:	66b8      	str	r0, [r7, #104]	@ 0x68
	  if ((now - last_sample_tick) >= SAMPLE_INTERVAL_MS)
 80009b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80009b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b63      	cmp	r3, #99	@ 0x63
 80009b8:	d971      	bls.n	8000a9e <main+0x17a>
	  {
	    last_sample_tick += SAMPLE_INTERVAL_MS; // keep periodic (better than = now)
 80009ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009bc:	3364      	adds	r3, #100	@ 0x64
 80009be:	67fb      	str	r3, [r7, #124]	@ 0x7c

	    /* Read current counter value */
	    uint32_t cur_cnt = __HAL_TIM_GET_COUNTER(&htim3);
 80009c0:	4b58      	ldr	r3, [pc, #352]	@ (8000b24 <main+0x200>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c6:	667b      	str	r3, [r7, #100]	@ 0x64
	    int32_t delta_counts = 0; // signed delta for this interval
 80009c8:	2300      	movs	r3, #0
 80009ca:	673b      	str	r3, [r7, #112]	@ 0x70

	    if (htim3.Init.Period <= 0xFFFFu)
 80009cc:	4b55      	ldr	r3, [pc, #340]	@ (8000b24 <main+0x200>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009d4:	d212      	bcs.n	80009fc <main+0xd8>
	    {
	      /* 16-bit timer case: use 16-bit signed delta to handle wrap */
	      uint16_t cur16 = (uint16_t)cur_cnt;
 80009d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009d8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	      int16_t d16 = (int16_t)(cur16 - last_cnt16); // signed cast handles wrap-around
 80009dc:	4b52      	ldr	r3, [pc, #328]	@ (8000b28 <main+0x204>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	      delta_counts = (int32_t)d16;
 80009ec:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80009f0:	673b      	str	r3, [r7, #112]	@ 0x70
	      last_cnt16 = cur16;
 80009f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000b28 <main+0x204>)
 80009f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80009f8:	8013      	strh	r3, [r2, #0]
 80009fa:	e00b      	b.n	8000a14 <main+0xf0>
	    }
	    else
	    {
	      /* 32-bit timer case */
	      uint32_t cur32 = cur_cnt;
 80009fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009fe:	663b      	str	r3, [r7, #96]	@ 0x60
	      int32_t d32 = (int32_t)((int32_t)cur32 - (int32_t)last_cnt32); // signed delta
 8000a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a02:	4a4a      	ldr	r2, [pc, #296]	@ (8000b2c <main+0x208>)
 8000a04:	6812      	ldr	r2, [r2, #0]
 8000a06:	1a9b      	subs	r3, r3, r2
 8000a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      delta_counts = (int32_t)d32;
 8000a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a0c:	673b      	str	r3, [r7, #112]	@ 0x70
	      last_cnt32 = cur32;
 8000a0e:	4a47      	ldr	r2, [pc, #284]	@ (8000b2c <main+0x208>)
 8000a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a12:	6013      	str	r3, [r2, #0]
	    }

	    /* Update cumulative position (counts) */
	    encoder_position_counts += (int64_t)delta_counts;
 8000a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a16:	17da      	asrs	r2, r3, #31
 8000a18:	461c      	mov	r4, r3
 8000a1a:	4615      	mov	r5, r2
 8000a1c:	4b44      	ldr	r3, [pc, #272]	@ (8000b30 <main+0x20c>)
 8000a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a22:	eb14 0802 	adds.w	r8, r4, r2
 8000a26:	eb45 0903 	adc.w	r9, r5, r3
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <main+0x20c>)
 8000a2c:	e9c3 8900 	strd	r8, r9, [r3]

	    /* Compute RPM:
	       delta_counts occurred during SAMPLE_INTERVAL_MS milliseconds.
	       RPM = (delta_counts / counts_per_rev) * (60 / dt_seconds)
	    */
	    float dt_sec = (float)SAMPLE_INTERVAL_MS / 1000.0f;
 8000a30:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <main+0x210>)
 8000a32:	657b      	str	r3, [r7, #84]	@ 0x54
	    motor_rpm = ((float)delta_counts / (float)COUNTS_PER_REV) * (60.0f / dt_sec);
 8000a34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000b38 <main+0x214>
 8000a42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a46:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8000b3c <main+0x218>
 8000a4a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000a4e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a56:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <main+0x21c>)
 8000a58:	edc3 7a00 	vstr	s15, [r3]

	    /* Optionally send to UART for debug (ensure huart2 initialized) */
	    char msg[80];
	    int len = snprintf(msg, sizeof(msg), "Pos: %lld cnt, d=%ld, RPM=%.2f\r\n", (long long)encoder_position_counts, (long)delta_counts, motor_rpm);
 8000a5c:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <main+0x20c>)
 8000a5e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8000a62:	4b37      	ldr	r3, [pc, #220]	@ (8000b40 <main+0x21c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd6e 	bl	8000548 <__aeabi_f2d>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	460b      	mov	r3, r1
 8000a70:	4638      	mov	r0, r7
 8000a72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	e9cd ab00 	strd	sl, fp, [sp]
 8000a7e:	4a31      	ldr	r2, [pc, #196]	@ (8000b44 <main+0x220>)
 8000a80:	2150      	movs	r1, #80	@ 0x50
 8000a82:	f002 ff75 	bl	8003970 <sniprintf>
 8000a86:	6538      	str	r0, [r7, #80]	@ 0x50
	    if (len > 0) {
 8000a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dd07      	ble.n	8000a9e <main+0x17a>
	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)len, HAL_MAX_DELAY);
 8000a8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4639      	mov	r1, r7
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	482b      	ldr	r0, [pc, #172]	@ (8000b48 <main+0x224>)
 8000a9a:	f002 fbad 	bl	80031f8 <HAL_UART_Transmit>
	    }
	  }

    /* USER CODE END WHILE */
	  if ((HAL_GetTick() - last_motor_toggle) >= MOTOR_TOGGLE_MS) {
 8000a9e:	f000 fc8b 	bl	80013b8 <HAL_GetTick>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	f63f af7d 	bhi.w	80009aa <main+0x86>
	      last_motor_toggle += MOTOR_TOGGLE_MS;
 8000ab0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ab4:	4413      	add	r3, r2
 8000ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
	      motor_dir ^= 1;
 8000ab8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000abc:	f083 0301 	eor.w	r3, r3, #1
 8000ac0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	      if (motor_dir == 0) {
 8000ac4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d114      	bne.n	8000af6 <main+0x1d2>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	481e      	ldr	r0, [pc, #120]	@ (8000b4c <main+0x228>)
 8000ad2:	f000 fee7 	bl	80018a4 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2120      	movs	r1, #32
 8000ada:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <main+0x228>)
 8000adc:	f000 fee2 	bl	80018a4 <HAL_GPIO_WritePin>
	          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <main+0x1fc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
	          HAL_GPIO_WritePin(KARTIK_LED_GPIO_Port, KARTIK_LED_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2120      	movs	r1, #32
 8000aee:	4818      	ldr	r0, [pc, #96]	@ (8000b50 <main+0x22c>)
 8000af0:	f000 fed8 	bl	80018a4 <HAL_GPIO_WritePin>
 8000af4:	e759      	b.n	80009aa <main+0x86>
	      } else {
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	4814      	ldr	r0, [pc, #80]	@ (8000b4c <main+0x228>)
 8000afc:	f000 fed2 	bl	80018a4 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <main+0x228>)
 8000b06:	f000 fecd 	bl	80018a4 <HAL_GPIO_WritePin>
	          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <main+0x1fc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b12:	635a      	str	r2, [r3, #52]	@ 0x34
	          HAL_GPIO_WritePin(KARTIK_LED_GPIO_Port, KARTIK_LED_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2120      	movs	r1, #32
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <main+0x22c>)
 8000b1a:	f000 fec3 	bl	80018a4 <HAL_GPIO_WritePin>
  {
 8000b1e:	e744      	b.n	80009aa <main+0x86>
 8000b20:	2000007c 	.word	0x2000007c
 8000b24:	200000c4 	.word	0x200000c4
 8000b28:	20000164 	.word	0x20000164
 8000b2c:	20000168 	.word	0x20000168
 8000b30:	20000158 	.word	0x20000158
 8000b34:	3dcccccd 	.word	0x3dcccccd
 8000b38:	44840000 	.word	0x44840000
 8000b3c:	42700000 	.word	0x42700000
 8000b40:	20000160 	.word	0x20000160
 8000b44:	080042f0 	.word	0x080042f0
 8000b48:	2000010c 	.word	0x2000010c
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020000 	.word	0x40020000

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 ff3a 	bl	80039dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a21      	ldr	r2, [pc, #132]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bcc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fe7a 	bl	80018d8 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bea:	f000 f9c3 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f8dc 	bl	8001dc8 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c16:	f000 f9ad 	bl	8000f74 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3750      	adds	r7, #80	@ 0x50
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b096      	sub	sp, #88	@ 0x58
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2220      	movs	r2, #32
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 feb9 	bl	80039dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8000d6c <MX_TIM1_Init+0x140>)
 8000c6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000c70:	4b3d      	ldr	r3, [pc, #244]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c72:	2253      	movs	r2, #83	@ 0x53
 8000c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c7e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8a:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c96:	4834      	ldr	r0, [pc, #208]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c98:	f001 fab6 	bl	8002208 <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ca2:	f000 f967 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482d      	ldr	r0, [pc, #180]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000cb4:	f001 fdf6 	bl	80028a4 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cbe:	f000 f959 	bl	8000f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cc2:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000cc4:	f001 faef 	bl	80022a6 <HAL_TIM_PWM_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cce:	f000 f951 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4821      	ldr	r0, [pc, #132]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000ce2:	f002 f979 	bl	8002fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cec:	f000 f942 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2360      	movs	r3, #96	@ 0x60
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4814      	ldr	r0, [pc, #80]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000d16:	f001 fd03 	bl	8002720 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d20:	f000 f928 	bl	8000f74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000d3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000d4a:	f002 f9b3 	bl	80030b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000d54:	f000 f90e 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000d5a:	f000 f9a3 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000d5e:	bf00      	nop
 8000d60:	3758      	adds	r7, #88	@ 0x58
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000007c 	.word	0x2000007c
 8000d6c:	40010000 	.word	0x40010000

08000d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	@ 0x30
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2224      	movs	r2, #36	@ 0x24
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fe2c 	bl	80039dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d8c:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000d8e:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <MX_TIM3_Init+0xa4>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000db2:	2303      	movs	r3, #3
 8000db4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000dde:	f001 fb6b 	bl	80024b8 <HAL_TIM_Encoder_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000de8:	f000 f8c4 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_TIM3_Init+0xa0>)
 8000dfa:	f002 f8ed 	bl	8002fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e04:	f000 f8b6 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	@ 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000c4 	.word	0x200000c4
 8000e14:	40000400 	.word	0x40000400

08000e18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <MX_USART2_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f002 f982 	bl	8003158 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f88b 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000010c 	.word	0x2000010c
 8000e68:	40004400 	.word	0x40004400

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a36      	ldr	r2, [pc, #216]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <MX_GPIO_Init+0xf8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KARTIK_LED_GPIO_Port, KARTIK_LED_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	481c      	ldr	r0, [pc, #112]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000ef8:	f000 fcd4 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2130      	movs	r1, #48	@ 0x30
 8000f00:	481a      	ldr	r0, [pc, #104]	@ (8000f6c <MX_GPIO_Init+0x100>)
 8000f02:	f000 fccf 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f0c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4814      	ldr	r0, [pc, #80]	@ (8000f70 <MX_GPIO_Init+0x104>)
 8000f1e:	f000 fb3d 	bl	800159c <HAL_GPIO_Init>

  /*Configure GPIO pin : KARTIK_LED_Pin */
  GPIO_InitStruct.Pin = KARTIK_LED_Pin;
 8000f22:	2320      	movs	r3, #32
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KARTIK_LED_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000f3a:	f000 fb2f 	bl	800159c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f3e:	2330      	movs	r3, #48	@ 0x30
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_GPIO_Init+0x100>)
 8000f56:	f000 fb21 	bl	800159c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020800 	.word	0x40020800

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <Error_Handler+0x8>

08000f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <HAL_TIM_Base_MspInit+0x3c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10d      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_TIM_Base_MspInit+0x40>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <HAL_TIM_Base_MspInit+0x40>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <HAL_TIM_Base_MspInit+0x40>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40010000 	.word	0x40010000
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	@ (8001098 <HAL_TIM_Encoder_MspInit+0x84>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12b      	bne.n	800108e <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b18      	ldr	r3, [pc, #96]	@ (800109c <HAL_TIM_Encoder_MspInit+0x88>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a17      	ldr	r2, [pc, #92]	@ (800109c <HAL_TIM_Encoder_MspInit+0x88>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_TIM_Encoder_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <HAL_TIM_Encoder_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	@ (800109c <HAL_TIM_Encoder_MspInit+0x88>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_TIM_Encoder_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106e:	23c0      	movs	r3, #192	@ 0xc0
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107e:	2302      	movs	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800108a:	f000 fa87 	bl	800159c <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	@ 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40000400 	.word	0x40000400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <HAL_TIM_MspPostInit+0x68>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d11e      	bne.n	8001104 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_TIM_MspPostInit+0x70>)
 8001100:	f000 fa4c 	bl	800159c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010000 	.word	0x40010000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a19      	ldr	r2, [pc, #100]	@ (800119c <HAL_UART_MspInit+0x84>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12b      	bne.n	8001192 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_UART_MspInit+0x88>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_UART_MspInit+0x88>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	6413      	str	r3, [r2, #64]	@ 0x40
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_UART_MspInit+0x88>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <HAL_UART_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <HAL_UART_MspInit+0x88>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_UART_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001172:	230c      	movs	r3, #12
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	2307      	movs	r3, #7
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <HAL_UART_MspInit+0x8c>)
 800118e:	f000 fa05 	bl	800159c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40004400 	.word	0x40004400
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <NMI_Handler+0x4>

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <MemManage_Handler+0x4>

080011c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <UsageFault_Handler+0x4>

080011d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fe:	f000 f8c7 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f002 fbd8 	bl	80039ec <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	@ (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20018000 	.word	0x20018000
 8001268:	00000400 	.word	0x00000400
 800126c:	2000016c 	.word	0x2000016c
 8001270:	200002c0 	.word	0x200002c0

08001274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800129c:	f7ff ffea 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	@ (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	@ (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f002 fb97 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff fb2b 	bl	8000924 <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012dc:	08004370 	.word	0x08004370
  ldr r2, =_sbss
 80012e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012e4:	200002bc 	.word	0x200002bc

080012e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <HAL_Init+0x40>)
 80012f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <HAL_Init+0x40>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	@ (800132c <HAL_Init+0x40>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f90d 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fe2e 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f917 	bl	8001582 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f8ed 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	@ (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000170 	.word	0x20000170

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000170 	.word	0x20000170

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	e159      	b.n	800186c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b8:	2201      	movs	r2, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 8148 	bne.w	8001866 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d005      	beq.n	80015ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d130      	bne.n	8001650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b03      	cmp	r3, #3
 800165a:	d017      	beq.n	800168c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d123      	bne.n	80016e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	220f      	movs	r2, #15
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3208      	adds	r2, #8
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0203 	and.w	r2, r3, #3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a2 	beq.w	8001866 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b57      	ldr	r3, [pc, #348]	@ (8001884 <HAL_GPIO_Init+0x2e8>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	4a56      	ldr	r2, [pc, #344]	@ (8001884 <HAL_GPIO_Init+0x2e8>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001730:	6453      	str	r3, [r2, #68]	@ 0x44
 8001732:	4b54      	ldr	r3, [pc, #336]	@ (8001884 <HAL_GPIO_Init+0x2e8>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173e:	4a52      	ldr	r2, [pc, #328]	@ (8001888 <HAL_GPIO_Init+0x2ec>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a49      	ldr	r2, [pc, #292]	@ (800188c <HAL_GPIO_Init+0x2f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x202>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a48      	ldr	r2, [pc, #288]	@ (8001890 <HAL_GPIO_Init+0x2f4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x1fe>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a47      	ldr	r2, [pc, #284]	@ (8001894 <HAL_GPIO_Init+0x2f8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x1fa>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a46      	ldr	r2, [pc, #280]	@ (8001898 <HAL_GPIO_Init+0x2fc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x1f6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a45      	ldr	r2, [pc, #276]	@ (800189c <HAL_GPIO_Init+0x300>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x1f2>
 800178a:	2304      	movs	r3, #4
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x204>
 800178e:	2307      	movs	r3, #7
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x204>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x204>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x204>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x204>
 800179e:	2300      	movs	r3, #0
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b0:	4935      	ldr	r1, [pc, #212]	@ (8001888 <HAL_GPIO_Init+0x2ec>)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b38      	ldr	r3, [pc, #224]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a2f      	ldr	r2, [pc, #188]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a24      	ldr	r2, [pc, #144]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001812:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001836:	4a1a      	ldr	r2, [pc, #104]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001860:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f aea2 	bls.w	80015b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40013c00 	.word	0x40013c00

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c0:	e003      	b.n	80018ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	041a      	lsls	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e267      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d075      	beq.n	80019e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018f6:	4b88      	ldr	r3, [pc, #544]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d00c      	beq.n	800191c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800190a:	2b08      	cmp	r3, #8
 800190c:	d112      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b82      	ldr	r3, [pc, #520]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d05b      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d157      	bne.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e242      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x74>
 800193e:	4b76      	ldr	r3, [pc, #472]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a75      	ldr	r2, [pc, #468]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b70      	ldr	r3, [pc, #448]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6f      	ldr	r2, [pc, #444]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6d      	ldr	r3, [pc, #436]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6c      	ldr	r2, [pc, #432]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 8001970:	4b69      	ldr	r3, [pc, #420]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a68      	ldr	r2, [pc, #416]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b66      	ldr	r3, [pc, #408]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a65      	ldr	r2, [pc, #404]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fd12 	bl	80013b8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fd0e 	bl	80013b8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e207      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xc0>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcfe 	bl	80013b8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcfa 	bl	80013b8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1f3      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0xe8>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b47      	ldr	r3, [pc, #284]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1c7      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4937      	ldr	r1, [pc, #220]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <HAL_RCC_OscConfig+0x244>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fcb3 	bl	80013b8 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fcaf 	bl	80013b8 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1a8      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4925      	ldr	r1, [pc, #148]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_RCC_OscConfig+0x244>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc92 	bl	80013b8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc8e 	bl	80013b8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e187      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d036      	beq.n	8001b30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_RCC_OscConfig+0x248>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fc72 	bl	80013b8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc6e 	bl	80013b8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e167      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_RCC_OscConfig+0x240>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x200>
 8001af6:	e01b      	b.n	8001b30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_RCC_OscConfig+0x248>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fc5b 	bl	80013b8 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	e00e      	b.n	8001b24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff fc57 	bl	80013b8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d907      	bls.n	8001b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e150      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	42470000 	.word	0x42470000
 8001b20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	4b88      	ldr	r3, [pc, #544]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ea      	bne.n	8001b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8097 	beq.w	8001c6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b42:	4b81      	ldr	r3, [pc, #516]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b7d      	ldr	r3, [pc, #500]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a7c      	ldr	r2, [pc, #496]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b77      	ldr	r3, [pc, #476]	@ (8001d4c <HAL_RCC_OscConfig+0x474>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7a:	4b74      	ldr	r3, [pc, #464]	@ (8001d4c <HAL_RCC_OscConfig+0x474>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a73      	ldr	r2, [pc, #460]	@ (8001d4c <HAL_RCC_OscConfig+0x474>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b86:	f7ff fc17 	bl	80013b8 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff fc13 	bl	80013b8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e10c      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d4c <HAL_RCC_OscConfig+0x474>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2ea>
 8001bb4:	4b64      	ldr	r3, [pc, #400]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb8:	4a63      	ldr	r2, [pc, #396]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x324>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x30c>
 8001bca:	4b5f      	ldr	r3, [pc, #380]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	4a5e      	ldr	r2, [pc, #376]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bda:	4a5b      	ldr	r2, [pc, #364]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0x324>
 8001be4:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be8:	4a57      	ldr	r2, [pc, #348]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf0:	4b55      	ldr	r3, [pc, #340]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf4:	4a54      	ldr	r2, [pc, #336]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 0304 	bic.w	r3, r3, #4
 8001bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d015      	beq.n	8001c30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff fbd8 	bl	80013b8 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fbd4 	bl	80013b8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0cb      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c22:	4b49      	ldr	r3, [pc, #292]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ee      	beq.n	8001c0c <HAL_RCC_OscConfig+0x334>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fbc2 	bl	80013b8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff fbbe 	bl	80013b8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0b5      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ee      	bne.n	8001c38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	4a38      	ldr	r2, [pc, #224]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a1 	beq.w	8001db8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d05c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d141      	bne.n	8001d0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_RCC_OscConfig+0x478>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb92 	bl	80013b8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff fb8e 	bl	80013b8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e087      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	491b      	ldr	r1, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_RCC_OscConfig+0x478>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fb67 	bl	80013b8 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff fb63 	bl	80013b8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e05c      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x416>
 8001d0c:	e054      	b.n	8001db8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_RCC_OscConfig+0x478>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fb50 	bl	80013b8 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff fb4c 	bl	80013b8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e045      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_OscConfig+0x470>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x444>
 8001d3a:	e03d      	b.n	8001db8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e038      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_RCC_OscConfig+0x4ec>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d028      	beq.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d121      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d11a      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d84:	4013      	ands	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d111      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0cc      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b68      	ldr	r3, [pc, #416]	@ (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d90c      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b65      	ldr	r3, [pc, #404]	@ (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b63      	ldr	r3, [pc, #396]	@ (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0b8      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e1c:	4b59      	ldr	r3, [pc, #356]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a58      	ldr	r2, [pc, #352]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e34:	4b53      	ldr	r3, [pc, #332]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a52      	ldr	r2, [pc, #328]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	494d      	ldr	r1, [pc, #308]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d044      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d119      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e07f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b3f      	ldr	r3, [pc, #252]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e067      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b37      	ldr	r3, [pc, #220]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4934      	ldr	r1, [pc, #208]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff fa7e 	bl	80013b8 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff fa7a 	bl	80013b8 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d20c      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e032      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4916      	ldr	r1, [pc, #88]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490e      	ldr	r1, [pc, #56]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f4e:	f000 f821 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	490a      	ldr	r1, [pc, #40]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	4a09      	ldr	r2, [pc, #36]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f9de 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08004314 	.word	0x08004314
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f98:	b094      	sub	sp, #80	@ 0x50
 8001f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fac:	4b79      	ldr	r3, [pc, #484]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	f200 80e1 	bhi.w	8002180 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x3a>
 8001fc6:	e0db      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b73      	ldr	r3, [pc, #460]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fcc:	e0db      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fce:	4b73      	ldr	r3, [pc, #460]	@ (800219c <HAL_RCC_GetSysClockFreq+0x208>)
 8001fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fd2:	e0d8      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fde:	4b6d      	ldr	r3, [pc, #436]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
 8002002:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002006:	4622      	mov	r2, r4
 8002008:	462b      	mov	r3, r5
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0159      	lsls	r1, r3, #5
 8002014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002018:	0150      	lsls	r0, r2, #5
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4621      	mov	r1, r4
 8002020:	1a51      	subs	r1, r2, r1
 8002022:	6139      	str	r1, [r7, #16]
 8002024:	4629      	mov	r1, r5
 8002026:	eb63 0301 	sbc.w	r3, r3, r1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002038:	4659      	mov	r1, fp
 800203a:	018b      	lsls	r3, r1, #6
 800203c:	4651      	mov	r1, sl
 800203e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002042:	4651      	mov	r1, sl
 8002044:	018a      	lsls	r2, r1, #6
 8002046:	4651      	mov	r1, sl
 8002048:	ebb2 0801 	subs.w	r8, r2, r1
 800204c:	4659      	mov	r1, fp
 800204e:	eb63 0901 	sbc.w	r9, r3, r1
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800205e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002066:	4690      	mov	r8, r2
 8002068:	4699      	mov	r9, r3
 800206a:	4623      	mov	r3, r4
 800206c:	eb18 0303 	adds.w	r3, r8, r3
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	462b      	mov	r3, r5
 8002074:	eb49 0303 	adc.w	r3, r9, r3
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002086:	4629      	mov	r1, r5
 8002088:	024b      	lsls	r3, r1, #9
 800208a:	4621      	mov	r1, r4
 800208c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002090:	4621      	mov	r1, r4
 8002092:	024a      	lsls	r2, r1, #9
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800209a:	2200      	movs	r2, #0
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800209e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020a4:	f7fe faa8 	bl	80005f8 <__aeabi_uldivmod>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4613      	mov	r3, r2
 80020ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020b0:	e058      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b2:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	2200      	movs	r2, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	4611      	mov	r1, r2
 80020be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020cc:	4642      	mov	r2, r8
 80020ce:	464b      	mov	r3, r9
 80020d0:	f04f 0000 	mov.w	r0, #0
 80020d4:	f04f 0100 	mov.w	r1, #0
 80020d8:	0159      	lsls	r1, r3, #5
 80020da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020de:	0150      	lsls	r0, r2, #5
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4641      	mov	r1, r8
 80020e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ea:	4649      	mov	r1, r9
 80020ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002100:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002104:	ebb2 040a 	subs.w	r4, r2, sl
 8002108:	eb63 050b 	sbc.w	r5, r3, fp
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	00eb      	lsls	r3, r5, #3
 8002116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211a:	00e2      	lsls	r2, r4, #3
 800211c:	4614      	mov	r4, r2
 800211e:	461d      	mov	r5, r3
 8002120:	4643      	mov	r3, r8
 8002122:	18e3      	adds	r3, r4, r3
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	464b      	mov	r3, r9
 8002128:	eb45 0303 	adc.w	r3, r5, r3
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213a:	4629      	mov	r1, r5
 800213c:	028b      	lsls	r3, r1, #10
 800213e:	4621      	mov	r1, r4
 8002140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002144:	4621      	mov	r1, r4
 8002146:	028a      	lsls	r2, r1, #10
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800214e:	2200      	movs	r2, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	61fa      	str	r2, [r7, #28]
 8002154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002158:	f7fe fa4e 	bl	80005f8 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800217e:	e002      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x204>)
 8002182:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002188:	4618      	mov	r0, r3
 800218a:	3750      	adds	r7, #80	@ 0x50
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08004324 	.word	0x08004324

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffdc 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08004324 	.word	0x08004324

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e041      	b.n	800229e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fece 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 fbf4 	bl	8002a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e041      	b.n	800233c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f839 	bl	8002344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f000 fba5 	bl	8002a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_TIM_PWM_Start+0x24>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e022      	b.n	80023c2 <HAL_TIM_PWM_Start+0x6a>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d109      	bne.n	8002396 <HAL_TIM_PWM_Start+0x3e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	bf14      	ite	ne
 800238e:	2301      	movne	r3, #1
 8002390:	2300      	moveq	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e015      	b.n	80023c2 <HAL_TIM_PWM_Start+0x6a>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d109      	bne.n	80023b0 <HAL_TIM_PWM_Start+0x58>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e008      	b.n	80023c2 <HAL_TIM_PWM_Start+0x6a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e068      	b.n	800249c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start+0x82>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023d8:	e013      	b.n	8002402 <HAL_TIM_PWM_Start+0xaa>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d104      	bne.n	80023ea <HAL_TIM_PWM_Start+0x92>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023e8:	e00b      	b.n	8002402 <HAL_TIM_PWM_Start+0xaa>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_PWM_Start+0xa2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f8:	e003      	b.n	8002402 <HAL_TIM_PWM_Start+0xaa>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fdbe 	bl	8002f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a23      	ldr	r2, [pc, #140]	@ (80024a4 <HAL_TIM_PWM_Start+0x14c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d107      	bne.n	800242a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <HAL_TIM_PWM_Start+0x14c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d018      	beq.n	8002466 <HAL_TIM_PWM_Start+0x10e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800243c:	d013      	beq.n	8002466 <HAL_TIM_PWM_Start+0x10e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_TIM_PWM_Start+0x150>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00e      	beq.n	8002466 <HAL_TIM_PWM_Start+0x10e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <HAL_TIM_PWM_Start+0x154>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_TIM_PWM_Start+0x10e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <HAL_TIM_PWM_Start+0x158>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_TIM_PWM_Start+0x10e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <HAL_TIM_PWM_Start+0x15c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d111      	bne.n	800248a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b06      	cmp	r3, #6
 8002476:	d010      	beq.n	800249a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002488:	e007      	b.n	800249a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800
 80024b0:	40000c00 	.word	0x40000c00
 80024b4:	40014000 	.word	0x40014000

080024b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e097      	b.n	80025fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe fd97 	bl	8001014 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024fc:	f023 0307 	bic.w	r3, r3, #7
 8002500:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	4619      	mov	r1, r3
 800250c:	4610      	mov	r0, r2
 800250e:	f000 fa91 	bl	8002a34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	4313      	orrs	r3, r2
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002558:	f023 030c 	bic.w	r3, r3, #12
 800255c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002564:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	4313      	orrs	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	011a      	lsls	r2, r3, #4
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	4313      	orrs	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800259e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4313      	orrs	r3, r2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002614:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800261c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002624:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800262c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d110      	bne.n	8002656 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d102      	bne.n	8002640 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d001      	beq.n	8002644 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e069      	b.n	8002718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002654:	e031      	b.n	80026ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d110      	bne.n	800267e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800265c:	7bbb      	ldrb	r3, [r7, #14]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002662:	7b3b      	ldrb	r3, [r7, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e055      	b.n	8002718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800267c:	e01d      	b.n	80026ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d108      	bne.n	8002696 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002684:	7bbb      	ldrb	r3, [r7, #14]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800268a:	7b7b      	ldrb	r3, [r7, #13]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d102      	bne.n	8002696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002690:	7b3b      	ldrb	r3, [r7, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d001      	beq.n	800269a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e03e      	b.n	8002718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_TIM_Encoder_Start+0xc4>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d008      	beq.n	80026d8 <HAL_TIM_Encoder_Start+0xd4>
 80026c6:	e00f      	b.n	80026e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fc5b 	bl	8002f8c <TIM_CCxChannelCmd>
      break;
 80026d6:	e016      	b.n	8002706 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	2104      	movs	r1, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fc53 	bl	8002f8c <TIM_CCxChannelCmd>
      break;
 80026e6:	e00e      	b.n	8002706 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fc4b 	bl	8002f8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	2104      	movs	r1, #4
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fc44 	bl	8002f8c <TIM_CCxChannelCmd>
      break;
 8002704:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800273a:	2302      	movs	r3, #2
 800273c:	e0ae      	b.n	800289c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	f200 809f 	bhi.w	800288c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800274e:	a201      	add	r2, pc, #4	@ (adr r2, 8002754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002789 	.word	0x08002789
 8002758:	0800288d 	.word	0x0800288d
 800275c:	0800288d 	.word	0x0800288d
 8002760:	0800288d 	.word	0x0800288d
 8002764:	080027c9 	.word	0x080027c9
 8002768:	0800288d 	.word	0x0800288d
 800276c:	0800288d 	.word	0x0800288d
 8002770:	0800288d 	.word	0x0800288d
 8002774:	0800280b 	.word	0x0800280b
 8002778:	0800288d 	.word	0x0800288d
 800277c:	0800288d 	.word	0x0800288d
 8002780:	0800288d 	.word	0x0800288d
 8002784:	0800284b 	.word	0x0800284b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f9d6 	bl	8002b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0208 	orr.w	r2, r2, #8
 80027a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6999      	ldr	r1, [r3, #24]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	619a      	str	r2, [r3, #24]
      break;
 80027c6:	e064      	b.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fa1c 	bl	8002c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6999      	ldr	r1, [r3, #24]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	021a      	lsls	r2, r3, #8
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	619a      	str	r2, [r3, #24]
      break;
 8002808:	e043      	b.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fa67 	bl	8002ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0208 	orr.w	r2, r2, #8
 8002824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0204 	bic.w	r2, r2, #4
 8002834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69d9      	ldr	r1, [r3, #28]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	61da      	str	r2, [r3, #28]
      break;
 8002848:	e023      	b.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fab1 	bl	8002db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69d9      	ldr	r1, [r3, #28]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	021a      	lsls	r2, r3, #8
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	61da      	str	r2, [r3, #28]
      break;
 800288a:	e002      	b.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	75fb      	strb	r3, [r7, #23]
      break;
 8002890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0x1c>
 80028bc:	2302      	movs	r3, #2
 80028be:	e0b4      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0x186>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f8:	d03e      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0xd4>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028fe:	f200 8087 	bhi.w	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002906:	f000 8086 	beq.w	8002a16 <HAL_TIM_ConfigClockSource+0x172>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800290e:	d87f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b70      	cmp	r3, #112	@ 0x70
 8002912:	d01a      	beq.n	800294a <HAL_TIM_ConfigClockSource+0xa6>
 8002914:	2b70      	cmp	r3, #112	@ 0x70
 8002916:	d87b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b60      	cmp	r3, #96	@ 0x60
 800291a:	d050      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x11a>
 800291c:	2b60      	cmp	r3, #96	@ 0x60
 800291e:	d877      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b50      	cmp	r3, #80	@ 0x50
 8002922:	d03c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0xfa>
 8002924:	2b50      	cmp	r3, #80	@ 0x50
 8002926:	d873      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b40      	cmp	r3, #64	@ 0x40
 800292a:	d058      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x13a>
 800292c:	2b40      	cmp	r3, #64	@ 0x40
 800292e:	d86f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b30      	cmp	r3, #48	@ 0x30
 8002932:	d064      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b30      	cmp	r3, #48	@ 0x30
 8002936:	d86b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b20      	cmp	r3, #32
 800293a:	d060      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d867      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b10      	cmp	r3, #16
 8002946:	d05a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	e062      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	f000 faf7 	bl	8002f4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800296c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	609a      	str	r2, [r3, #8]
      break;
 8002976:	e04f      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002988:	f000 fae0 	bl	8002f4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800299a:	609a      	str	r2, [r3, #8]
      break;
 800299c:	e03c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 fa54 	bl	8002e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2150      	movs	r1, #80	@ 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 faad 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 80029bc:	e02c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 fa73 	bl	8002eb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2160      	movs	r1, #96	@ 0x60
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fa9d 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e01c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 fa34 	bl	8002e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2140      	movs	r1, #64	@ 0x40
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fa8d 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e00c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 fa84 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002a0e:	e003      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e000      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a37      	ldr	r2, [pc, #220]	@ (8002b24 <TIM_Base_SetConfig+0xf0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00f      	beq.n	8002a6c <TIM_Base_SetConfig+0x38>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a52:	d00b      	beq.n	8002a6c <TIM_Base_SetConfig+0x38>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a34      	ldr	r2, [pc, #208]	@ (8002b28 <TIM_Base_SetConfig+0xf4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0x38>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a33      	ldr	r2, [pc, #204]	@ (8002b2c <TIM_Base_SetConfig+0xf8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0x38>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a32      	ldr	r2, [pc, #200]	@ (8002b30 <TIM_Base_SetConfig+0xfc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a28      	ldr	r2, [pc, #160]	@ (8002b24 <TIM_Base_SetConfig+0xf0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01b      	beq.n	8002abe <TIM_Base_SetConfig+0x8a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8c:	d017      	beq.n	8002abe <TIM_Base_SetConfig+0x8a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a25      	ldr	r2, [pc, #148]	@ (8002b28 <TIM_Base_SetConfig+0xf4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <TIM_Base_SetConfig+0x8a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a24      	ldr	r2, [pc, #144]	@ (8002b2c <TIM_Base_SetConfig+0xf8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00f      	beq.n	8002abe <TIM_Base_SetConfig+0x8a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a23      	ldr	r2, [pc, #140]	@ (8002b30 <TIM_Base_SetConfig+0xfc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00b      	beq.n	8002abe <TIM_Base_SetConfig+0x8a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <TIM_Base_SetConfig+0x100>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <TIM_Base_SetConfig+0x8a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a21      	ldr	r2, [pc, #132]	@ (8002b38 <TIM_Base_SetConfig+0x104>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d003      	beq.n	8002abe <TIM_Base_SetConfig+0x8a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a20      	ldr	r2, [pc, #128]	@ (8002b3c <TIM_Base_SetConfig+0x108>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d108      	bne.n	8002ad0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <TIM_Base_SetConfig+0xf0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d103      	bne.n	8002afe <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40014400 	.word	0x40014400
 8002b3c:	40014800 	.word	0x40014800

08002b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f023 0201 	bic.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f023 0302 	bic.w	r3, r3, #2
 8002b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <TIM_OC1_SetConfig+0xc8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10c      	bne.n	8002bb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0308 	bic.w	r3, r3, #8
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a13      	ldr	r2, [pc, #76]	@ (8002c08 <TIM_OC1_SetConfig+0xc8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d111      	bne.n	8002be2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	621a      	str	r2, [r3, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40010000 	.word	0x40010000

08002c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f023 0210 	bic.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0320 	bic.w	r3, r3, #32
 8002c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <TIM_OC2_SetConfig+0xd4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10d      	bne.n	8002c88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ce0 <TIM_OC2_SetConfig+0xd4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d113      	bne.n	8002cb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000

08002ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <TIM_OC3_SetConfig+0xd0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10d      	bne.n	8002d5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <TIM_OC3_SetConfig+0xd0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d113      	bne.n	8002d8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	621a      	str	r2, [r3, #32]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40010000 	.word	0x40010000

08002db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	031b      	lsls	r3, r3, #12
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a10      	ldr	r2, [pc, #64]	@ (8002e54 <TIM_OC4_SetConfig+0x9c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d109      	bne.n	8002e2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000

08002e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0201 	bic.w	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 030a 	bic.w	r3, r3, #10
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f023 0210 	bic.w	r2, r3, #16
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	031b      	lsls	r3, r3, #12
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f043 0307 	orr.w	r3, r3, #7
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	021a      	lsls	r2, r3, #8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1a      	ldr	r2, [r3, #32]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e050      	b.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1c      	ldr	r2, [pc, #112]	@ (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303c:	d013      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a18      	ldr	r2, [pc, #96]	@ (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a15      	ldr	r2, [pc, #84]	@ (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10c      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800306c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40014000 	.word	0x40014000

080030b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e03d      	b.n	800314c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e042      	b.n	80031f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd ffca 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	@ 0x24
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800319a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f973 	bl	8003488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	d175      	bne.n	8003304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Transmit+0x2c>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e06e      	b.n	8003306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2221      	movs	r2, #33	@ 0x21
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003236:	f7fe f8bf 	bl	80013b8 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003250:	d108      	bne.n	8003264 <HAL_UART_Transmit+0x6c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	e003      	b.n	800326c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800326c:	e02e      	b.n	80032cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2180      	movs	r1, #128	@ 0x80
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f848 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e03a      	b.n	8003306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3302      	adds	r3, #2
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e007      	b.n	80032be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1cb      	bne.n	800326e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	2140      	movs	r1, #64	@ 0x40
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f814 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e006      	b.n	8003306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	e03b      	b.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d037      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe f846 	bl	80013b8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <UART_WaitOnFlagUntilTimeout+0x30>
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e03a      	b.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d023      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b80      	cmp	r3, #128	@ 0x80
 8003354:	d020      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d01d      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b08      	cmp	r3, #8
 8003368:	d116      	bne.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f81d 	bl	80033c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2208      	movs	r2, #8
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e00f      	b.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d0b4      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b095      	sub	sp, #84	@ 0x54
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e5      	bne.n	80033c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	61fb      	str	r3, [r7, #28]
   return(result);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800341c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	2b01      	cmp	r3, #1
 8003436:	d119      	bne.n	800346c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	60bb      	str	r3, [r7, #8]
   return(result);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f023 0310 	bic.w	r3, r3, #16
 800344e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003458:	61ba      	str	r2, [r7, #24]
 800345a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	6979      	ldr	r1, [r7, #20]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	613b      	str	r3, [r7, #16]
   return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e5      	bne.n	8003438 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800347a:	bf00      	nop
 800347c:	3754      	adds	r7, #84	@ 0x54
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b0c0      	sub	sp, #256	@ 0x100
 800348e:	af00      	add	r7, sp, #0
 8003490:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	68d9      	ldr	r1, [r3, #12]
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	ea40 0301 	orr.w	r3, r0, r1
 80034b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	431a      	orrs	r2, r3
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034e0:	f021 010c 	bic.w	r1, r1, #12
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034ee:	430b      	orrs	r3, r1
 80034f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003502:	6999      	ldr	r1, [r3, #24]
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	ea40 0301 	orr.w	r3, r0, r1
 800350e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b8f      	ldr	r3, [pc, #572]	@ (8003754 <UART_SetConfig+0x2cc>)
 8003518:	429a      	cmp	r2, r3
 800351a:	d005      	beq.n	8003528 <UART_SetConfig+0xa0>
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b8d      	ldr	r3, [pc, #564]	@ (8003758 <UART_SetConfig+0x2d0>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d104      	bne.n	8003532 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7fe fe5a 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 800352c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003530:	e003      	b.n	800353a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003532:	f7fe fe41 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8003536:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003544:	f040 810c 	bne.w	8003760 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354c:	2200      	movs	r2, #0
 800354e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003552:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003556:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800355a:	4622      	mov	r2, r4
 800355c:	462b      	mov	r3, r5
 800355e:	1891      	adds	r1, r2, r2
 8003560:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003562:	415b      	adcs	r3, r3
 8003564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800356a:	4621      	mov	r1, r4
 800356c:	eb12 0801 	adds.w	r8, r2, r1
 8003570:	4629      	mov	r1, r5
 8003572:	eb43 0901 	adc.w	r9, r3, r1
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800358a:	4690      	mov	r8, r2
 800358c:	4699      	mov	r9, r3
 800358e:	4623      	mov	r3, r4
 8003590:	eb18 0303 	adds.w	r3, r8, r3
 8003594:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003598:	462b      	mov	r3, r5
 800359a:	eb49 0303 	adc.w	r3, r9, r3
 800359e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035b6:	460b      	mov	r3, r1
 80035b8:	18db      	adds	r3, r3, r3
 80035ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80035bc:	4613      	mov	r3, r2
 80035be:	eb42 0303 	adc.w	r3, r2, r3
 80035c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035cc:	f7fd f814 	bl	80005f8 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4b61      	ldr	r3, [pc, #388]	@ (800375c <UART_SetConfig+0x2d4>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	011c      	lsls	r4, r3, #4
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035f8:	415b      	adcs	r3, r3
 80035fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003600:	4641      	mov	r1, r8
 8003602:	eb12 0a01 	adds.w	sl, r2, r1
 8003606:	4649      	mov	r1, r9
 8003608:	eb43 0b01 	adc.w	fp, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800361c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003620:	4692      	mov	sl, r2
 8003622:	469b      	mov	fp, r3
 8003624:	4643      	mov	r3, r8
 8003626:	eb1a 0303 	adds.w	r3, sl, r3
 800362a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800362e:	464b      	mov	r3, r9
 8003630:	eb4b 0303 	adc.w	r3, fp, r3
 8003634:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003644:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800364c:	460b      	mov	r3, r1
 800364e:	18db      	adds	r3, r3, r3
 8003650:	643b      	str	r3, [r7, #64]	@ 0x40
 8003652:	4613      	mov	r3, r2
 8003654:	eb42 0303 	adc.w	r3, r2, r3
 8003658:	647b      	str	r3, [r7, #68]	@ 0x44
 800365a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800365e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003662:	f7fc ffc9 	bl	80005f8 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4611      	mov	r1, r2
 800366c:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <UART_SetConfig+0x2d4>)
 800366e:	fba3 2301 	umull	r2, r3, r3, r1
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2264      	movs	r2, #100	@ 0x64
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	1acb      	subs	r3, r1, r3
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003682:	4b36      	ldr	r3, [pc, #216]	@ (800375c <UART_SetConfig+0x2d4>)
 8003684:	fba3 2302 	umull	r2, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003690:	441c      	add	r4, r3
 8003692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800369c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036ac:	415b      	adcs	r3, r3
 80036ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036b4:	4641      	mov	r1, r8
 80036b6:	1851      	adds	r1, r2, r1
 80036b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80036ba:	4649      	mov	r1, r9
 80036bc:	414b      	adcs	r3, r1
 80036be:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036cc:	4659      	mov	r1, fp
 80036ce:	00cb      	lsls	r3, r1, #3
 80036d0:	4651      	mov	r1, sl
 80036d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d6:	4651      	mov	r1, sl
 80036d8:	00ca      	lsls	r2, r1, #3
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	4642      	mov	r2, r8
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036e8:	464b      	mov	r3, r9
 80036ea:	460a      	mov	r2, r1
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003700:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003704:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003708:	460b      	mov	r3, r1
 800370a:	18db      	adds	r3, r3, r3
 800370c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370e:	4613      	mov	r3, r2
 8003710:	eb42 0303 	adc.w	r3, r2, r3
 8003714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800371a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800371e:	f7fc ff6b 	bl	80005f8 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <UART_SetConfig+0x2d4>)
 8003728:	fba3 1302 	umull	r1, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2164      	movs	r1, #100	@ 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	3332      	adds	r3, #50	@ 0x32
 800373a:	4a08      	ldr	r2, [pc, #32]	@ (800375c <UART_SetConfig+0x2d4>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 0207 	and.w	r2, r3, #7
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4422      	add	r2, r4
 800374e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003750:	e106      	b.n	8003960 <UART_SetConfig+0x4d8>
 8003752:	bf00      	nop
 8003754:	40011000 	.word	0x40011000
 8003758:	40011400 	.word	0x40011400
 800375c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800376a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800376e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003772:	4642      	mov	r2, r8
 8003774:	464b      	mov	r3, r9
 8003776:	1891      	adds	r1, r2, r2
 8003778:	6239      	str	r1, [r7, #32]
 800377a:	415b      	adcs	r3, r3
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24
 800377e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003782:	4641      	mov	r1, r8
 8003784:	1854      	adds	r4, r2, r1
 8003786:	4649      	mov	r1, r9
 8003788:	eb43 0501 	adc.w	r5, r3, r1
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	00eb      	lsls	r3, r5, #3
 8003796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800379a:	00e2      	lsls	r2, r4, #3
 800379c:	4614      	mov	r4, r2
 800379e:	461d      	mov	r5, r3
 80037a0:	4643      	mov	r3, r8
 80037a2:	18e3      	adds	r3, r4, r3
 80037a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037a8:	464b      	mov	r3, r9
 80037aa:	eb45 0303 	adc.w	r3, r5, r3
 80037ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037ce:	4629      	mov	r1, r5
 80037d0:	008b      	lsls	r3, r1, #2
 80037d2:	4621      	mov	r1, r4
 80037d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d8:	4621      	mov	r1, r4
 80037da:	008a      	lsls	r2, r1, #2
 80037dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037e0:	f7fc ff0a 	bl	80005f8 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4b60      	ldr	r3, [pc, #384]	@ (800396c <UART_SetConfig+0x4e4>)
 80037ea:	fba3 2302 	umull	r2, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	011c      	lsls	r4, r3, #4
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003800:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003804:	4642      	mov	r2, r8
 8003806:	464b      	mov	r3, r9
 8003808:	1891      	adds	r1, r2, r2
 800380a:	61b9      	str	r1, [r7, #24]
 800380c:	415b      	adcs	r3, r3
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003814:	4641      	mov	r1, r8
 8003816:	1851      	adds	r1, r2, r1
 8003818:	6139      	str	r1, [r7, #16]
 800381a:	4649      	mov	r1, r9
 800381c:	414b      	adcs	r3, r1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800382c:	4659      	mov	r1, fp
 800382e:	00cb      	lsls	r3, r1, #3
 8003830:	4651      	mov	r1, sl
 8003832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003836:	4651      	mov	r1, sl
 8003838:	00ca      	lsls	r2, r1, #3
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	4603      	mov	r3, r0
 8003840:	4642      	mov	r2, r8
 8003842:	189b      	adds	r3, r3, r2
 8003844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003848:	464b      	mov	r3, r9
 800384a:	460a      	mov	r2, r1
 800384c:	eb42 0303 	adc.w	r3, r2, r3
 8003850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800385e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800386c:	4649      	mov	r1, r9
 800386e:	008b      	lsls	r3, r1, #2
 8003870:	4641      	mov	r1, r8
 8003872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003876:	4641      	mov	r1, r8
 8003878:	008a      	lsls	r2, r1, #2
 800387a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800387e:	f7fc febb 	bl	80005f8 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4611      	mov	r1, r2
 8003888:	4b38      	ldr	r3, [pc, #224]	@ (800396c <UART_SetConfig+0x4e4>)
 800388a:	fba3 2301 	umull	r2, r3, r3, r1
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2264      	movs	r2, #100	@ 0x64
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	1acb      	subs	r3, r1, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	@ 0x32
 800389c:	4a33      	ldr	r2, [pc, #204]	@ (800396c <UART_SetConfig+0x4e4>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a8:	441c      	add	r4, r3
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80038b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80038b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	1891      	adds	r1, r2, r2
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	415b      	adcs	r3, r3
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c8:	4641      	mov	r1, r8
 80038ca:	1851      	adds	r1, r2, r1
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	4649      	mov	r1, r9
 80038d0:	414b      	adcs	r3, r1
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038e0:	4659      	mov	r1, fp
 80038e2:	00cb      	lsls	r3, r1, #3
 80038e4:	4651      	mov	r1, sl
 80038e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ea:	4651      	mov	r1, sl
 80038ec:	00ca      	lsls	r2, r1, #3
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	4642      	mov	r2, r8
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038fa:	464b      	mov	r3, r9
 80038fc:	460a      	mov	r2, r1
 80038fe:	eb42 0303 	adc.w	r3, r2, r3
 8003902:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	663b      	str	r3, [r7, #96]	@ 0x60
 800390e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800391c:	4649      	mov	r1, r9
 800391e:	008b      	lsls	r3, r1, #2
 8003920:	4641      	mov	r1, r8
 8003922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003926:	4641      	mov	r1, r8
 8003928:	008a      	lsls	r2, r1, #2
 800392a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800392e:	f7fc fe63 	bl	80005f8 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <UART_SetConfig+0x4e4>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	2164      	movs	r1, #100	@ 0x64
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	3332      	adds	r3, #50	@ 0x32
 800394a:	4a08      	ldr	r2, [pc, #32]	@ (800396c <UART_SetConfig+0x4e4>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	f003 020f 	and.w	r2, r3, #15
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4422      	add	r2, r4
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003966:	46bd      	mov	sp, r7
 8003968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396c:	51eb851f 	.word	0x51eb851f

08003970 <sniprintf>:
 8003970:	b40c      	push	{r2, r3}
 8003972:	b530      	push	{r4, r5, lr}
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <sniprintf+0x68>)
 8003976:	1e0c      	subs	r4, r1, #0
 8003978:	681d      	ldr	r5, [r3, #0]
 800397a:	b09d      	sub	sp, #116	@ 0x74
 800397c:	da08      	bge.n	8003990 <sniprintf+0x20>
 800397e:	238b      	movs	r3, #139	@ 0x8b
 8003980:	602b      	str	r3, [r5, #0]
 8003982:	f04f 30ff 	mov.w	r0, #4294967295
 8003986:	b01d      	add	sp, #116	@ 0x74
 8003988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800398c:	b002      	add	sp, #8
 800398e:	4770      	bx	lr
 8003990:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003994:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800399e:	bf14      	ite	ne
 80039a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80039a4:	4623      	moveq	r3, r4
 80039a6:	9304      	str	r3, [sp, #16]
 80039a8:	9307      	str	r3, [sp, #28]
 80039aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ae:	9002      	str	r0, [sp, #8]
 80039b0:	9006      	str	r0, [sp, #24]
 80039b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80039b8:	ab21      	add	r3, sp, #132	@ 0x84
 80039ba:	a902      	add	r1, sp, #8
 80039bc:	4628      	mov	r0, r5
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	f000 f994 	bl	8003cec <_svfiprintf_r>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	bfbc      	itt	lt
 80039c8:	238b      	movlt	r3, #139	@ 0x8b
 80039ca:	602b      	strlt	r3, [r5, #0]
 80039cc:	2c00      	cmp	r4, #0
 80039ce:	d0da      	beq.n	8003986 <sniprintf+0x16>
 80039d0:	9b02      	ldr	r3, [sp, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e7d6      	b.n	8003986 <sniprintf+0x16>
 80039d8:	2000000c 	.word	0x2000000c

080039dc <memset>:
 80039dc:	4402      	add	r2, r0
 80039de:	4603      	mov	r3, r0
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d100      	bne.n	80039e6 <memset+0xa>
 80039e4:	4770      	bx	lr
 80039e6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ea:	e7f9      	b.n	80039e0 <memset+0x4>

080039ec <__errno>:
 80039ec:	4b01      	ldr	r3, [pc, #4]	@ (80039f4 <__errno+0x8>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003a30 <__libc_init_array+0x38>)
 80039fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003a34 <__libc_init_array+0x3c>)
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	10a4      	asrs	r4, r4, #2
 8003a02:	2600      	movs	r6, #0
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	4d0b      	ldr	r5, [pc, #44]	@ (8003a38 <__libc_init_array+0x40>)
 8003a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003a3c <__libc_init_array+0x44>)
 8003a0c:	f000 fc64 	bl	80042d8 <_init>
 8003a10:	1b64      	subs	r4, r4, r5
 8003a12:	10a4      	asrs	r4, r4, #2
 8003a14:	2600      	movs	r6, #0
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	08004368 	.word	0x08004368
 8003a34:	08004368 	.word	0x08004368
 8003a38:	08004368 	.word	0x08004368
 8003a3c:	0800436c 	.word	0x0800436c

08003a40 <__retarget_lock_acquire_recursive>:
 8003a40:	4770      	bx	lr

08003a42 <__retarget_lock_release_recursive>:
 8003a42:	4770      	bx	lr

08003a44 <_free_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4605      	mov	r5, r0
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d041      	beq.n	8003ad0 <_free_r+0x8c>
 8003a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a50:	1f0c      	subs	r4, r1, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfb8      	it	lt
 8003a56:	18e4      	addlt	r4, r4, r3
 8003a58:	f000 f8e0 	bl	8003c1c <__malloc_lock>
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <_free_r+0x90>)
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	b933      	cbnz	r3, 8003a70 <_free_r+0x2c>
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	6014      	str	r4, [r2, #0]
 8003a66:	4628      	mov	r0, r5
 8003a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a6c:	f000 b8dc 	b.w	8003c28 <__malloc_unlock>
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d908      	bls.n	8003a86 <_free_r+0x42>
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	1821      	adds	r1, r4, r0
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	bf01      	itttt	eq
 8003a7c:	6819      	ldreq	r1, [r3, #0]
 8003a7e:	685b      	ldreq	r3, [r3, #4]
 8003a80:	1809      	addeq	r1, r1, r0
 8003a82:	6021      	streq	r1, [r4, #0]
 8003a84:	e7ed      	b.n	8003a62 <_free_r+0x1e>
 8003a86:	461a      	mov	r2, r3
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	b10b      	cbz	r3, 8003a90 <_free_r+0x4c>
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d9fa      	bls.n	8003a86 <_free_r+0x42>
 8003a90:	6811      	ldr	r1, [r2, #0]
 8003a92:	1850      	adds	r0, r2, r1
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d10b      	bne.n	8003ab0 <_free_r+0x6c>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	4401      	add	r1, r0
 8003a9c:	1850      	adds	r0, r2, r1
 8003a9e:	4283      	cmp	r3, r0
 8003aa0:	6011      	str	r1, [r2, #0]
 8003aa2:	d1e0      	bne.n	8003a66 <_free_r+0x22>
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	6053      	str	r3, [r2, #4]
 8003aaa:	4408      	add	r0, r1
 8003aac:	6010      	str	r0, [r2, #0]
 8003aae:	e7da      	b.n	8003a66 <_free_r+0x22>
 8003ab0:	d902      	bls.n	8003ab8 <_free_r+0x74>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	e7d6      	b.n	8003a66 <_free_r+0x22>
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	1821      	adds	r1, r4, r0
 8003abc:	428b      	cmp	r3, r1
 8003abe:	bf04      	itt	eq
 8003ac0:	6819      	ldreq	r1, [r3, #0]
 8003ac2:	685b      	ldreq	r3, [r3, #4]
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	bf04      	itt	eq
 8003ac8:	1809      	addeq	r1, r1, r0
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	6054      	str	r4, [r2, #4]
 8003ace:	e7ca      	b.n	8003a66 <_free_r+0x22>
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200002b8 	.word	0x200002b8

08003ad8 <sbrk_aligned>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4e0f      	ldr	r6, [pc, #60]	@ (8003b18 <sbrk_aligned+0x40>)
 8003adc:	460c      	mov	r4, r1
 8003ade:	6831      	ldr	r1, [r6, #0]
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	b911      	cbnz	r1, 8003aea <sbrk_aligned+0x12>
 8003ae4:	f000 fba4 	bl	8004230 <_sbrk_r>
 8003ae8:	6030      	str	r0, [r6, #0]
 8003aea:	4621      	mov	r1, r4
 8003aec:	4628      	mov	r0, r5
 8003aee:	f000 fb9f 	bl	8004230 <_sbrk_r>
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	d103      	bne.n	8003afe <sbrk_aligned+0x26>
 8003af6:	f04f 34ff 	mov.w	r4, #4294967295
 8003afa:	4620      	mov	r0, r4
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	1cc4      	adds	r4, r0, #3
 8003b00:	f024 0403 	bic.w	r4, r4, #3
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d0f8      	beq.n	8003afa <sbrk_aligned+0x22>
 8003b08:	1a21      	subs	r1, r4, r0
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 fb90 	bl	8004230 <_sbrk_r>
 8003b10:	3001      	adds	r0, #1
 8003b12:	d1f2      	bne.n	8003afa <sbrk_aligned+0x22>
 8003b14:	e7ef      	b.n	8003af6 <sbrk_aligned+0x1e>
 8003b16:	bf00      	nop
 8003b18:	200002b4 	.word	0x200002b4

08003b1c <_malloc_r>:
 8003b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b20:	1ccd      	adds	r5, r1, #3
 8003b22:	f025 0503 	bic.w	r5, r5, #3
 8003b26:	3508      	adds	r5, #8
 8003b28:	2d0c      	cmp	r5, #12
 8003b2a:	bf38      	it	cc
 8003b2c:	250c      	movcc	r5, #12
 8003b2e:	2d00      	cmp	r5, #0
 8003b30:	4606      	mov	r6, r0
 8003b32:	db01      	blt.n	8003b38 <_malloc_r+0x1c>
 8003b34:	42a9      	cmp	r1, r5
 8003b36:	d904      	bls.n	8003b42 <_malloc_r+0x26>
 8003b38:	230c      	movs	r3, #12
 8003b3a:	6033      	str	r3, [r6, #0]
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c18 <_malloc_r+0xfc>
 8003b46:	f000 f869 	bl	8003c1c <__malloc_lock>
 8003b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b4e:	461c      	mov	r4, r3
 8003b50:	bb44      	cbnz	r4, 8003ba4 <_malloc_r+0x88>
 8003b52:	4629      	mov	r1, r5
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7ff ffbf 	bl	8003ad8 <sbrk_aligned>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	d158      	bne.n	8003c12 <_malloc_r+0xf6>
 8003b60:	f8d8 4000 	ldr.w	r4, [r8]
 8003b64:	4627      	mov	r7, r4
 8003b66:	2f00      	cmp	r7, #0
 8003b68:	d143      	bne.n	8003bf2 <_malloc_r+0xd6>
 8003b6a:	2c00      	cmp	r4, #0
 8003b6c:	d04b      	beq.n	8003c06 <_malloc_r+0xea>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	4639      	mov	r1, r7
 8003b72:	4630      	mov	r0, r6
 8003b74:	eb04 0903 	add.w	r9, r4, r3
 8003b78:	f000 fb5a 	bl	8004230 <_sbrk_r>
 8003b7c:	4581      	cmp	r9, r0
 8003b7e:	d142      	bne.n	8003c06 <_malloc_r+0xea>
 8003b80:	6821      	ldr	r1, [r4, #0]
 8003b82:	1a6d      	subs	r5, r5, r1
 8003b84:	4629      	mov	r1, r5
 8003b86:	4630      	mov	r0, r6
 8003b88:	f7ff ffa6 	bl	8003ad8 <sbrk_aligned>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d03a      	beq.n	8003c06 <_malloc_r+0xea>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	442b      	add	r3, r5
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	f8d8 3000 	ldr.w	r3, [r8]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	bb62      	cbnz	r2, 8003bf8 <_malloc_r+0xdc>
 8003b9e:	f8c8 7000 	str.w	r7, [r8]
 8003ba2:	e00f      	b.n	8003bc4 <_malloc_r+0xa8>
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	1b52      	subs	r2, r2, r5
 8003ba8:	d420      	bmi.n	8003bec <_malloc_r+0xd0>
 8003baa:	2a0b      	cmp	r2, #11
 8003bac:	d917      	bls.n	8003bde <_malloc_r+0xc2>
 8003bae:	1961      	adds	r1, r4, r5
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	bf18      	it	ne
 8003bb6:	6059      	strne	r1, [r3, #4]
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	bf08      	it	eq
 8003bbc:	f8c8 1000 	streq.w	r1, [r8]
 8003bc0:	5162      	str	r2, [r4, r5]
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f000 f82f 	bl	8003c28 <__malloc_unlock>
 8003bca:	f104 000b 	add.w	r0, r4, #11
 8003bce:	1d23      	adds	r3, r4, #4
 8003bd0:	f020 0007 	bic.w	r0, r0, #7
 8003bd4:	1ac2      	subs	r2, r0, r3
 8003bd6:	bf1c      	itt	ne
 8003bd8:	1a1b      	subne	r3, r3, r0
 8003bda:	50a3      	strne	r3, [r4, r2]
 8003bdc:	e7af      	b.n	8003b3e <_malloc_r+0x22>
 8003bde:	6862      	ldr	r2, [r4, #4]
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	bf0c      	ite	eq
 8003be4:	f8c8 2000 	streq.w	r2, [r8]
 8003be8:	605a      	strne	r2, [r3, #4]
 8003bea:	e7eb      	b.n	8003bc4 <_malloc_r+0xa8>
 8003bec:	4623      	mov	r3, r4
 8003bee:	6864      	ldr	r4, [r4, #4]
 8003bf0:	e7ae      	b.n	8003b50 <_malloc_r+0x34>
 8003bf2:	463c      	mov	r4, r7
 8003bf4:	687f      	ldr	r7, [r7, #4]
 8003bf6:	e7b6      	b.n	8003b66 <_malloc_r+0x4a>
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	d1fb      	bne.n	8003bf8 <_malloc_r+0xdc>
 8003c00:	2300      	movs	r3, #0
 8003c02:	6053      	str	r3, [r2, #4]
 8003c04:	e7de      	b.n	8003bc4 <_malloc_r+0xa8>
 8003c06:	230c      	movs	r3, #12
 8003c08:	6033      	str	r3, [r6, #0]
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f80c 	bl	8003c28 <__malloc_unlock>
 8003c10:	e794      	b.n	8003b3c <_malloc_r+0x20>
 8003c12:	6005      	str	r5, [r0, #0]
 8003c14:	e7d6      	b.n	8003bc4 <_malloc_r+0xa8>
 8003c16:	bf00      	nop
 8003c18:	200002b8 	.word	0x200002b8

08003c1c <__malloc_lock>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	@ (8003c24 <__malloc_lock+0x8>)
 8003c1e:	f7ff bf0f 	b.w	8003a40 <__retarget_lock_acquire_recursive>
 8003c22:	bf00      	nop
 8003c24:	200002b0 	.word	0x200002b0

08003c28 <__malloc_unlock>:
 8003c28:	4801      	ldr	r0, [pc, #4]	@ (8003c30 <__malloc_unlock+0x8>)
 8003c2a:	f7ff bf0a 	b.w	8003a42 <__retarget_lock_release_recursive>
 8003c2e:	bf00      	nop
 8003c30:	200002b0 	.word	0x200002b0

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	688e      	ldr	r6, [r1, #8]
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	42be      	cmp	r6, r7
 8003c3e:	680b      	ldr	r3, [r1, #0]
 8003c40:	4682      	mov	sl, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	4690      	mov	r8, r2
 8003c46:	d82d      	bhi.n	8003ca4 <__ssputs_r+0x70>
 8003c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c50:	d026      	beq.n	8003ca0 <__ssputs_r+0x6c>
 8003c52:	6965      	ldr	r5, [r4, #20]
 8003c54:	6909      	ldr	r1, [r1, #16]
 8003c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5a:	eba3 0901 	sub.w	r9, r3, r1
 8003c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c62:	1c7b      	adds	r3, r7, #1
 8003c64:	444b      	add	r3, r9
 8003c66:	106d      	asrs	r5, r5, #1
 8003c68:	429d      	cmp	r5, r3
 8003c6a:	bf38      	it	cc
 8003c6c:	461d      	movcc	r5, r3
 8003c6e:	0553      	lsls	r3, r2, #21
 8003c70:	d527      	bpl.n	8003cc2 <__ssputs_r+0x8e>
 8003c72:	4629      	mov	r1, r5
 8003c74:	f7ff ff52 	bl	8003b1c <_malloc_r>
 8003c78:	4606      	mov	r6, r0
 8003c7a:	b360      	cbz	r0, 8003cd6 <__ssputs_r+0xa2>
 8003c7c:	6921      	ldr	r1, [r4, #16]
 8003c7e:	464a      	mov	r2, r9
 8003c80:	f000 fae6 	bl	8004250 <memcpy>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	6126      	str	r6, [r4, #16]
 8003c92:	6165      	str	r5, [r4, #20]
 8003c94:	444e      	add	r6, r9
 8003c96:	eba5 0509 	sub.w	r5, r5, r9
 8003c9a:	6026      	str	r6, [r4, #0]
 8003c9c:	60a5      	str	r5, [r4, #8]
 8003c9e:	463e      	mov	r6, r7
 8003ca0:	42be      	cmp	r6, r7
 8003ca2:	d900      	bls.n	8003ca6 <__ssputs_r+0x72>
 8003ca4:	463e      	mov	r6, r7
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	4632      	mov	r2, r6
 8003caa:	4641      	mov	r1, r8
 8003cac:	f000 faa6 	bl	80041fc <memmove>
 8003cb0:	68a3      	ldr	r3, [r4, #8]
 8003cb2:	1b9b      	subs	r3, r3, r6
 8003cb4:	60a3      	str	r3, [r4, #8]
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	4433      	add	r3, r6
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	f000 fad2 	bl	800426c <_realloc_r>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d1e0      	bne.n	8003c90 <__ssputs_r+0x5c>
 8003cce:	6921      	ldr	r1, [r4, #16]
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	f7ff feb7 	bl	8003a44 <_free_r>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	f8ca 3000 	str.w	r3, [sl]
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	e7e9      	b.n	8003cbe <__ssputs_r+0x8a>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	b09d      	sub	sp, #116	@ 0x74
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	d510      	bpl.n	8003d22 <_svfiprintf_r+0x36>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b973      	cbnz	r3, 8003d22 <_svfiprintf_r+0x36>
 8003d04:	2140      	movs	r1, #64	@ 0x40
 8003d06:	f7ff ff09 	bl	8003b1c <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b930      	cbnz	r0, 8003d1e <_svfiprintf_r+0x32>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	b01d      	add	sp, #116	@ 0x74
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	2340      	movs	r3, #64	@ 0x40
 8003d20:	616b      	str	r3, [r5, #20]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d26:	2320      	movs	r3, #32
 8003d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d30:	2330      	movs	r3, #48	@ 0x30
 8003d32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ed0 <_svfiprintf_r+0x1e4>
 8003d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d3a:	f04f 0901 	mov.w	r9, #1
 8003d3e:	4623      	mov	r3, r4
 8003d40:	469a      	mov	sl, r3
 8003d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d46:	b10a      	cbz	r2, 8003d4c <_svfiprintf_r+0x60>
 8003d48:	2a25      	cmp	r2, #37	@ 0x25
 8003d4a:	d1f9      	bne.n	8003d40 <_svfiprintf_r+0x54>
 8003d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d50:	d00b      	beq.n	8003d6a <_svfiprintf_r+0x7e>
 8003d52:	465b      	mov	r3, fp
 8003d54:	4622      	mov	r2, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f7ff ff6b 	bl	8003c34 <__ssputs_r>
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f000 80a7 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d66:	445a      	add	r2, fp
 8003d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 809f 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7e:	f10a 0a01 	add.w	sl, sl, #1
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d8c:	4654      	mov	r4, sl
 8003d8e:	2205      	movs	r2, #5
 8003d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d94:	484e      	ldr	r0, [pc, #312]	@ (8003ed0 <_svfiprintf_r+0x1e4>)
 8003d96:	f7fc fa23 	bl	80001e0 <memchr>
 8003d9a:	9a04      	ldr	r2, [sp, #16]
 8003d9c:	b9d8      	cbnz	r0, 8003dd6 <_svfiprintf_r+0xea>
 8003d9e:	06d0      	lsls	r0, r2, #27
 8003da0:	bf44      	itt	mi
 8003da2:	2320      	movmi	r3, #32
 8003da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003da8:	0711      	lsls	r1, r2, #28
 8003daa:	bf44      	itt	mi
 8003dac:	232b      	movmi	r3, #43	@ 0x2b
 8003dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003db2:	f89a 3000 	ldrb.w	r3, [sl]
 8003db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db8:	d015      	beq.n	8003de6 <_svfiprintf_r+0xfa>
 8003dba:	9a07      	ldr	r2, [sp, #28]
 8003dbc:	4654      	mov	r4, sl
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f04f 0c0a 	mov.w	ip, #10
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dca:	3b30      	subs	r3, #48	@ 0x30
 8003dcc:	2b09      	cmp	r3, #9
 8003dce:	d94b      	bls.n	8003e68 <_svfiprintf_r+0x17c>
 8003dd0:	b1b0      	cbz	r0, 8003e00 <_svfiprintf_r+0x114>
 8003dd2:	9207      	str	r2, [sp, #28]
 8003dd4:	e014      	b.n	8003e00 <_svfiprintf_r+0x114>
 8003dd6:	eba0 0308 	sub.w	r3, r0, r8
 8003dda:	fa09 f303 	lsl.w	r3, r9, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	9304      	str	r3, [sp, #16]
 8003de2:	46a2      	mov	sl, r4
 8003de4:	e7d2      	b.n	8003d8c <_svfiprintf_r+0xa0>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	1d19      	adds	r1, r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	9103      	str	r1, [sp, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfbb      	ittet	lt
 8003df2:	425b      	neglt	r3, r3
 8003df4:	f042 0202 	orrlt.w	r2, r2, #2
 8003df8:	9307      	strge	r3, [sp, #28]
 8003dfa:	9307      	strlt	r3, [sp, #28]
 8003dfc:	bfb8      	it	lt
 8003dfe:	9204      	strlt	r2, [sp, #16]
 8003e00:	7823      	ldrb	r3, [r4, #0]
 8003e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e04:	d10a      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e06:	7863      	ldrb	r3, [r4, #1]
 8003e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e0a:	d132      	bne.n	8003e72 <_svfiprintf_r+0x186>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	9203      	str	r2, [sp, #12]
 8003e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e18:	3402      	adds	r4, #2
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ee0 <_svfiprintf_r+0x1f4>
 8003e20:	7821      	ldrb	r1, [r4, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	4650      	mov	r0, sl
 8003e26:	f7fc f9db 	bl	80001e0 <memchr>
 8003e2a:	b138      	cbz	r0, 8003e3c <_svfiprintf_r+0x150>
 8003e2c:	9b04      	ldr	r3, [sp, #16]
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	2240      	movs	r2, #64	@ 0x40
 8003e34:	4082      	lsls	r2, r0
 8003e36:	4313      	orrs	r3, r2
 8003e38:	3401      	adds	r4, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	4824      	ldr	r0, [pc, #144]	@ (8003ed4 <_svfiprintf_r+0x1e8>)
 8003e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e46:	2206      	movs	r2, #6
 8003e48:	f7fc f9ca 	bl	80001e0 <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d036      	beq.n	8003ebe <_svfiprintf_r+0x1d2>
 8003e50:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <_svfiprintf_r+0x1ec>)
 8003e52:	bb1b      	cbnz	r3, 8003e9c <_svfiprintf_r+0x1b0>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	3307      	adds	r3, #7
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e62:	4433      	add	r3, r6
 8003e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e66:	e76a      	b.n	8003d3e <_svfiprintf_r+0x52>
 8003e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	2001      	movs	r0, #1
 8003e70:	e7a8      	b.n	8003dc4 <_svfiprintf_r+0xd8>
 8003e72:	2300      	movs	r3, #0
 8003e74:	3401      	adds	r4, #1
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f04f 0c0a 	mov.w	ip, #10
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e84:	3a30      	subs	r2, #48	@ 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d903      	bls.n	8003e92 <_svfiprintf_r+0x1a6>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c6      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	e7c4      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e96:	4604      	mov	r4, r0
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e7f0      	b.n	8003e7e <_svfiprintf_r+0x192>
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <_svfiprintf_r+0x1f0>)
 8003ea4:	a904      	add	r1, sp, #16
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f3af 8000 	nop.w
 8003eac:	1c42      	adds	r2, r0, #1
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d1d6      	bne.n	8003e60 <_svfiprintf_r+0x174>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	065b      	lsls	r3, r3, #25
 8003eb6:	f53f af2d 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ebc:	e72c      	b.n	8003d18 <_svfiprintf_r+0x2c>
 8003ebe:	ab03      	add	r3, sp, #12
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	462a      	mov	r2, r5
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <_svfiprintf_r+0x1f0>)
 8003ec6:	a904      	add	r1, sp, #16
 8003ec8:	4638      	mov	r0, r7
 8003eca:	f000 f879 	bl	8003fc0 <_printf_i>
 8003ece:	e7ed      	b.n	8003eac <_svfiprintf_r+0x1c0>
 8003ed0:	0800432c 	.word	0x0800432c
 8003ed4:	08004336 	.word	0x08004336
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c35 	.word	0x08003c35
 8003ee0:	08004332 	.word	0x08004332

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4698      	mov	r8, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bfb8      	it	lt
 8003ef8:	4613      	movlt	r3, r2
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f00:	4607      	mov	r7, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc26      	bgt.n	8003f7a <_printf_common+0x96>
 8003f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	3b00      	subs	r3, #0
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d42b      	bmi.n	8003f94 <_printf_common+0xb0>
 8003f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f40:	4641      	mov	r1, r8
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c8      	blx	r9
 8003f46:	3001      	adds	r0, #1
 8003f48:	d01e      	beq.n	8003f88 <_printf_common+0xa4>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	6922      	ldr	r2, [r4, #16]
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf02      	ittt	eq
 8003f56:	68e5      	ldreq	r5, [r4, #12]
 8003f58:	6833      	ldreq	r3, [r6, #0]
 8003f5a:	1aed      	subeq	r5, r5, r3
 8003f5c:	68a3      	ldr	r3, [r4, #8]
 8003f5e:	bf0c      	ite	eq
 8003f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f64:	2500      	movne	r5, #0
 8003f66:	4293      	cmp	r3, r2
 8003f68:	bfc4      	itt	gt
 8003f6a:	1a9b      	subgt	r3, r3, r2
 8003f6c:	18ed      	addgt	r5, r5, r3
 8003f6e:	2600      	movs	r6, #0
 8003f70:	341a      	adds	r4, #26
 8003f72:	42b5      	cmp	r5, r6
 8003f74:	d11a      	bne.n	8003fac <_printf_common+0xc8>
 8003f76:	2000      	movs	r0, #0
 8003f78:	e008      	b.n	8003f8c <_printf_common+0xa8>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	4641      	mov	r1, r8
 8003f80:	4638      	mov	r0, r7
 8003f82:	47c8      	blx	r9
 8003f84:	3001      	adds	r0, #1
 8003f86:	d103      	bne.n	8003f90 <_printf_common+0xac>
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f90:	3501      	adds	r5, #1
 8003f92:	e7c6      	b.n	8003f22 <_printf_common+0x3e>
 8003f94:	18e1      	adds	r1, r4, r3
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	2030      	movs	r0, #48	@ 0x30
 8003f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f9e:	4422      	add	r2, r4
 8003fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fa8:	3302      	adds	r3, #2
 8003faa:	e7c7      	b.n	8003f3c <_printf_common+0x58>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4622      	mov	r2, r4
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47c8      	blx	r9
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d0e6      	beq.n	8003f88 <_printf_common+0xa4>
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7d9      	b.n	8003f72 <_printf_common+0x8e>
	...

08003fc0 <_printf_i>:
 8003fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	7e0f      	ldrb	r7, [r1, #24]
 8003fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fc8:	2f78      	cmp	r7, #120	@ 0x78
 8003fca:	4691      	mov	r9, r2
 8003fcc:	4680      	mov	r8, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	469a      	mov	sl, r3
 8003fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fd6:	d807      	bhi.n	8003fe8 <_printf_i+0x28>
 8003fd8:	2f62      	cmp	r7, #98	@ 0x62
 8003fda:	d80a      	bhi.n	8003ff2 <_printf_i+0x32>
 8003fdc:	2f00      	cmp	r7, #0
 8003fde:	f000 80d1 	beq.w	8004184 <_printf_i+0x1c4>
 8003fe2:	2f58      	cmp	r7, #88	@ 0x58
 8003fe4:	f000 80b8 	beq.w	8004158 <_printf_i+0x198>
 8003fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ff0:	e03a      	b.n	8004068 <_printf_i+0xa8>
 8003ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ff6:	2b15      	cmp	r3, #21
 8003ff8:	d8f6      	bhi.n	8003fe8 <_printf_i+0x28>
 8003ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8004000 <_printf_i+0x40>)
 8003ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004000:	08004059 	.word	0x08004059
 8004004:	0800406d 	.word	0x0800406d
 8004008:	08003fe9 	.word	0x08003fe9
 800400c:	08003fe9 	.word	0x08003fe9
 8004010:	08003fe9 	.word	0x08003fe9
 8004014:	08003fe9 	.word	0x08003fe9
 8004018:	0800406d 	.word	0x0800406d
 800401c:	08003fe9 	.word	0x08003fe9
 8004020:	08003fe9 	.word	0x08003fe9
 8004024:	08003fe9 	.word	0x08003fe9
 8004028:	08003fe9 	.word	0x08003fe9
 800402c:	0800416b 	.word	0x0800416b
 8004030:	08004097 	.word	0x08004097
 8004034:	08004125 	.word	0x08004125
 8004038:	08003fe9 	.word	0x08003fe9
 800403c:	08003fe9 	.word	0x08003fe9
 8004040:	0800418d 	.word	0x0800418d
 8004044:	08003fe9 	.word	0x08003fe9
 8004048:	08004097 	.word	0x08004097
 800404c:	08003fe9 	.word	0x08003fe9
 8004050:	08003fe9 	.word	0x08003fe9
 8004054:	0800412d 	.word	0x0800412d
 8004058:	6833      	ldr	r3, [r6, #0]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6032      	str	r2, [r6, #0]
 8004060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004068:	2301      	movs	r3, #1
 800406a:	e09c      	b.n	80041a6 <_printf_i+0x1e6>
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	1d19      	adds	r1, r3, #4
 8004072:	6031      	str	r1, [r6, #0]
 8004074:	0606      	lsls	r6, r0, #24
 8004076:	d501      	bpl.n	800407c <_printf_i+0xbc>
 8004078:	681d      	ldr	r5, [r3, #0]
 800407a:	e003      	b.n	8004084 <_printf_i+0xc4>
 800407c:	0645      	lsls	r5, r0, #25
 800407e:	d5fb      	bpl.n	8004078 <_printf_i+0xb8>
 8004080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004084:	2d00      	cmp	r5, #0
 8004086:	da03      	bge.n	8004090 <_printf_i+0xd0>
 8004088:	232d      	movs	r3, #45	@ 0x2d
 800408a:	426d      	negs	r5, r5
 800408c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004090:	4858      	ldr	r0, [pc, #352]	@ (80041f4 <_printf_i+0x234>)
 8004092:	230a      	movs	r3, #10
 8004094:	e011      	b.n	80040ba <_printf_i+0xfa>
 8004096:	6821      	ldr	r1, [r4, #0]
 8004098:	6833      	ldr	r3, [r6, #0]
 800409a:	0608      	lsls	r0, r1, #24
 800409c:	f853 5b04 	ldr.w	r5, [r3], #4
 80040a0:	d402      	bmi.n	80040a8 <_printf_i+0xe8>
 80040a2:	0649      	lsls	r1, r1, #25
 80040a4:	bf48      	it	mi
 80040a6:	b2ad      	uxthmi	r5, r5
 80040a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80040aa:	4852      	ldr	r0, [pc, #328]	@ (80041f4 <_printf_i+0x234>)
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	bf14      	ite	ne
 80040b0:	230a      	movne	r3, #10
 80040b2:	2308      	moveq	r3, #8
 80040b4:	2100      	movs	r1, #0
 80040b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040ba:	6866      	ldr	r6, [r4, #4]
 80040bc:	60a6      	str	r6, [r4, #8]
 80040be:	2e00      	cmp	r6, #0
 80040c0:	db05      	blt.n	80040ce <_printf_i+0x10e>
 80040c2:	6821      	ldr	r1, [r4, #0]
 80040c4:	432e      	orrs	r6, r5
 80040c6:	f021 0104 	bic.w	r1, r1, #4
 80040ca:	6021      	str	r1, [r4, #0]
 80040cc:	d04b      	beq.n	8004166 <_printf_i+0x1a6>
 80040ce:	4616      	mov	r6, r2
 80040d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80040d4:	fb03 5711 	mls	r7, r3, r1, r5
 80040d8:	5dc7      	ldrb	r7, [r0, r7]
 80040da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040de:	462f      	mov	r7, r5
 80040e0:	42bb      	cmp	r3, r7
 80040e2:	460d      	mov	r5, r1
 80040e4:	d9f4      	bls.n	80040d0 <_printf_i+0x110>
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d10b      	bne.n	8004102 <_printf_i+0x142>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	07df      	lsls	r7, r3, #31
 80040ee:	d508      	bpl.n	8004102 <_printf_i+0x142>
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	6861      	ldr	r1, [r4, #4]
 80040f4:	4299      	cmp	r1, r3
 80040f6:	bfde      	ittt	le
 80040f8:	2330      	movle	r3, #48	@ 0x30
 80040fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004102:	1b92      	subs	r2, r2, r6
 8004104:	6122      	str	r2, [r4, #16]
 8004106:	f8cd a000 	str.w	sl, [sp]
 800410a:	464b      	mov	r3, r9
 800410c:	aa03      	add	r2, sp, #12
 800410e:	4621      	mov	r1, r4
 8004110:	4640      	mov	r0, r8
 8004112:	f7ff fee7 	bl	8003ee4 <_printf_common>
 8004116:	3001      	adds	r0, #1
 8004118:	d14a      	bne.n	80041b0 <_printf_i+0x1f0>
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	b004      	add	sp, #16
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f043 0320 	orr.w	r3, r3, #32
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	4832      	ldr	r0, [pc, #200]	@ (80041f8 <_printf_i+0x238>)
 800412e:	2778      	movs	r7, #120	@ 0x78
 8004130:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	6831      	ldr	r1, [r6, #0]
 8004138:	061f      	lsls	r7, r3, #24
 800413a:	f851 5b04 	ldr.w	r5, [r1], #4
 800413e:	d402      	bmi.n	8004146 <_printf_i+0x186>
 8004140:	065f      	lsls	r7, r3, #25
 8004142:	bf48      	it	mi
 8004144:	b2ad      	uxthmi	r5, r5
 8004146:	6031      	str	r1, [r6, #0]
 8004148:	07d9      	lsls	r1, r3, #31
 800414a:	bf44      	itt	mi
 800414c:	f043 0320 	orrmi.w	r3, r3, #32
 8004150:	6023      	strmi	r3, [r4, #0]
 8004152:	b11d      	cbz	r5, 800415c <_printf_i+0x19c>
 8004154:	2310      	movs	r3, #16
 8004156:	e7ad      	b.n	80040b4 <_printf_i+0xf4>
 8004158:	4826      	ldr	r0, [pc, #152]	@ (80041f4 <_printf_i+0x234>)
 800415a:	e7e9      	b.n	8004130 <_printf_i+0x170>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	f023 0320 	bic.w	r3, r3, #32
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	e7f6      	b.n	8004154 <_printf_i+0x194>
 8004166:	4616      	mov	r6, r2
 8004168:	e7bd      	b.n	80040e6 <_printf_i+0x126>
 800416a:	6833      	ldr	r3, [r6, #0]
 800416c:	6825      	ldr	r5, [r4, #0]
 800416e:	6961      	ldr	r1, [r4, #20]
 8004170:	1d18      	adds	r0, r3, #4
 8004172:	6030      	str	r0, [r6, #0]
 8004174:	062e      	lsls	r6, r5, #24
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	d501      	bpl.n	800417e <_printf_i+0x1be>
 800417a:	6019      	str	r1, [r3, #0]
 800417c:	e002      	b.n	8004184 <_printf_i+0x1c4>
 800417e:	0668      	lsls	r0, r5, #25
 8004180:	d5fb      	bpl.n	800417a <_printf_i+0x1ba>
 8004182:	8019      	strh	r1, [r3, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	6123      	str	r3, [r4, #16]
 8004188:	4616      	mov	r6, r2
 800418a:	e7bc      	b.n	8004106 <_printf_i+0x146>
 800418c:	6833      	ldr	r3, [r6, #0]
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	6032      	str	r2, [r6, #0]
 8004192:	681e      	ldr	r6, [r3, #0]
 8004194:	6862      	ldr	r2, [r4, #4]
 8004196:	2100      	movs	r1, #0
 8004198:	4630      	mov	r0, r6
 800419a:	f7fc f821 	bl	80001e0 <memchr>
 800419e:	b108      	cbz	r0, 80041a4 <_printf_i+0x1e4>
 80041a0:	1b80      	subs	r0, r0, r6
 80041a2:	6060      	str	r0, [r4, #4]
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	6123      	str	r3, [r4, #16]
 80041a8:	2300      	movs	r3, #0
 80041aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ae:	e7aa      	b.n	8004106 <_printf_i+0x146>
 80041b0:	6923      	ldr	r3, [r4, #16]
 80041b2:	4632      	mov	r2, r6
 80041b4:	4649      	mov	r1, r9
 80041b6:	4640      	mov	r0, r8
 80041b8:	47d0      	blx	sl
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0ad      	beq.n	800411a <_printf_i+0x15a>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	079b      	lsls	r3, r3, #30
 80041c2:	d413      	bmi.n	80041ec <_printf_i+0x22c>
 80041c4:	68e0      	ldr	r0, [r4, #12]
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	4298      	cmp	r0, r3
 80041ca:	bfb8      	it	lt
 80041cc:	4618      	movlt	r0, r3
 80041ce:	e7a6      	b.n	800411e <_printf_i+0x15e>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4632      	mov	r2, r6
 80041d4:	4649      	mov	r1, r9
 80041d6:	4640      	mov	r0, r8
 80041d8:	47d0      	blx	sl
 80041da:	3001      	adds	r0, #1
 80041dc:	d09d      	beq.n	800411a <_printf_i+0x15a>
 80041de:	3501      	adds	r5, #1
 80041e0:	68e3      	ldr	r3, [r4, #12]
 80041e2:	9903      	ldr	r1, [sp, #12]
 80041e4:	1a5b      	subs	r3, r3, r1
 80041e6:	42ab      	cmp	r3, r5
 80041e8:	dcf2      	bgt.n	80041d0 <_printf_i+0x210>
 80041ea:	e7eb      	b.n	80041c4 <_printf_i+0x204>
 80041ec:	2500      	movs	r5, #0
 80041ee:	f104 0619 	add.w	r6, r4, #25
 80041f2:	e7f5      	b.n	80041e0 <_printf_i+0x220>
 80041f4:	0800433d 	.word	0x0800433d
 80041f8:	0800434e 	.word	0x0800434e

080041fc <memmove>:
 80041fc:	4288      	cmp	r0, r1
 80041fe:	b510      	push	{r4, lr}
 8004200:	eb01 0402 	add.w	r4, r1, r2
 8004204:	d902      	bls.n	800420c <memmove+0x10>
 8004206:	4284      	cmp	r4, r0
 8004208:	4623      	mov	r3, r4
 800420a:	d807      	bhi.n	800421c <memmove+0x20>
 800420c:	1e43      	subs	r3, r0, #1
 800420e:	42a1      	cmp	r1, r4
 8004210:	d008      	beq.n	8004224 <memmove+0x28>
 8004212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800421a:	e7f8      	b.n	800420e <memmove+0x12>
 800421c:	4402      	add	r2, r0
 800421e:	4601      	mov	r1, r0
 8004220:	428a      	cmp	r2, r1
 8004222:	d100      	bne.n	8004226 <memmove+0x2a>
 8004224:	bd10      	pop	{r4, pc}
 8004226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800422a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800422e:	e7f7      	b.n	8004220 <memmove+0x24>

08004230 <_sbrk_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4d06      	ldr	r5, [pc, #24]	@ (800424c <_sbrk_r+0x1c>)
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fc ffe4 	bl	8001208 <_sbrk>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_sbrk_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_sbrk_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	200002ac 	.word	0x200002ac

08004250 <memcpy>:
 8004250:	440a      	add	r2, r1
 8004252:	4291      	cmp	r1, r2
 8004254:	f100 33ff 	add.w	r3, r0, #4294967295
 8004258:	d100      	bne.n	800425c <memcpy+0xc>
 800425a:	4770      	bx	lr
 800425c:	b510      	push	{r4, lr}
 800425e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004266:	4291      	cmp	r1, r2
 8004268:	d1f9      	bne.n	800425e <memcpy+0xe>
 800426a:	bd10      	pop	{r4, pc}

0800426c <_realloc_r>:
 800426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004270:	4607      	mov	r7, r0
 8004272:	4614      	mov	r4, r2
 8004274:	460d      	mov	r5, r1
 8004276:	b921      	cbnz	r1, 8004282 <_realloc_r+0x16>
 8004278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4611      	mov	r1, r2
 800427e:	f7ff bc4d 	b.w	8003b1c <_malloc_r>
 8004282:	b92a      	cbnz	r2, 8004290 <_realloc_r+0x24>
 8004284:	f7ff fbde 	bl	8003a44 <_free_r>
 8004288:	4625      	mov	r5, r4
 800428a:	4628      	mov	r0, r5
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004290:	f000 f81a 	bl	80042c8 <_malloc_usable_size_r>
 8004294:	4284      	cmp	r4, r0
 8004296:	4606      	mov	r6, r0
 8004298:	d802      	bhi.n	80042a0 <_realloc_r+0x34>
 800429a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800429e:	d8f4      	bhi.n	800428a <_realloc_r+0x1e>
 80042a0:	4621      	mov	r1, r4
 80042a2:	4638      	mov	r0, r7
 80042a4:	f7ff fc3a 	bl	8003b1c <_malloc_r>
 80042a8:	4680      	mov	r8, r0
 80042aa:	b908      	cbnz	r0, 80042b0 <_realloc_r+0x44>
 80042ac:	4645      	mov	r5, r8
 80042ae:	e7ec      	b.n	800428a <_realloc_r+0x1e>
 80042b0:	42b4      	cmp	r4, r6
 80042b2:	4622      	mov	r2, r4
 80042b4:	4629      	mov	r1, r5
 80042b6:	bf28      	it	cs
 80042b8:	4632      	movcs	r2, r6
 80042ba:	f7ff ffc9 	bl	8004250 <memcpy>
 80042be:	4629      	mov	r1, r5
 80042c0:	4638      	mov	r0, r7
 80042c2:	f7ff fbbf 	bl	8003a44 <_free_r>
 80042c6:	e7f1      	b.n	80042ac <_realloc_r+0x40>

080042c8 <_malloc_usable_size_r>:
 80042c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042cc:	1f18      	subs	r0, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bfbc      	itt	lt
 80042d2:	580b      	ldrlt	r3, [r1, r0]
 80042d4:	18c0      	addlt	r0, r0, r3
 80042d6:	4770      	bx	lr

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
